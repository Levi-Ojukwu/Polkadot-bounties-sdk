{"version":3,"file":"typed-codecs.mjs","sources":["../../../src/typed-codecs/typed-codecs.ts"],"sourcesContent":["import { type ChainDefinition } from \"@/descriptors\"\nimport {\n  getDynamicBuilder,\n  getLookupFn,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport { decAnyMetadata, unifyMetadata } from \"@polkadot-api/substrate-bindings\"\nimport { TypedCodecs } from \"./types\"\n\nexport const createConstantEntry = (\n  palletName: string,\n  name: string,\n  lookup: MetadataLookup,\n  { buildConstant }: ReturnType<typeof getDynamicBuilder>,\n) => {\n  const pallet = lookup.metadata.pallets.find((p) => p.name === palletName)\n  const constant = pallet?.constants.find((c) => c.name === name)\n  if (constant == null)\n    throw new Error(`Runtime entry Constant(${palletName}.${name}) not found`)\n  return buildConstant(palletName, name)\n}\n\nconst withError =\n  <T>(\n    builder: (pallet: string, name: string) => T,\n    errName: string,\n  ): ((pallet: string, name: string) => T) =>\n  (pallet, name) => {\n    try {\n      return builder(pallet, name)\n    } catch {\n      throw new Error(`Runtime entry ${errName}(${pallet}.${name}) not found`)\n    }\n  }\n\n/**\n * It provides access the codecs of all possible on-chain interactions.\n *\n * @param descriptors  Pass descriptors from `@polkadot-api/descriptors`\n *                     generated by `papi` CLI.\n */\nexport const getTypedCodecs = async <D extends ChainDefinition>(\n  descriptors: D,\n): Promise<TypedCodecs<D>> => {\n  const metadata = unifyMetadata(\n    decAnyMetadata(await descriptors.getMetadata()),\n  )\n  const target = {}\n  const createProxy = (propCall: (prop: string) => unknown) =>\n    new Proxy(target, {\n      get(_, prop) {\n        return propCall(prop as string)\n      },\n    })\n  const createProxyPath = <T>(pathCall: (a: string, b: string) => T) => {\n    const cache: Record<string, Record<string, T>> = {}\n    return createProxy((a) => {\n      if (!cache[a]) cache[a] = {}\n      return createProxy((b) => {\n        if (!cache[a][b]) cache[a][b] = pathCall(a, b)\n        return cache[a][b]\n      })\n    }) as Record<string, Record<string, T>>\n  }\n\n  const lookup = getLookupFn(metadata)\n  const {\n    buildRuntimeCall,\n    buildStorage,\n    buildConstant,\n    buildCall,\n    buildEvent,\n    buildViewFn,\n  } = getDynamicBuilder(lookup)\n\n  return {\n    query: createProxyPath((...a) => {\n      const { value, args } = withError(buildStorage, \"Storage\")(...a)\n      return { value, args }\n    }),\n    tx: createProxyPath((...a) => withError(buildCall, \"Call\")(...a).codec),\n    event: createProxyPath(\n      (...args) => withError(buildEvent, \"Event\")(...args).codec,\n    ),\n    apis: createProxyPath(withError(buildRuntimeCall, \"Runtime API\")),\n    constants: createProxyPath(withError(buildConstant, \"Constant\")),\n    view: createProxyPath(withError(buildViewFn, \"ViewFn\")),\n  } as TypedCodecs<D>\n}\n"],"names":[],"mappings":";;;AAsBA,MAAM,YACJ,CACE,OAAA,EACA,OAAA,KAEF,CAAC,QAAQ,IAAA,KAAS;AAChB,EAAA,IAAI;AACF,IAAA,OAAO,OAAA,CAAQ,QAAQ,IAAI,CAAA;AAAA,EAC7B,CAAA,CAAA,MAAQ;AACN,IAAA,MAAM,IAAI,MAAM,CAAA,cAAA,EAAiB,OAAO,IAAI,MAAM,CAAA,CAAA,EAAI,IAAI,CAAA,WAAA,CAAa,CAAA;AAAA,EACzE;AACF,CAAA;AAQK,MAAM,cAAA,GAAiB,OAC5B,WAAA,KAC4B;AAC5B,EAAA,MAAM,QAAA,GAAW,aAAA;AAAA,IACf,cAAA,CAAe,MAAM,WAAA,CAAY,WAAA,EAAa;AAAA,GAChD;AACA,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,MAAM,WAAA,GAAc,CAAC,QAAA,KACnB,IAAI,MAAM,MAAA,EAAQ;AAAA,IAChB,GAAA,CAAI,GAAG,IAAA,EAAM;AACX,MAAA,OAAO,SAAS,IAAc,CAAA;AAAA,IAChC;AAAA,GACD,CAAA;AACH,EAAA,MAAM,eAAA,GAAkB,CAAI,QAAA,KAA0C;AACpE,IAAA,MAAM,QAA2C,EAAC;AAClD,IAAA,OAAO,WAAA,CAAY,CAAC,CAAA,KAAM;AACxB,MAAA,IAAI,CAAC,KAAA,CAAM,CAAC,GAAG,KAAA,CAAM,CAAC,IAAI,EAAC;AAC3B,MAAA,OAAO,WAAA,CAAY,CAAC,CAAA,KAAM;AACxB,QAAA,IAAI,CAAC,KAAA,CAAM,CAAC,CAAA,CAAE,CAAC,CAAA,EAAG,KAAA,CAAM,CAAC,CAAA,CAAE,CAAC,CAAA,GAAI,QAAA,CAAS,GAAG,CAAC,CAAA;AAC7C,QAAA,OAAO,KAAA,CAAM,CAAC,CAAA,CAAE,CAAC,CAAA;AAAA,MACnB,CAAC,CAAA;AAAA,IACH,CAAC,CAAA;AAAA,EACH,CAAA;AAEA,EAAA,MAAM,MAAA,GAAS,YAAY,QAAQ,CAAA;AACnC,EAAA,MAAM;AAAA,IACJ,gBAAA;AAAA,IACA,YAAA;AAAA,IACA,aAAA;AAAA,IACA,SAAA;AAAA,IACA,UAAA;AAAA,IACA;AAAA,GACF,GAAI,kBAAkB,MAAM,CAAA;AAE5B,EAAA,OAAO;AAAA,IACL,KAAA,EAAO,eAAA,CAAgB,CAAA,GAAI,CAAA,KAAM;AAC/B,MAAA,MAAM,EAAE,OAAO,IAAA,EAAK,GAAI,UAAU,YAAA,EAAc,SAAS,CAAA,CAAE,GAAG,CAAC,CAAA;AAC/D,MAAA,OAAO,EAAE,OAAO,IAAA,EAAK;AAAA,IACvB,CAAC,CAAA;AAAA,IACD,EAAA,EAAI,eAAA,CAAgB,CAAA,GAAI,CAAA,KAAM,SAAA,CAAU,SAAA,EAAW,MAAM,CAAA,CAAE,GAAG,CAAC,CAAA,CAAE,KAAK,CAAA;AAAA,IACtE,KAAA,EAAO,eAAA;AAAA,MACL,CAAA,GAAI,SAAS,SAAA,CAAU,UAAA,EAAY,OAAO,CAAA,CAAE,GAAG,IAAI,CAAA,CAAE;AAAA,KACvD;AAAA,IACA,IAAA,EAAM,eAAA,CAAgB,SAAA,CAAU,gBAAA,EAAkB,aAAa,CAAC,CAAA;AAAA,IAChE,SAAA,EAAW,eAAA,CAAgB,SAAA,CAAU,aAAA,EAAe,UAAU,CAAC,CAAA;AAAA,IAC/D,IAAA,EAAM,eAAA,CAAgB,SAAA,CAAU,WAAA,EAAa,QAAQ,CAAC;AAAA,GACxD;AACF;;;;"}