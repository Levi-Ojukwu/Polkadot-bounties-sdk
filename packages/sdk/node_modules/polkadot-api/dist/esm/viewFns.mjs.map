{"version":3,"file":"viewFns.mjs","sources":["../../src/viewFns.ts"],"sourcesContent":["import { firstValueFromWithSignal, isOptionalArg } from \"@/utils\"\nimport { ChainHead$ } from \"@polkadot-api/observable-client\"\nimport { fromHex, mergeUint8, toHex } from \"@polkadot-api/utils\"\nimport { map, mergeMap } from \"rxjs\"\nimport { CompatibilityFunctions, CompatibilityHelper } from \"./compatibility\"\nimport { compactNumber, _void } from \"@polkadot-api/substrate-bindings\"\nimport { PullOptions } from \"./types\"\n\ntype WithCallOptions<Args extends Array<any>> = Args[\"length\"] extends 0\n  ? [options?: PullOptions]\n  : [...args: Args, options?: PullOptions]\n\nexport type ViewFn<Unsafe, D, Args extends Array<any>, Payload> = {\n  /**\n   * Get `Payload` (Promise-based) for the view function.\n   *\n   * @param args  All keys needed for that runtime call.\n   *              At the end, optionally set which block to target (latest\n   *              known finalized is the default) and an AbortSignal.\n   */\n  (...args: WithCallOptions<Args>): Promise<Payload>\n} & (Unsafe extends true ? {} : CompatibilityFunctions<D>)\n\nconst RUNTIME_NAMESPACE = \"RuntimeViewFunction\"\nconst RUNTIME_METHOD = \"execute_view_function\"\nconst RUNTIME_CALL_NAME = RUNTIME_NAMESPACE + \"_\" + RUNTIME_METHOD\n\nexport const createViewFnEntry = (\n  pallet: string,\n  entry: string,\n  chainHead: ChainHead$,\n  {\n    isCompatible,\n    getCompatibilityLevel,\n    compatibleRuntime$,\n    argsAreCompatible,\n    valuesAreCompatible,\n  }: CompatibilityHelper,\n): ViewFn<any, any, any, any> => {\n  const compatibilityError = () =>\n    new Error(`Incompatible runtime entry ViewFn(${pallet}.${entry})`)\n\n  const fn = (...args: Array<any>) => {\n    const lastArg = args[args.length - 1]\n    const isLastArgOptional = isOptionalArg(lastArg)\n    const { signal, at: _at }: PullOptions = isLastArgOptional ? lastArg : {}\n    const at = _at ?? null\n\n    const result$ = compatibleRuntime$(chainHead, at).pipe(\n      mergeMap(([runtime, ctx]) => {\n        let apiCodec\n        try {\n          apiCodec = ctx.dynamicBuilder.buildRuntimeCall(\n            RUNTIME_NAMESPACE,\n            RUNTIME_METHOD,\n          )\n        } catch {\n          throw new Error(\n            `Runtime entry RuntimeCall(${RUNTIME_CALL_NAME}) not found`,\n          )\n        }\n        let viewCodec\n        try {\n          viewCodec = ctx.dynamicBuilder.buildViewFn(pallet, entry)\n        } catch {\n          throw new Error(`Runtime entry ViewFn(${pallet}.${entry}) not found`)\n        }\n        if (!argsAreCompatible(runtime, ctx, args)) throw compatibilityError()\n        const viewArgs = viewCodec.args.enc(args)\n        const arg = mergeUint8([\n          fromHex(\n            ctx.lookup.metadata.pallets\n              .find(({ name }) => name === pallet)!\n              .viewFns.find(({ name }) => name === entry)!.id,\n          ),\n          compactNumber.enc(viewArgs.length),\n          viewArgs,\n        ])\n\n        return chainHead.call$(at, RUNTIME_CALL_NAME, toHex(arg)).pipe(\n          map((v) => {\n            try {\n              const decoded = apiCodec.value.dec(v)\n              if (\n                !(\"success\" in decoded && \"value\" in decoded) ||\n                (!(\"type\" in decoded.value) && !(\"asBytes\" in decoded.value))\n              )\n                throw null\n              return decoded\n            } catch {\n              throw new Error(\n                `Unexpected RuntimeCall(${RUNTIME_CALL_NAME}) type`,\n              )\n            }\n          }),\n          map(({ success, value }) => {\n            if (!success) throw new Error(`ViewFn API Error: ${value.type}`)\n            const decoded = viewCodec.value.dec(value.asBytes())\n            if (!valuesAreCompatible(runtime, ctx, decoded))\n              throw compatibilityError()\n            return decoded\n          }),\n        )\n      }),\n      chainHead.withHodl(at),\n    )\n\n    return firstValueFromWithSignal(result$, signal)\n  }\n\n  return Object.assign(fn, { getCompatibilityLevel, isCompatible })\n}\n"],"names":[],"mappings":"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"}