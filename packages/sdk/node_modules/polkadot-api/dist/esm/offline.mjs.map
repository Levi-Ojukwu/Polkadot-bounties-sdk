{"version":3,"file":"offline.mjs","sources":["../../src/offline.ts"],"sourcesContent":["import { getDynamicBuilder, getLookupFn } from \"@polkadot-api/metadata-builders\"\nimport { ChainDefinition, PlainDescriptor } from \"./descriptors\"\nimport { OfflineTxEntry } from \"./tx\"\nimport {\n  Binary,\n  Enum,\n  metadata as metadataCodec,\n  unifyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { fromHex, mergeUint8, toHex } from \"@polkadot-api/utils\"\nimport { OfflineApi } from \"./types\"\nimport { getSignExtensionsCreator } from \"./tx/signed-extensions\"\n\nconst createOfflineTxEntry = <\n  Arg extends {} | undefined,\n  Pallet extends string,\n  Name extends string,\n  Asset extends PlainDescriptor<any>,\n>(\n  pallet: Pallet,\n  name: Name,\n  metadataRaw: Uint8Array,\n  dynamicBuilder: ReturnType<typeof getDynamicBuilder>,\n  signExtensionCreator: ReturnType<typeof getSignExtensionsCreator>,\n): OfflineTxEntry<Arg, Pallet, Name, Asset> => {\n  let codecs\n  try {\n    codecs = dynamicBuilder.buildCall(pallet, name)\n  } catch {\n    throw new Error(`Runtime entry Tx(${pallet}.${name}) not found`)\n  }\n  const { location, codec } = codecs\n  const locationBytes = new Uint8Array(location)\n\n  return (arg: Arg) => {\n    const encodedData = Binary.fromBytes(\n      mergeUint8([locationBytes, codec.enc(arg)]),\n    )\n\n    return {\n      encodedData,\n      decodedCall: Enum(pallet, Enum(name, arg as any) as any),\n      sign: async (from, extensions) =>\n        toHex(\n          await from.signTx(\n            encodedData.asBytes(),\n            signExtensionCreator(extensions),\n            metadataRaw,\n            extensions.mortality.mortal\n              ? extensions.mortality.startAtBlock.height\n              : 0,\n          ),\n        ),\n    }\n  }\n}\n\n/**\n * Asynchronously create an instance of `OfflineApi`.\n * OfflineApi allows to create and sign transactions and access chain constants.\n *\n * @param chainDefinition  Pass descriptors from `@polkadot-api/descriptors`\n *                         generated by `papi` CLI.\n */\nexport const getOfflineApi: <D extends ChainDefinition>(\n  chainDefinition: D,\n) => Promise<OfflineApi<D>> = async ({ genesis: genesisHex, getMetadata }) => {\n  if (!genesisHex) throw new Error(\"Missing genesis hash\")\n  const genesis = fromHex(genesisHex)\n  const metadataRaw = await getMetadata()\n  const metadata = unifyMetadata(metadataCodec.dec(metadataRaw))\n  const lookupFn = getLookupFn(metadata)\n  const dynamicBuilder = getDynamicBuilder(lookupFn)\n  const signExtensionCreator = getSignExtensionsCreator(\n    genesis,\n    lookupFn,\n    dynamicBuilder,\n  )\n\n  const getPallet = (name: string) =>\n    metadata.pallets.find((p) => p.name === name)\n\n  const target = {}\n  const createProxy = (propCall: (prop: string) => unknown) =>\n    new Proxy(target, {\n      get(_, prop) {\n        return propCall(prop as string)\n      },\n    })\n\n  const createProxyPath = <T>(pathCall: (a: string, b: string) => T) => {\n    const cache: Record<string, Record<string, T>> = {}\n    return createProxy((a) => {\n      if (!cache[a]) cache[a] = {}\n      return createProxy((b) => {\n        if (!cache[a][b]) cache[a][b] = pathCall(a, b)\n        return cache[a][b]\n      })\n    }) as Record<string, Record<string, T>>\n  }\n\n  const constants = createProxyPath((pallet, name) => {\n    const constant = getPallet(pallet)?.constants.find((c) => c.name === name)\n    if (!constant)\n      throw new Error(`Runtime entry Constant(${pallet}.${name}) not found`)\n    return dynamicBuilder.buildConstant(pallet, name).dec(constant.value)\n  })\n\n  const tx = createProxyPath((pallet, name) =>\n    createOfflineTxEntry(\n      pallet,\n      name,\n      metadataRaw,\n      dynamicBuilder,\n      signExtensionCreator,\n    ),\n  )\n\n  return { constants, tx } as any\n}\n"],"names":["metadata","metadataCodec"],"mappings":";;;;;AAaA,MAAM,uBAAuB,CAM3B,MAAA,EACA,IAAA,EACA,WAAA,EACA,gBACA,oBAAA,KAC6C;AAC7C,EAAA,IAAI,MAAA;AACJ,EAAA,IAAI;AACF,IAAA,MAAA,GAAS,cAAA,CAAe,SAAA,CAAU,MAAA,EAAQ,IAAI,CAAA;AAAA,EAChD,CAAA,CAAA,MAAQ;AACN,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,iBAAA,EAAoB,MAAM,CAAA,CAAA,EAAI,IAAI,CAAA,WAAA,CAAa,CAAA;AAAA,EACjE;AACA,EAAA,MAAM,EAAE,QAAA,EAAU,KAAA,EAAM,GAAI,MAAA;AAC5B,EAAA,MAAM,aAAA,GAAgB,IAAI,UAAA,CAAW,QAAQ,CAAA;AAE7C,EAAA,OAAO,CAAC,GAAA,KAAa;AACnB,IAAA,MAAM,cAAc,MAAA,CAAO,SAAA;AAAA,MACzB,WAAW,CAAC,aAAA,EAAe,MAAM,GAAA,CAAI,GAAG,CAAC,CAAC;AAAA,KAC5C;AAEA,IAAA,OAAO;AAAA,MACL,WAAA;AAAA,MACA,aAAa,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,IAAA,EAAM,GAAU,CAAQ,CAAA;AAAA,MACvD,IAAA,EAAM,OAAO,IAAA,EAAM,UAAA,KACjB,KAAA;AAAA,QACE,MAAM,IAAA,CAAK,MAAA;AAAA,UACT,YAAY,OAAA,EAAQ;AAAA,UACpB,qBAAqB,UAAU,CAAA;AAAA,UAC/B,WAAA;AAAA,UACA,WAAW,SAAA,CAAU,MAAA,GACjB,UAAA,CAAW,SAAA,CAAU,aAAa,MAAA,GAClC;AAAA;AACN;AACF,KACJ;AAAA,EACF,CAAA;AACF,CAAA;AASO,MAAM,gBAEiB,OAAO,EAAE,OAAA,EAAS,UAAA,EAAY,aAAY,KAAM;AAC5E,EAAA,IAAI,CAAC,UAAA,EAAY,MAAM,IAAI,MAAM,sBAAsB,CAAA;AACvD,EAAA,MAAM,OAAA,GAAU,QAAQ,UAAU,CAAA;AAClC,EAAA,MAAM,WAAA,GAAc,MAAM,WAAA,EAAY;AACtC,EAAA,MAAMA,UAAA,GAAW,aAAA,CAAcC,QAAA,CAAc,GAAA,CAAI,WAAW,CAAC,CAAA;AAC7D,EAAA,MAAM,QAAA,GAAW,YAAYD,UAAQ,CAAA;AACrC,EAAA,MAAM,cAAA,GAAiB,kBAAkB,QAAQ,CAAA;AACjD,EAAA,MAAM,oBAAA,GAAuB,wBAAA;AAAA,IAC3B,OAAA;AAAA,IACA,QAAA;AAAA,IACA;AAAA,GACF;AAEA,EAAA,MAAM,SAAA,GAAY,CAAC,IAAA,KACjBA,UAAA,CAAS,OAAA,CAAQ,KAAK,CAAC,CAAA,KAAM,CAAA,CAAE,IAAA,KAAS,IAAI,CAAA;AAE9C,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,MAAM,WAAA,GAAc,CAAC,QAAA,KACnB,IAAI,MAAM,MAAA,EAAQ;AAAA,IAChB,GAAA,CAAI,GAAG,IAAA,EAAM;AACX,MAAA,OAAO,SAAS,IAAc,CAAA;AAAA,IAChC;AAAA,GACD,CAAA;AAEH,EAAA,MAAM,eAAA,GAAkB,CAAI,QAAA,KAA0C;AACpE,IAAA,MAAM,QAA2C,EAAC;AAClD,IAAA,OAAO,WAAA,CAAY,CAAC,CAAA,KAAM;AACxB,MAAA,IAAI,CAAC,KAAA,CAAM,CAAC,GAAG,KAAA,CAAM,CAAC,IAAI,EAAC;AAC3B,MAAA,OAAO,WAAA,CAAY,CAAC,CAAA,KAAM;AACxB,QAAA,IAAI,CAAC,KAAA,CAAM,CAAC,CAAA,CAAE,CAAC,CAAA,EAAG,KAAA,CAAM,CAAC,CAAA,CAAE,CAAC,CAAA,GAAI,QAAA,CAAS,GAAG,CAAC,CAAA;AAC7C,QAAA,OAAO,KAAA,CAAM,CAAC,CAAA,CAAE,CAAC,CAAA;AAAA,MACnB,CAAC,CAAA;AAAA,IACH,CAAC,CAAA;AAAA,EACH,CAAA;AAEA,EAAA,MAAM,SAAA,GAAY,eAAA,CAAgB,CAAC,MAAA,EAAQ,IAAA,KAAS;AAClD,IAAA,MAAM,QAAA,GAAW,SAAA,CAAU,MAAM,CAAA,EAAG,SAAA,CAAU,KAAK,CAAC,CAAA,KAAM,CAAA,CAAE,IAAA,KAAS,IAAI,CAAA;AACzE,IAAA,IAAI,CAAC,QAAA;AACH,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,uBAAA,EAA0B,MAAM,CAAA,CAAA,EAAI,IAAI,CAAA,WAAA,CAAa,CAAA;AACvE,IAAA,OAAO,eAAe,aAAA,CAAc,MAAA,EAAQ,IAAI,CAAA,CAAE,GAAA,CAAI,SAAS,KAAK,CAAA;AAAA,EACtE,CAAC,CAAA;AAED,EAAA,MAAM,EAAA,GAAK,eAAA;AAAA,IAAgB,CAAC,QAAQ,IAAA,KAClC,oBAAA;AAAA,MACE,MAAA;AAAA,MACA,IAAA;AAAA,MACA,WAAA;AAAA,MACA,cAAA;AAAA,MACA;AAAA;AACF,GACF;AAEA,EAAA,OAAO,EAAE,WAAW,EAAA,EAAG;AACzB;;;;"}