{"version":3,"file":"create-tx.mjs","sources":["../../../src/tx/create-tx.ts"],"sourcesContent":["import { BlockInfo, ChainHead$ } from \"@polkadot-api/observable-client\"\nimport type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport { HexString, u16, u32, u64, u8 } from \"@polkadot-api/substrate-bindings\"\nimport { fromHex, toHex } from \"@polkadot-api/utils\"\nimport {\n  Observable,\n  catchError,\n  combineLatest,\n  distinctUntilChanged,\n  filter,\n  map,\n  mergeMap,\n  of,\n  scan,\n  startWith,\n  switchMap,\n  take,\n} from \"rxjs\"\nimport { getSignExtensionsCreator } from \"./signed-extensions\"\nimport { CustomSignedExtensionValues } from \"./types\"\n\ntype HintedSignedExtensions = Partial<{\n  tip: bigint\n  mortality: { mortal: false } | { mortal: true; period: number }\n  asset: Uint8Array\n  nonce: number\n}>\n\nconst NONCE_RUNTIME_CALL = \"AccountNonceApi_account_nonce\"\nconst lenToDecoder = {\n  1: u8.dec,\n  2: u16.dec,\n  4: u32.dec,\n  8: u64.dec,\n}\n\nconst getNonceAtBlock$ = (\n  call$: ChainHead$[\"call$\"],\n  from: HexString,\n  at: string,\n) =>\n  call$(at, NONCE_RUNTIME_CALL, from).pipe(\n    map((result) => {\n      const bytes = fromHex(result)\n      const decoder = lenToDecoder[bytes.length as 2 | 4 | 8]\n      if (!decoder)\n        throw new Error(`${NONCE_RUNTIME_CALL} retrieved wrong data`)\n      return decoder(bytes)\n    }),\n  )\n\nexport const createTx: (\n  chainHead: ChainHead$,\n  signer: PolkadotSigner,\n  callData: Uint8Array,\n  atBlock: BlockInfo,\n  customSignExt: Record<string, CustomSignedExtensionValues>,\n  hinted?: HintedSignedExtensions,\n) => Observable<Uint8Array> = (\n  chainHead,\n  signer,\n  callData,\n  atBlock,\n  customSignedExtensions,\n  hinted = {},\n) =>\n  combineLatest([\n    hinted.nonce\n      ? of(hinted.nonce)\n      : getNonce$(chainHead, toHex(signer.publicKey)),\n    chainHead.getRuntimeContext$(atBlock.hash),\n    chainHead.genesis$,\n  ]).pipe(\n    take(1),\n    mergeMap(([nonce, ctx, genesis]) => {\n      const signExtCreator = getSignExtensionsCreator(\n        fromHex(genesis),\n        ctx.lookup,\n        ctx.dynamicBuilder,\n      )\n\n      const mortality: HintedSignedExtensions[\"mortality\"] =\n        hinted.mortality ?? { period: 64, mortal: true }\n\n      const signExtensions = signExtCreator({\n        nonce: nonce as number,\n        tip: hinted.tip ?? 0n,\n        mortality: mortality.mortal\n          ? {\n              mortal: true,\n              period: mortality.period,\n              startAtBlock: {\n                height: atBlock.number,\n                hash: atBlock.hash,\n              },\n            }\n          : { mortal: false },\n        customSignedExtensions,\n        asset: hinted.asset,\n      })\n\n      return signer.signTx(\n        callData,\n        signExtensions,\n        ctx.metadataRaw,\n        atBlock.number,\n      )\n    }),\n  )\n\nconst getNonce$ = (chainHead: ChainHead$, from: HexString) => {\n  const followHead$ = (head: string) =>\n    chainHead.newBlocks$.pipe(\n      scan((acc, block) => (block.parent === acc ? block.hash : acc), head),\n      startWith(head),\n      distinctUntilChanged(),\n    )\n  const followNonce$ = (head: string) =>\n    followHead$(head).pipe(\n      take(2),\n      switchMap((hash) => getNonceAtBlock$(chainHead.call$, from, hash)),\n    )\n  const getHeadsNonce$ = (heads: string[]) =>\n    combineLatest(\n      heads.map((head) =>\n        followNonce$(head).pipe(\n          map((value) => ({\n            success: true as const,\n            value,\n          })),\n          catchError((err) =>\n            of({\n              success: false as const,\n              value: err,\n            }),\n          ),\n        ),\n      ),\n    ).pipe(take(1))\n\n  return chainHead.pinnedBlocks$.pipe(\n    filter((v) => !v.recovering && v.blocks.size > 0),\n    take(1),\n    map(({ blocks, best }) => {\n      // Grab only the heads: those blocks above the best that don't have children and are not getting pruned\n      const bestBlock = blocks.get(best)!\n      return [...blocks.values()]\n        .filter(\n          (v) =>\n            !v.unpinnable &&\n            v.children.size === 0 &&\n            v.number >= bestBlock.number,\n        )\n        .map((v) => v.hash)\n    }),\n    switchMap(getHeadsNonce$),\n    map((result) => {\n      const winner = result.reduce(\n        (acc: bigint | number | null, v) =>\n          v.success ? (v.value >= (acc ?? 0) ? v.value : acc) : acc,\n        null,\n      )\n\n      if (winner == null) {\n        // We must have at least one error\n        throw result[0].value\n      }\n      return winner\n    }),\n  )\n}\n"],"names":[],"mappings":"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"}