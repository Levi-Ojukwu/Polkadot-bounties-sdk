import { Binary } from '@polkadot-api/substrate-bindings';
import { lastValueFrom, mergeMap, defer, map, merge, race, takeWhile, ignoreElements, endWith, filter, take, Observable, concat, of, EMPTY, distinctUntilChanged } from 'rxjs';
import '@polkadot-api/observable-client';
import '../utils/shareLatest.mjs';
import { toHex, fromHex } from '@polkadot-api/utils';
import { continueWith } from '../utils/continue-with.mjs';
import 'rxjs/operators';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, key + "" , value);
const computeState = (analized$, blocks$) => new Observable((observer) => {
  const analyzedBlocks = /* @__PURE__ */ new Map();
  let pinnedBlocks;
  let latestState;
  const computeNextState = () => {
    let current = pinnedBlocks.best;
    let analyzed = analyzedBlocks.get(current);
    let analyzedNumber = pinnedBlocks.blocks.get(current).number;
    while (!analyzed) {
      const block = pinnedBlocks.blocks.get(current);
      if (!block) break;
      analyzed = analyzedBlocks.get(current = block.parent);
      analyzedNumber--;
    }
    if (!analyzed) return;
    const isFinalized = analyzedNumber <= pinnedBlocks.blocks.get(pinnedBlocks.finalized).number;
    const found = analyzed.found.type;
    if (found && latestState?.found && latestState.hash === analyzed.hash) {
      if (isFinalized) observer.complete();
      return;
    }
    observer.next(
      latestState = analyzed.found.type ? {
        found,
        hash: analyzed.hash,
        number: analyzedNumber,
        index: analyzed.found.index,
        events: analyzed.found.events
      } : {
        found,
        validity: analyzed.found.validity
      }
    );
    if (isFinalized) {
      if (found) observer.complete();
      else if (analyzed.found.validity?.success === false)
        observer.error(new InvalidTxError(analyzed.found.validity.value));
    }
  };
  const subscription = blocks$.pipe(
    distinctUntilChanged(
      (a, b) => a.finalized === b.finalized && a.best === b.best
    )
  ).subscribe({
    next: (pinned) => {
      pinnedBlocks = pinned;
      if (analyzedBlocks.size === 0) return;
      computeNextState();
    },
    error(e) {
      observer.error(e);
    }
  });
  subscription.add(
    analized$.subscribe({
      next: (block) => {
        analyzedBlocks.set(block.hash, block);
        computeNextState();
      },
      error(e) {
        observer.error(e);
      }
    })
  );
  return subscription;
}).pipe(distinctUntilChanged((a, b) => a === b));
const getTxSuccessFromSystemEvents = (systemEvents, txIdx) => {
  const events = systemEvents.filter((x) => x.phase.type === "ApplyExtrinsic" && x.phase.value === txIdx).map((x) => ({ ...x.event, topics: x.topics }));
  const lastEvent = events[events.length - 1];
  if (lastEvent.type === "System" && lastEvent.value.type === "ExtrinsicFailed") {
    return {
      ok: false,
      events,
      dispatchError: lastEvent.value.value.dispatch_error
    };
  }
  return { ok: true, events };
};
class InvalidTxError extends Error {
  // likely to be a `TransactionValidityError`
  constructor(e) {
    super(
      JSON.stringify(
        e,
        (_, value) => {
          if (typeof value === "bigint") return value.toString();
          return value instanceof Binary ? value.asHex() : value;
        },
        2
      )
    );
    __publicField(this, "error");
    this.name = "InvalidTxError";
    this.error = e;
  }
}
const submit$ = (chainHead, broadcastTx$, tx, emitSign = false) => chainHead.hasher$.pipe(
  mergeMap((hasher) => {
    const txHash = toHex(hasher(fromHex(tx)));
    const getTxEvent = (type, rest) => ({
      type,
      txHash,
      ...rest
    });
    const pinnedBlocks = chainHead.pinnedBlocks$.state;
    const getHeightFromMortality = (mortality) => {
      if (!mortality.mortal) return 0;
      const { phase, period } = mortality;
      const topNumber = pinnedBlocks.blocks.get(pinnedBlocks.best).number;
      return Math.floor((Math.max(topNumber, phase) - phase) / period) * period + phase;
    };
    const getTipsFromHeight = (height) => {
      let tips = [...pinnedBlocks.blocks.values()].filter(
        (block) => !block.unpinnable && !block.children.size
      );
      const higherTip = Math.max(...tips.map(({ number }) => number));
      tips = tips.filter(({ number }) => number >= higherTip - 1);
      const finalized = pinnedBlocks.blocks.get(pinnedBlocks.finalized);
      tips = finalized.children ? [finalized, ...tips] : tips;
      return tips.filter((x) => x.number >= height);
    };
    const validateTxAt$ = ({ hash }) => chainHead.validateTx$(hash, tx);
    const validate$ = defer(
      () => pinnedBlocks.finalizedRuntime.runtime.pipe(
        map((r) => r.getMortalityFromTx(tx)),
        map(getHeightFromMortality),
        map(getTipsFromHeight),
        mergeMap((blocksToValidate) => {
          let err;
          return merge(
            ...blocksToValidate.map(
              (b) => race(
                validateTxAt$(b),
                chainHead.finalized$.pipe(
                  takeWhile((finalized) => {
                    if (finalized.number < b.number) return true;
                    let curr = finalized;
                    while (curr.number > b.number) {
                      const parent = pinnedBlocks.blocks.get(curr.parent);
                      if (!parent) return false;
                      curr = parent;
                    }
                    return curr.hash === finalized.hash;
                  }),
                  ignoreElements(),
                  endWith({ success: null })
                )
              )
            )
          ).pipe(
            filter((v, idx) => {
              if (v.success === false) err ?? (err = new InvalidTxError(v.value));
              if (v.success) return true;
              if (idx === blocksToValidate.length - 1 && err) throw err;
              return false;
            }),
            take(1)
          );
        }),
        ignoreElements()
      )
    );
    const track$ = new Observable((observer) => {
      const subscription = chainHead.trackTx$(tx).subscribe(observer);
      subscription.add(
        broadcastTx$(tx).subscribe({
          error(e) {
            observer.error(e);
          }
        })
      );
      return subscription;
    });
    const bestBlockState$ = computeState(
      track$,
      chainHead.pinnedBlocks$
    ).pipe(
      map((x) => {
        if (!x.found)
          return getTxEvent("txBestBlocksState", {
            found: false,
            isValid: x.validity?.success !== false
          });
        return getTxEvent("txBestBlocksState", {
          found: true,
          block: {
            index: x.index,
            number: x.number,
            hash: x.hash
          },
          ...getTxSuccessFromSystemEvents(x.events, x.index)
        });
      })
    );
    return concat(
      emitSign ? of(getTxEvent("signed", {})) : EMPTY,
      validate$,
      of(getTxEvent("broadcasted", {})),
      bestBlockState$.pipe(
        continueWith(
          ({ found, type, ...rest }) => found ? of(getTxEvent("finalized", rest)) : EMPTY
        )
      )
    );
  })
);
const submit = async (chainHead, broadcastTx$, transaction, _at) => lastValueFrom(submit$(chainHead, broadcastTx$, transaction)).then((x) => {
  if (x.type !== "finalized") throw null;
  const result = { ...x };
  delete result.type;
  return result;
});

export { InvalidTxError, submit, submit$ };
//# sourceMappingURL=submit-fns.mjs.map
