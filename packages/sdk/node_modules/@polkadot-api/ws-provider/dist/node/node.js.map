{"version":3,"file":"node.js","sources":["../../src/types-common.ts","../../src/follow-enhancer.ts","../../src/default-provider.ts","../../src/legacy-provider.ts","../../src/node.ts"],"sourcesContent":["import { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\n\nexport enum WsEvent {\n  CONNECTING,\n  CONNECTED,\n  ERROR,\n  CLOSE,\n}\n\nexport type WsConnecting = {\n  type: WsEvent.CONNECTING\n  uri: string\n  protocols?: string | string[]\n}\nexport type WsConnected = {\n  type: WsEvent.CONNECTED\n  uri: string\n  protocols?: string | string[]\n}\nexport type WsError = {\n  type: WsEvent.ERROR\n  event: any\n}\nexport type WsClose = {\n  type: WsEvent.CLOSE\n  event: any\n}\nexport type StatusChange = WsConnecting | WsConnected | WsError | WsClose\nexport type WsJsonRpcProvider = JsonRpcProvider & {\n  switch: (uri?: string, protocol?: string[]) => void\n  getStatus: () => StatusChange\n}\nexport { type JsonRpcProvider }\n","import { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\n\nconst methods: Record<string, \"follow\" | \"unfollow\"> = {}\n;[\"v1\", \"unstable\"].forEach((version) => {\n  methods[`chainHead_${version}_follow`] = \"follow\"\n  methods[`chainHead_${version}_unfollow`] = \"unfollow\"\n})\n\nexport const followEnhancer: (\n  input: JsonRpcProvider,\n  forceDisconnect: () => void,\n) => JsonRpcProvider & {\n  cleanup: () => void\n} = (base, forceDisconnect) => {\n  const prematureStops = new Set<string>()\n  const preOpId = new Map<string, string>()\n  const onGoing = new Set<string>()\n  let methodsRequestId: string | undefined\n\n  const result: JsonRpcProvider = (onMsg) => {\n    const { send, disconnect } = base((fromProvider) => {\n      const parsed = JSON.parse(fromProvider)\n      // it's a response\n      if (\"id\" in parsed) {\n        const { id, result } = parsed\n        if (id === methodsRequestId) {\n          methodsRequestId = undefined\n          if (\n            result &&\n            !(result.methods as string[]).some((x) => {\n              const [group, , name] = x.split(\"_\")\n              return group === \"chainHead\" && name === \"follow\"\n            })\n          ) {\n            onMsg(fromProvider)\n            forceDisconnect()\n            return\n          }\n        }\n\n        const msg = preOpId.get(id)\n        if (msg) {\n          preOpId.delete(id)\n          if (prematureStops.has(result)) {\n            prematureStops.delete(result)\n            return\n          }\n\n          onGoing.add(result)\n          const currentSize = onGoing.size + preOpId.size\n          if (currentSize > 2)\n            console.warn(\n              `Too many chainHead follow subscriptions (${currentSize})`,\n            )\n          else if (parsed.error) {\n            console.warn(`chainHead follow failed on the ${currentSize} sub`)\n            forceDisconnect()\n            preOpId.set(id, msg)\n            send(msg)\n            return\n          }\n        }\n      } else {\n        // it's a notifiaction\n        const { subscription, result } = (parsed as any).params\n        if (result?.event === \"stop\") {\n          if (onGoing.has(subscription)) onGoing.delete(subscription)\n          else prematureStops.add(subscription)\n        }\n      }\n      onMsg(fromProvider)\n    })\n\n    return {\n      send(toProvider) {\n        const parsed = JSON.parse(toProvider)\n        if (parsed.method === \"rpc_methods\") methodsRequestId = parsed.id\n\n        const method = methods[parsed.method]\n        if (method === \"follow\") {\n          preOpId.set(parsed.id, toProvider)\n        } else if (method === \"unfollow\") {\n          onGoing.delete(parsed.params[0])\n        }\n        send(toProvider)\n      },\n      disconnect,\n    }\n  }\n\n  return Object.assign(result, {\n    cleanup: () => {\n      prematureStops.clear()\n      preOpId.clear()\n      onGoing.clear()\n    },\n  })\n}\n","import { getSyncProvider } from \"@polkadot-api/json-rpc-provider-proxy\"\nimport { StatusChange, WsJsonRpcProvider, WsEvent } from \"./types-common\"\nimport { followEnhancer } from \"./follow-enhancer\"\nimport { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nimport { WebSocketClass } from \"./types-new\"\n\nconst timeoutError: StatusChange = {\n  type: WsEvent.ERROR,\n  event: { type: \"timeout\" },\n}\n\nexport const noop = () => {}\n\nexport const defaultConfig: {\n  onStatusChanged: (status: StatusChange) => void\n  innerEnhancer: (input: JsonRpcProvider) => JsonRpcProvider\n  timeout: number\n} = {\n  onStatusChanged: noop,\n  innerEnhancer: (x: JsonRpcProvider) => x,\n  timeout: 5_000,\n}\n\nexport const mapEndpoints = (\n  endpoints: Array<string | { uri: string; protocol: string | string[] }>,\n): Array<[string, string | string[]] | [string]> =>\n  endpoints.map((x) => (typeof x === \"string\" ? [x] : [x.uri, x.protocol]))\n\nexport const getWsProvider = (\n  endpoints:\n    | string\n    | Array<string | { uri: string; protocol: string | string[] }>,\n  config?: Partial<{\n    onStatusChanged: (status: StatusChange) => void\n    innerEnhancer: (input: JsonRpcProvider) => JsonRpcProvider\n    timeout: number\n    websocketClass: WebSocketClass\n  }>,\n): WsJsonRpcProvider => {\n  const { onStatusChanged, innerEnhancer, timeout } = {\n    ...defaultConfig,\n    ...config,\n  }\n  const actualEndpoints = mapEndpoints(\n    Array.isArray(endpoints) ? endpoints : [endpoints],\n  )\n  const WebsocketClass = config?.websocketClass ?? globalThis.WebSocket\n  if (!WebsocketClass) throw new Error(\"Missing WebSocket class\")\n\n  let idx = 0\n  let status: StatusChange\n  let switchTo: [string] | [string, string | string[]] | null = null\n  let disconnect: (withHalt?: boolean) => void = noop\n\n  let outerCleanup: () => void = noop\n  const result = followEnhancer(\n    getSyncProvider(async () => {\n      const [uri, protocols] =\n        switchTo || actualEndpoints[idx++ % endpoints.length]\n      switchTo = null\n      const socket = new WebsocketClass(uri, protocols)\n      const forceSocketClose = () => {\n        try {\n          socket.addEventListener(\"error\", noop, { once: true })\n          socket.close()\n        } catch {}\n      }\n      onStatusChanged(\n        (status = {\n          type: WsEvent.CONNECTING,\n          uri,\n          protocols,\n        }),\n      )\n\n      await new Promise<void>((resolve, reject) => {\n        const onOpen = () => {\n          initialCleanup()\n          resolve()\n        }\n\n        const onError = (e: Event | null) => {\n          initialCleanup()\n          if (e == null) forceSocketClose()\n          console.error(\n            `Unable to connect to ${uri}${\n              protocols ? \", protocols: \" + protocols : \"\"\n            }`,\n          )\n          onStatusChanged(\n            (status = {\n              type: e ? WsEvent.ERROR : WsEvent.CLOSE,\n              event: e,\n            }),\n          )\n          setTimeout(reject, e ? 300 : 0, e)\n        }\n\n        const timeoutToken =\n          timeout !== Infinity\n            ? setTimeout(() => {\n                initialCleanup()\n                forceSocketClose()\n                onStatusChanged((status = timeoutError))\n                reject(timeoutError.event)\n              }, timeout)\n            : undefined\n\n        const initialCleanup = () => {\n          clearTimeout(timeoutToken)\n          socket.removeEventListener(\"error\", onError)\n          socket.removeEventListener(\"open\", onOpen)\n        }\n        socket.addEventListener(\"open\", onOpen)\n        socket.addEventListener(\"error\", onError)\n        disconnect = () => {\n          onError(null)\n        }\n      })\n\n      onStatusChanged(\n        (status = {\n          type: WsEvent.CONNECTED,\n          uri,\n          protocols,\n        }),\n      )\n\n      let _onInnerMessage: (msg: string) => void\n      const inner = innerEnhancer((onInnerMessage) => {\n        _onInnerMessage = onInnerMessage\n        return {\n          send: (m) => {\n            socket.send(m)\n          },\n          disconnect: () => {\n            disconnect()\n          },\n        }\n      })\n\n      return (onMessage, onHalt) => {\n        const connection = inner(onMessage)\n        const _onMessage = (e: MessageEvent) => {\n          if (typeof e.data === \"string\") _onInnerMessage(e.data)\n        }\n        const innerHalt =\n          (reason: WsEvent.CLOSE | WsEvent.ERROR) => (e: any) => {\n            console.warn(`WS halt (${reason})`)\n            onStatusChanged(\n              (status = {\n                type: reason,\n                event: e,\n              }),\n            )\n            onHalt()\n          }\n        const onError = innerHalt(WsEvent.ERROR)\n        const onClose = innerHalt(WsEvent.CLOSE)\n\n        socket.addEventListener(\"message\", _onMessage)\n        socket.addEventListener(\"error\", onError)\n        socket.addEventListener(\"close\", onClose)\n        disconnect = (withHalt) => {\n          outerCleanup()\n          disconnect = noop\n          socket.removeEventListener(\"message\", _onMessage)\n          socket.removeEventListener(\"error\", onError)\n          socket.removeEventListener(\"close\", onClose)\n          forceSocketClose()\n          if (withHalt) onClose({})\n        }\n\n        return connection\n      }\n    }),\n    () => {\n      switchFn()\n    },\n  )\n  outerCleanup = result.cleanup\n  delete (result as any).cleanup\n\n  const switchFn: WsJsonRpcProvider[\"switch\"] = (...args) => {\n    if (status.type === WsEvent.CLOSE) return\n    if (args.length) switchTo = args as any\n    if (status.type !== WsEvent.ERROR) disconnect(true)\n  }\n\n  return Object.assign(result, { switch: switchFn, getStatus: () => status })\n}\n","import type { StatusChange, WsJsonRpcProvider } from \"./types-common\"\nimport type { GetWsProviderInput } from \"./types-legacy\"\nimport {\n  getWsProvider,\n  mapEndpoints,\n  defaultConfig,\n  noop,\n} from \"./default-provider\"\nimport { type WebSocketClass } from \"./types-new\"\n\nexport const getLegacyWsProvider = (\n  websocketClass: WebSocketClass,\n): GetWsProviderInput => {\n  return (...args): WsJsonRpcProvider => {\n    let endpoints: Array<[string, string | string[]] | [string]> = []\n    let { timeout, innerEnhancer, onStatusChanged } = defaultConfig\n\n    const [firstArg] = args\n    if (\n      args.length === 1 &&\n      typeof firstArg === \"object\" &&\n      !Array.isArray(firstArg)\n    ) {\n      endpoints = mapEndpoints(firstArg.endpoints)\n      onStatusChanged = firstArg.onStatusChanged ?? noop\n      timeout = firstArg.timeout ?? timeout\n      innerEnhancer = firstArg.innerEnhancer ?? ((x) => x)\n    } else {\n      if (typeof args[1] === \"function\")\n        onStatusChanged = args[1] as (status: StatusChange) => void\n      if (Array.isArray(firstArg)) endpoints = mapEndpoints(firstArg)\n      else {\n        endpoints = [[firstArg as string]]\n        if (args[1] && args[1] !== onStatusChanged)\n          endpoints[0][1] = args[1] as any\n        if (args[2]) onStatusChanged = args[2] as any\n      }\n    }\n\n    return getWsProvider(\n      endpoints.map((x) =>\n        x.length === 1\n          ? x[0]\n          : {\n              uri: x[0],\n              protocol: x[1],\n            },\n      ),\n      {\n        websocketClass,\n        onStatusChanged,\n        timeout,\n        innerEnhancer,\n      },\n    )\n  }\n}\n","import { WebSocket } from \"ws\"\nimport { getLegacyWsProvider } from \"./legacy-provider\"\nexport type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\n\nexport * from \"./types-common\"\nexport * from \"./types-legacy\"\n\nclass WS extends WebSocket {\n  close() {\n    this.terminate()\n  }\n}\n\n/**\n * @deprecated This export will be removed in PAPI v2. Migrate as follows:\n *             `import { getWsProvider } from \"polkadot-api/ws-provider\"\n */\nexport const getWsProvider = getLegacyWsProvider(\n  WS as unknown as typeof globalThis.WebSocket,\n)\n"],"names":["WsEvent","result","getWsProvider","getSyncProvider","WebSocket"],"mappings":"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"}