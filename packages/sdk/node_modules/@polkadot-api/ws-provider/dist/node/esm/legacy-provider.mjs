import { mapEndpoints, noop, defaultConfig, getWsProvider } from './default-provider.mjs';

const getLegacyWsProvider = (websocketClass) => {
  return (...args) => {
    let endpoints = [];
    let { timeout, innerEnhancer, onStatusChanged } = defaultConfig;
    const [firstArg] = args;
    if (args.length === 1 && typeof firstArg === "object" && !Array.isArray(firstArg)) {
      endpoints = mapEndpoints(firstArg.endpoints);
      onStatusChanged = firstArg.onStatusChanged ?? noop;
      timeout = firstArg.timeout ?? timeout;
      innerEnhancer = firstArg.innerEnhancer ?? ((x) => x);
    } else {
      if (typeof args[1] === "function")
        onStatusChanged = args[1];
      if (Array.isArray(firstArg)) endpoints = mapEndpoints(firstArg);
      else {
        endpoints = [[firstArg]];
        if (args[1] && args[1] !== onStatusChanged)
          endpoints[0][1] = args[1];
        if (args[2]) onStatusChanged = args[2];
      }
    }
    return getWsProvider(
      endpoints.map(
        (x) => x.length === 1 ? x[0] : {
          uri: x[0],
          protocol: x[1]
        }
      ),
      {
        websocketClass,
        onStatusChanged,
        timeout,
        innerEnhancer
      }
    );
  };
};

export { getLegacyWsProvider };
//# sourceMappingURL=legacy-provider.mjs.map
