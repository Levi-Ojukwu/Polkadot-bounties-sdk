import { getSyncProvider } from '@polkadot-api/json-rpc-provider-proxy';
import { WsEvent } from './types-common.mjs';
import { followEnhancer } from './follow-enhancer.mjs';

const timeoutError = {
  type: WsEvent.ERROR,
  event: { type: "timeout" }
};
const noop = () => {
};
const defaultConfig = {
  onStatusChanged: noop,
  innerEnhancer: (x) => x,
  timeout: 5e3
};
const mapEndpoints = (endpoints) => endpoints.map((x) => typeof x === "string" ? [x] : [x.uri, x.protocol]);
const getWsProvider = (endpoints, config) => {
  const { onStatusChanged, innerEnhancer, timeout } = {
    ...defaultConfig,
    ...config
  };
  const actualEndpoints = mapEndpoints(
    Array.isArray(endpoints) ? endpoints : [endpoints]
  );
  const WebsocketClass = config?.websocketClass ?? globalThis.WebSocket;
  if (!WebsocketClass) throw new Error("Missing WebSocket class");
  let idx = 0;
  let status;
  let switchTo = null;
  let disconnect = noop;
  let outerCleanup = noop;
  const result = followEnhancer(
    getSyncProvider(async () => {
      const [uri, protocols] = switchTo || actualEndpoints[idx++ % endpoints.length];
      switchTo = null;
      const socket = new WebsocketClass(uri, protocols);
      const forceSocketClose = () => {
        try {
          socket.addEventListener("error", noop, { once: true });
          socket.close();
        } catch {
        }
      };
      onStatusChanged(
        status = {
          type: WsEvent.CONNECTING,
          uri,
          protocols
        }
      );
      await new Promise((resolve, reject) => {
        const onOpen = () => {
          initialCleanup();
          resolve();
        };
        const onError = (e) => {
          initialCleanup();
          if (e == null) forceSocketClose();
          console.error(
            `Unable to connect to ${uri}${protocols ? ", protocols: " + protocols : ""}`
          );
          onStatusChanged(
            status = {
              type: e ? WsEvent.ERROR : WsEvent.CLOSE,
              event: e
            }
          );
          setTimeout(reject, e ? 300 : 0, e);
        };
        const timeoutToken = timeout !== Infinity ? setTimeout(() => {
          initialCleanup();
          forceSocketClose();
          onStatusChanged(status = timeoutError);
          reject(timeoutError.event);
        }, timeout) : void 0;
        const initialCleanup = () => {
          clearTimeout(timeoutToken);
          socket.removeEventListener("error", onError);
          socket.removeEventListener("open", onOpen);
        };
        socket.addEventListener("open", onOpen);
        socket.addEventListener("error", onError);
        disconnect = () => {
          onError(null);
        };
      });
      onStatusChanged(
        status = {
          type: WsEvent.CONNECTED,
          uri,
          protocols
        }
      );
      let _onInnerMessage;
      const inner = innerEnhancer((onInnerMessage) => {
        _onInnerMessage = onInnerMessage;
        return {
          send: (m) => {
            socket.send(m);
          },
          disconnect: () => {
            disconnect();
          }
        };
      });
      return (onMessage, onHalt) => {
        const connection = inner(onMessage);
        const _onMessage = (e) => {
          if (typeof e.data === "string") _onInnerMessage(e.data);
        };
        const innerHalt = (reason) => (e) => {
          console.warn(`WS halt (${reason})`);
          onStatusChanged(
            status = {
              type: reason,
              event: e
            }
          );
          onHalt();
        };
        const onError = innerHalt(WsEvent.ERROR);
        const onClose = innerHalt(WsEvent.CLOSE);
        socket.addEventListener("message", _onMessage);
        socket.addEventListener("error", onError);
        socket.addEventListener("close", onClose);
        disconnect = (withHalt) => {
          outerCleanup();
          disconnect = noop;
          socket.removeEventListener("message", _onMessage);
          socket.removeEventListener("error", onError);
          socket.removeEventListener("close", onClose);
          forceSocketClose();
          if (withHalt) onClose({});
        };
        return connection;
      };
    }),
    () => {
      switchFn();
    }
  );
  outerCleanup = result.cleanup;
  delete result.cleanup;
  const switchFn = (...args) => {
    if (status.type === WsEvent.CLOSE) return;
    if (args.length) switchTo = args;
    if (status.type !== WsEvent.ERROR) disconnect(true);
  };
  return Object.assign(result, { switch: switchFn, getStatus: () => status });
};

export { defaultConfig, getWsProvider, mapEndpoints, noop };
//# sourceMappingURL=default-provider.mjs.map
