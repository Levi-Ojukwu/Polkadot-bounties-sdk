import { JsonRpcProvider } from '@polkadot-api/json-rpc-provider';
export { JsonRpcProvider } from '@polkadot-api/json-rpc-provider';

declare enum WsEvent {
    CONNECTING = 0,
    CONNECTED = 1,
    ERROR = 2,
    CLOSE = 3
}
type WsConnecting = {
    type: WsEvent.CONNECTING;
    uri: string;
    protocols?: string | string[];
};
type WsConnected = {
    type: WsEvent.CONNECTED;
    uri: string;
    protocols?: string | string[];
};
type WsError = {
    type: WsEvent.ERROR;
    event: any;
};
type WsClose = {
    type: WsEvent.CLOSE;
    event: any;
};
type StatusChange = WsConnecting | WsConnected | WsError | WsClose;
type WsJsonRpcProvider = JsonRpcProvider & {
    switch: (uri?: string, protocol?: string[]) => void;
    getStatus: () => StatusChange;
};

interface WsProviderConfig {
    endpoints: Array<string | {
        uri: string;
        protocol: string[];
    }>;
    onStatusChanged?: (status: StatusChange) => void;
    timeout?: number;
    innerEnhancer?: (input: JsonRpcProvider) => JsonRpcProvider;
}
interface GetWsProviderInput {
    (uri: string, protocols?: string | string[], onStatusChanged?: (status: StatusChange) => void): WsJsonRpcProvider;
    (uri: string, onStatusChanged?: (status: StatusChange) => void): WsJsonRpcProvider;
    (endpoints: Array<string | {
        uri: string;
        protocol: string[];
    }>, onStatusChanged?: (status: StatusChange) => void): WsJsonRpcProvider;
    (wsProviderConfig: WsProviderConfig): WsJsonRpcProvider;
}

/**
 * @deprecated This export will be removed in PAPI v2. Migrate as follows:
 *             `import { getWsProvider } from "polkadot-api/ws-provider"
 */
declare const getWsProvider: GetWsProviderInput;

export { WsEvent, getWsProvider };
export type { GetWsProviderInput, StatusChange, WsClose, WsConnected, WsConnecting, WsError, WsJsonRpcProvider, WsProviderConfig };
