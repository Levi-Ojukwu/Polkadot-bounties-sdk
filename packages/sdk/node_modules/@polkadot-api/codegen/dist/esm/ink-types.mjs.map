{"version":3,"file":"ink-types.mjs","sources":["../../src/ink-types.ts"],"sourcesContent":["import {\n  InkMetadataLookup,\n  MessageParamSpec,\n  TypeSpec,\n} from \"@polkadot-api/ink-contracts\"\nimport { anonymizeImports, anonymizeType } from \"./anonymize\"\nimport {\n  EnumVariant,\n  getInternalTypesBuilder,\n  isPrimitive,\n  LookupTypeNode,\n  StructField,\n  TypeNode,\n} from \"./internal-types\"\nimport {\n  CodegenOutput,\n  generateTypescript,\n  mergeImports,\n  nativeNodeCodegen,\n  processPapiPrimitives,\n} from \"./internal-types/generate-typescript\"\nimport { getReusedNodes } from \"./internal-types/reused-nodes\"\n\nexport function generateInkTypes(lookup: InkMetadataLookup) {\n  const internalBuilder = getInternalTypesBuilder(lookup)\n\n  const buildCallable = (callable: {\n    args: Array<MessageParamSpec>\n    returnType: TypeSpec\n  }) => {\n    const call: TypeNode = {\n      type: \"struct\",\n      value: callable.args.map((param) => ({\n        label: param.label,\n        value: internalBuilder(param.type.type),\n        docs: [],\n      })),\n    }\n\n    return {\n      call,\n      value: internalBuilder(callable.returnType.type),\n    }\n  }\n  const constructors = lookup.metadata.spec.constructors.map((ct) => ({\n    ...ct,\n    types: buildCallable(ct),\n  }))\n  const messages = lookup.metadata.spec.messages.map((ct) => ({\n    ...ct,\n    types: buildCallable(ct),\n  }))\n\n  const event: TypeNode = {\n    type: \"enum\",\n    value: lookup.metadata.spec.events.map(\n      (evt): EnumVariant => ({\n        label: evt.label,\n        value: {\n          type: \"struct\",\n          value: evt.args.map(\n            (arg): StructField => ({\n              label: arg.label,\n              value: internalBuilder(arg.type.type),\n              docs: arg.docs,\n            }),\n          ),\n        },\n        docs: evt.docs,\n      }),\n    ),\n  }\n\n  const storageRoots = Object.entries(lookup.storage).map(([name, value]) => ({\n    name,\n    key: value.key !== null ? internalBuilder(value.key) : null,\n    value: internalBuilder(value.typeId),\n  }))\n  const storageRoot: TypeNode = {\n    type: \"struct\",\n    value: storageRoots.map(({ name, key, value }) => ({\n      docs: [],\n      label: name,\n      value: {\n        type: \"struct\",\n        value: [\n          {\n            docs: [],\n            label: \"key\",\n            value: key ?? { type: \"primitive\", value: \"undefined\" },\n          },\n          {\n            docs: [],\n            label: \"value\",\n            value,\n          },\n        ],\n      },\n    })),\n  }\n\n  const entryPoints: TypeNode[] = [\n    storageRoot,\n    ...constructors.flatMap((v) => [v.types.call, v.types.value]),\n    ...messages.flatMap((v) => [v.types.call, v.types.value]),\n  ]\n  const rootNodes = getReusedNodes(entryPoints, new Set())\n\n  const assignedNames: Record<number, string> = {}\n  let nextAnonymousId = 0\n  const getName = (id: number) => {\n    if (!assignedNames[id]) {\n      assignedNames[id] = `T${nextAnonymousId++}`\n    }\n    return assignedNames[id]\n  }\n\n  // Exclude primitive types from rootNodes\n  const filteredRootNodes = Array.from(rootNodes).filter(\n    (id) => !isPrimitive(internalBuilder(id)),\n  )\n\n  const types: Record<number, CodegenOutput & { name?: string }> = {}\n  const generateNodeType = (node: TypeNode | LookupTypeNode): CodegenOutput => {\n    const anonymize = (name: string) => `Anonymize<${name}>`\n\n    const result = generateTypescript(node, (node, next): CodegenOutput => {\n      if (!(\"id\" in node) || isPrimitive(node)) {\n        return (\n          processPapiPrimitives(node, next, true) ??\n          nativeNodeCodegen(node, next)\n        )\n      }\n      if (types[node.id]) {\n        const cached = types[node.id]\n        return cached.name\n          ? {\n              code: anonymize(cached.name),\n              imports: {\n                types: new Set([cached.name]),\n              },\n            }\n          : cached\n      }\n\n      const assignedName =\n        (assignedNames[node.id] as any as null) ??\n        (filteredRootNodes.includes(node.id) ? getName(node.id) : null)\n      if (assignedName) {\n        // Preassign the type to allow recursion\n        types[node.id] = {\n          code: \"\",\n          imports: {},\n          name: assignedName,\n        }\n      }\n\n      const result =\n        processPapiPrimitives(node, next, true) ?? nativeNodeCodegen(node, next)\n      if (assignedName) {\n        types[node.id].code = result.code\n        types[node.id].imports = result.imports\n        return {\n          code: anonymize(assignedName),\n          imports: {\n            types: new Set([assignedName]),\n          },\n        }\n      }\n      types[node.id] = result\n      return types[node.id]\n    })\n\n    if (\"id\" in node && types[node.id]?.name) {\n      const name = types[node.id].name!\n      return {\n        code: anonymize(name),\n        imports: {\n          types: new Set([name]),\n        },\n      }\n    }\n    return result\n  }\n\n  const inlineField = (label: string, type: string): StructField => ({\n    label,\n    value: {\n      type: \"inline\",\n      value: type,\n    },\n    docs: [],\n  })\n  const createCallableDescriptor = (\n    callables: Array<{\n      label: string\n      docs: string[]\n      types: ReturnType<typeof buildCallable>\n      mutates?: boolean\n      payable: boolean\n      default?: boolean\n    }>,\n  ) =>\n    generateNodeType({\n      type: \"struct\",\n      value: callables.map(\n        (callable): StructField => ({\n          label: callable.label,\n          value: {\n            type: \"struct\",\n            value: [\n              {\n                label: \"message\",\n                value: callable.types.call,\n                docs: [],\n              },\n              {\n                label: \"response\",\n                value: callable.types.value,\n                docs: [],\n              },\n              ...(callable.default ? [inlineField(\"default\", \"true\")] : []),\n              ...(callable.payable ? [inlineField(\"payable\", \"true\")] : []),\n              ...(callable.mutates ? [inlineField(\"mutates\", \"true\")] : []),\n            ],\n          },\n          docs: callable.docs,\n        }),\n      ),\n    })\n  const constructorsDescriptor = createCallableDescriptor(constructors)\n  const messagesDescriptor = createCallableDescriptor(messages)\n  const eventDescriptor = generateNodeType(event)\n  const storageTypes = generateNodeType(storageRoot)\n\n  const namedTypes = Object.entries(assignedNames)\n    .filter(([id]) => types[Number(id)])\n    .map(([id, value]) => `type ${value} = ${types[Number(id)].code};`)\n    .join(\"\\n\")\n\n  const clientImports = Array.from(\n    mergeImports([\n      storageTypes.imports,\n      messagesDescriptor.imports,\n      constructorsDescriptor.imports,\n      eventDescriptor.imports,\n      ...Object.values(types).map((v) => v.imports),\n      {\n        client: new Set(anonymizeImports),\n      },\n    ]).client,\n  )\n\n  const result = `\n    import type { ${clientImports.join(\", \")} } from 'polkadot-api';\n    import type { InkDescriptors } from 'polkadot-api/ink';\n\n    ${anonymizeType}\n\n    ${namedTypes}\n\n    type StorageDescriptor = ${storageTypes.code};\n    type MessagesDescriptor = ${messagesDescriptor.code};\n    type ConstructorsDescriptor = ${constructorsDescriptor.code};\n    type EventDescriptor = ${eventDescriptor.code};\n\n    export const descriptor: InkDescriptors<StorageDescriptor, MessagesDescriptor, ConstructorsDescriptor, EventDescriptor> = { metadata: ${JSON.stringify(lookup.metadata)} } as any;\n  `\n\n  return result\n}\n"],"names":["result","node"],"mappings":"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"}