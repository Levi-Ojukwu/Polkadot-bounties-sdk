{"version":3,"file":"get-used-types.mjs","sources":["../../src/get-used-types.ts"],"sourcesContent":["import {\n  getChecksumBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  EntryPoint,\n  TypedefNode,\n  mapLookupToTypedef,\n  runtimeCallEntryPoint,\n  storageEntryPoint,\n  enumValueEntryPointNode,\n  singleValueEntryPoint,\n  voidEntryPointNode,\n  mapEntryPointReferences,\n} from \"@polkadot-api/metadata-compatibility\"\n\n/**\n * This function extracts from `metadata` all the types used from any entry\n * point (pallets and runtime APIs)\n * pruning and de-duplicating repeated types.\n *\n * It returns a map of `checksum => TypedefNode` for compatibility checking and\n * an array of checksums to map the dependencies of those `TypdefNode` (which\n * are expressed as indices) to the next checksum.\n * (Which will be needed when merging types from multiple chains)\n */\nexport const getUsedTypes = (\n  lookup: MetadataLookup,\n  builder: ReturnType<typeof getChecksumBuilder>,\n) => {\n  const checksums: string[] = new Array(lookup.metadata.lookup.length)\n  const visited = new Set<string>()\n  const types = new Map<string, TypedefNode>()\n  const entryPoints = new Map<string, EntryPoint>()\n\n  const addTypeFromLookup = (id: number | undefined) => {\n    if (id == null) return\n    const checksum = builder.buildDefinition(id)\n    if (!checksum) {\n      throw new Error(\"Unreachable: checksum not available for lookup type\")\n    }\n    checksums[id] = checksum\n    // We can't use `types` directly, because mapLookupToTypedef can recursively call this function.\n    if (visited.has(checksum)) return\n    visited.add(checksum)\n    types.set(checksum, mapLookupToTypedef(lookup(id), addTypeFromLookup))\n  }\n  const addTypeFromEntryPoint = (checksum: string, entry: EntryPoint) => {\n    entryPoints.set(checksum, entry)\n    mapEntryPointReferences(entry, (id) => {\n      addTypeFromLookup(id)\n      return id\n    })\n  }\n\n  const buildEnum = (\n    side: \"args\" | \"values\",\n    val: number | undefined,\n    cb: (name: string) => string,\n  ) => {\n    if (val === undefined) return\n    const entry = lookup(val)\n\n    if (entry.type === \"void\") return\n    if (entry.type !== \"enum\") throw new Error(\"Expected enum\")\n\n    Object.entries(entry.value).forEach(([name, value]) => {\n      const checksum = cb(name)\n      const node = enumValueEntryPointNode(value)\n      addTypeFromEntryPoint(checksum, {\n        args: side === \"args\" ? node : voidEntryPointNode,\n        values: side === \"args\" ? voidEntryPointNode : node,\n      })\n    })\n  }\n\n  lookup.metadata.pallets.forEach((pallet) => {\n    pallet.storage?.items.forEach((entry) => {\n      const checksum = builder.buildStorage(pallet.name, entry.name)!\n      addTypeFromEntryPoint(checksum, storageEntryPoint(entry))\n    })\n    pallet.constants.forEach(({ name, type }) => {\n      const checksum = builder.buildConstant(pallet.name, name)!\n      addTypeFromEntryPoint(checksum, singleValueEntryPoint(type))\n    })\n    pallet.viewFns.forEach((entry) => {\n      const checksum = builder.buildViewFns(pallet.name, entry.name)!\n      addTypeFromEntryPoint(checksum, runtimeCallEntryPoint(entry))\n    })\n    buildEnum(\n      \"args\",\n      pallet.calls?.type,\n      (name) => builder.buildCall(pallet.name, name)!,\n    )\n    buildEnum(\n      \"values\",\n      pallet.events?.type,\n      (name) => builder.buildEvent(pallet.name, name)!,\n    )\n    buildEnum(\n      \"values\",\n      pallet.errors?.type,\n      (name) => builder.buildError(pallet.name, name)!,\n    )\n  })\n\n  lookup.metadata.apis.forEach((api) =>\n    api.methods.forEach((method) => {\n      const checksum = builder.buildRuntimeCall(api.name, method.name)!\n      addTypeFromEntryPoint(checksum, runtimeCallEntryPoint(method))\n    }),\n  )\n\n  return { types, entryPoints, checksums }\n}\n"],"names":[],"mappings":";;AA0BO,MAAM,YAAA,GAAe,CAC1B,MAAA,EACA,OAAA,KACG;AACH,EAAA,MAAM,YAAsB,IAAI,KAAA,CAAM,MAAA,CAAO,QAAA,CAAS,OAAO,MAAM,CAAA;AACnE,EAAA,MAAM,OAAA,uBAAc,GAAA,EAAY;AAChC,EAAA,MAAM,KAAA,uBAAY,GAAA,EAAyB;AAC3C,EAAA,MAAM,WAAA,uBAAkB,GAAA,EAAwB;AAEhD,EAAA,MAAM,iBAAA,GAAoB,CAAC,EAAA,KAA2B;AACpD,IAAA,IAAI,MAAM,IAAA,EAAM;AAChB,IAAA,MAAM,QAAA,GAAW,OAAA,CAAQ,eAAA,CAAgB,EAAE,CAAA;AAC3C,IAAA,IAAI,CAAC,QAAA,EAAU;AACb,MAAA,MAAM,IAAI,MAAM,qDAAqD,CAAA;AAAA,IACvE;AACA,IAAA,SAAA,CAAU,EAAE,CAAA,GAAI,QAAA;AAEhB,IAAA,IAAI,OAAA,CAAQ,GAAA,CAAI,QAAQ,CAAA,EAAG;AAC3B,IAAA,OAAA,CAAQ,IAAI,QAAQ,CAAA;AACpB,IAAA,KAAA,CAAM,IAAI,QAAA,EAAU,kBAAA,CAAmB,OAAO,EAAE,CAAA,EAAG,iBAAiB,CAAC,CAAA;AAAA,EACvE,CAAA;AACA,EAAA,MAAM,qBAAA,GAAwB,CAAC,QAAA,EAAkB,KAAA,KAAsB;AACrE,IAAA,WAAA,CAAY,GAAA,CAAI,UAAU,KAAK,CAAA;AAC/B,IAAA,uBAAA,CAAwB,KAAA,EAAO,CAAC,EAAA,KAAO;AACrC,MAAA,iBAAA,CAAkB,EAAE,CAAA;AACpB,MAAA,OAAO,EAAA;AAAA,IACT,CAAC,CAAA;AAAA,EACH,CAAA;AAEA,EAAA,MAAM,SAAA,GAAY,CAChB,IAAA,EACA,GAAA,EACA,EAAA,KACG;AACH,IAAA,IAAI,QAAQ,MAAA,EAAW;AACvB,IAAA,MAAM,KAAA,GAAQ,OAAO,GAAG,CAAA;AAExB,IAAA,IAAI,KAAA,CAAM,SAAS,MAAA,EAAQ;AAC3B,IAAA,IAAI,MAAM,IAAA,KAAS,MAAA,EAAQ,MAAM,IAAI,MAAM,eAAe,CAAA;AAE1D,IAAA,MAAA,CAAO,OAAA,CAAQ,MAAM,KAAK,CAAA,CAAE,QAAQ,CAAC,CAAC,IAAA,EAAM,KAAK,CAAA,KAAM;AACrD,MAAA,MAAM,QAAA,GAAW,GAAG,IAAI,CAAA;AACxB,MAAA,MAAM,IAAA,GAAO,wBAAwB,KAAK,CAAA;AAC1C,MAAA,qBAAA,CAAsB,QAAA,EAAU;AAAA,QAC9B,IAAA,EAAM,IAAA,KAAS,MAAA,GAAS,IAAA,GAAO,kBAAA;AAAA,QAC/B,MAAA,EAAQ,IAAA,KAAS,MAAA,GAAS,kBAAA,GAAqB;AAAA,OAChD,CAAA;AAAA,IACH,CAAC,CAAA;AAAA,EACH,CAAA;AAEA,EAAA,MAAA,CAAO,QAAA,CAAS,OAAA,CAAQ,OAAA,CAAQ,CAAC,MAAA,KAAW;AAC1C,IAAA,MAAA,CAAO,OAAA,EAAS,KAAA,CAAM,OAAA,CAAQ,CAAC,KAAA,KAAU;AACvC,MAAA,MAAM,WAAW,OAAA,CAAQ,YAAA,CAAa,MAAA,CAAO,IAAA,EAAM,MAAM,IAAI,CAAA;AAC7D,MAAA,qBAAA,CAAsB,QAAA,EAAU,iBAAA,CAAkB,KAAK,CAAC,CAAA;AAAA,IAC1D,CAAC,CAAA;AACD,IAAA,MAAA,CAAO,UAAU,OAAA,CAAQ,CAAC,EAAE,IAAA,EAAM,MAAK,KAAM;AAC3C,MAAA,MAAM,QAAA,GAAW,OAAA,CAAQ,aAAA,CAAc,MAAA,CAAO,MAAM,IAAI,CAAA;AACxD,MAAA,qBAAA,CAAsB,QAAA,EAAU,qBAAA,CAAsB,IAAI,CAAC,CAAA;AAAA,IAC7D,CAAC,CAAA;AACD,IAAA,MAAA,CAAO,OAAA,CAAQ,OAAA,CAAQ,CAAC,KAAA,KAAU;AAChC,MAAA,MAAM,WAAW,OAAA,CAAQ,YAAA,CAAa,MAAA,CAAO,IAAA,EAAM,MAAM,IAAI,CAAA;AAC7D,MAAA,qBAAA,CAAsB,QAAA,EAAU,qBAAA,CAAsB,KAAK,CAAC,CAAA;AAAA,IAC9D,CAAC,CAAA;AACD,IAAA,SAAA;AAAA,MACE,MAAA;AAAA,MACA,OAAO,KAAA,EAAO,IAAA;AAAA,MACd,CAAC,IAAA,KAAS,OAAA,CAAQ,SAAA,CAAU,MAAA,CAAO,MAAM,IAAI;AAAA,KAC/C;AACA,IAAA,SAAA;AAAA,MACE,QAAA;AAAA,MACA,OAAO,MAAA,EAAQ,IAAA;AAAA,MACf,CAAC,IAAA,KAAS,OAAA,CAAQ,UAAA,CAAW,MAAA,CAAO,MAAM,IAAI;AAAA,KAChD;AACA,IAAA,SAAA;AAAA,MACE,QAAA;AAAA,MACA,OAAO,MAAA,EAAQ,IAAA;AAAA,MACf,CAAC,IAAA,KAAS,OAAA,CAAQ,UAAA,CAAW,MAAA,CAAO,MAAM,IAAI;AAAA,KAChD;AAAA,EACF,CAAC,CAAA;AAED,EAAA,MAAA,CAAO,SAAS,IAAA,CAAK,OAAA;AAAA,IAAQ,CAAC,GAAA,KAC5B,GAAA,CAAI,OAAA,CAAQ,OAAA,CAAQ,CAAC,MAAA,KAAW;AAC9B,MAAA,MAAM,WAAW,OAAA,CAAQ,gBAAA,CAAiB,GAAA,CAAI,IAAA,EAAM,OAAO,IAAI,CAAA;AAC/D,MAAA,qBAAA,CAAsB,QAAA,EAAU,qBAAA,CAAsB,MAAM,CAAC,CAAA;AAAA,IAC/D,CAAC;AAAA,GACH;AAEA,EAAA,OAAO,EAAE,KAAA,EAAO,WAAA,EAAa,SAAA,EAAU;AACzC;;;;"}