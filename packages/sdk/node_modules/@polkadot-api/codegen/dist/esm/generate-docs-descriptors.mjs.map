{"version":3,"file":"generate-docs-descriptors.mjs","sources":["../../src/generate-docs-descriptors.ts"],"sourcesContent":["import {\n  getChecksumBuilder,\n  getLookupFn,\n} from \"@polkadot-api/metadata-builders\"\nimport { getDocsTypesBuilder } from \"@/types-builder\"\nimport { knownTypes } from \"./known-types\"\nimport { UnifiedMetadata } from \"@polkadot-api/substrate-bindings\"\n\nexport type FileTree = {\n  [key: string]: string | FileTree\n}\n\nconst paths = {\n  client: \"polkadot-api\",\n  types: \"types\",\n}\n\nexport async function generateDocsDescriptors(\n  key: string,\n  metadata: UnifiedMetadata,\n): Promise<FileTree> {\n  const lookup = getLookupFn(metadata)\n  const checksumBuilder = getChecksumBuilder(lookup)\n  const docsTypesBuilder = getDocsTypesBuilder(\n    lookup,\n    knownTypes,\n    checksumBuilder,\n  )\n\n  const getClientImports = () => [\n    \"StorageDescriptor\",\n    \"PlainDescriptor\",\n    \"TxDescriptor\",\n    \"RuntimeDescriptor\",\n    \"Enum\",\n    \"_Enum\",\n    \"Binary\",\n    \"FixedSizeBinary\",\n    \"FixedSizeArray\",\n    \"QueryFromPalletsDef\",\n    \"TxFromPalletsDef\",\n    \"EventsFromPalletsDef\",\n    \"ErrorsFromPalletsDef\",\n    \"ConstFromPalletsDef\",\n    \"ViewFnsFromPalletsDef\",\n    \"SS58String\",\n    \"ResultPayload\",\n    \"TxCallData\",\n    ...docsTypesBuilder.getClientFileImports(),\n  ]\n\n  const storageOutput = await buildStorage(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n\n  const runtimeCallsOutput = await buildRuntimeCalls(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n  const errorsOutput = await buildErrors(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n  const constantsOutput = await buildConstants(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n  const eventsOutput = await buildEvents(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n  const callsOutput = await buildCalls(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n  const viewFnsOutput = await buildViewFns(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n\n  const descriptorsTypesFileContent =\n    `import {\\n  ${getClientImports().join(\",\\n  \")}\\n} from \"${paths.client}\";\\n` +\n    docsTypesBuilder\n      .getDescriptorsTypes()\n      .map((variable) => {\n        return `export type ${variable.name} = ${variable.type};`\n      })\n      .join(\"\\n\") +\n    `\n/**\n * This is a special type that we're using only in this docs.\n * It's not present in descriptors generated by polkadot-api, and only used for \n * marking circular types, if they aren't a known type.  \n */\nexport type __Circular = any;\n`\n\n  const hasSection = {\n    storage: storageOutput.index !== \"\",\n    runtimeCalls: runtimeCallsOutput.index !== \"\",\n    errors: errorsOutput.index !== \"\",\n    constants: constantsOutput.index !== \"\",\n    events: eventsOutput.index !== \"\",\n    calls: callsOutput.index !== \"\",\n    viewFns: viewFnsOutput.index !== \"\",\n  }\n  const index = getIndexFileDocs({ chainName: key, hasSection })\n\n  return {\n    index,\n    types: descriptorsTypesFileContent,\n    Storage: storageOutput,\n    RuntimeCalls: runtimeCallsOutput,\n    Errors: errorsOutput,\n    Constants: constantsOutput,\n    Events: eventsOutput,\n    Transactions: callsOutput,\n    ViewFunctions: viewFnsOutput,\n  }\n}\n\nconst buildEnumObj = <T>(\n  metadata: UnifiedMetadata,\n  val: number | undefined,\n  cb: (name: string, docs: string[]) => T,\n): Record<string, T> => {\n  if (val === undefined) return {}\n\n  const lookup = metadata.lookup[val]\n  if (lookup.def.tag !== \"variant\") throw null\n  return Object.fromEntries(\n    lookup.def.value.map((x) => {\n      return [x.name!, cb(x.name, x.docs)]\n    }),\n  )\n}\n\nasync function buildErrors(\n  metadata: UnifiedMetadata,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const errors = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: buildEnumObj(metadata, pallet.errors?.type, (name, docs) => {\n            return {\n              type: `PlainDescriptor<${docsTypesBuilder.buildError(\n                pallet.name,\n                name,\n              )}>`,\n              docs,\n            }\n          }),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(errors, getClientImports)\n}\n\nasync function buildConstants(\n  metadata: UnifiedMetadata,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const constants: FolderFileInput = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: Object.fromEntries(\n            pallet.constants?.map(({ name, docs }) => {\n              const type = `PlainDescriptor<${docsTypesBuilder.buildConstant(\n                pallet.name,\n                name,\n              )}>`\n              return [\n                name,\n                {\n                  type,\n                  docs,\n                },\n              ]\n            }) ?? [],\n          ),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(constants, getClientImports)\n}\n\nasync function buildEvents(\n  metadata: UnifiedMetadata,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const events: FolderFileInput = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: buildEnumObj(metadata, pallet.events?.type, (name, docs) => {\n            return {\n              type: `PlainDescriptor<${docsTypesBuilder.buildEvent(\n                pallet.name,\n                name,\n              )}>`,\n              docs,\n            }\n          }),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(events, getClientImports)\n}\n\nasync function buildCalls(\n  metadata: UnifiedMetadata,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const calls: FolderFileInput = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: buildEnumObj(metadata, pallet.calls?.type, (name, docs) => {\n            return {\n              type: `TxDescriptor<${docsTypesBuilder.buildCall(\n                pallet.name,\n                name,\n              )}>`,\n              docs,\n            }\n          }),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(calls, getClientImports)\n}\n\nasync function buildRuntimeCalls(\n  metadata: UnifiedMetadata,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const runtimeCalls = Object.fromEntries(\n    metadata.apis.map((api) => [\n      api.name,\n      {\n        docs: api.docs,\n        values: Object.fromEntries(\n          api.methods.map((method) => {\n            const { args, value } = docsTypesBuilder.buildRuntimeCall(\n              api.name,\n              method.name,\n            )\n            return [\n              method.name,\n              {\n                type: `RuntimeDescriptor<${args}, ${value}>`,\n                docs: method.docs,\n              },\n            ]\n          }),\n        ),\n        descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n      },\n    ]),\n  )\n  return buildTypeFolder(runtimeCalls, getClientImports)\n}\n\nasync function buildViewFns(\n  metadata: UnifiedMetadata,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const viewFns = Object.fromEntries(\n    metadata.pallets.map((pallet) => [\n      pallet.name,\n      {\n        docs: pallet.docs,\n        values: Object.fromEntries(\n          pallet.viewFns.map((fn) => {\n            const { args, value } = docsTypesBuilder.buildViewFn(\n              pallet.name,\n              fn.name,\n            )\n            return [\n              fn.name,\n              {\n                type: `RuntimeDescriptor<${args}, ${value}>`,\n                docs: fn.docs,\n              },\n            ]\n          }),\n        ),\n        descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n      },\n    ]),\n  )\n  return buildTypeFolder(viewFns, getClientImports)\n}\n\nasync function buildStorage(\n  metadata: UnifiedMetadata,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const storage: FolderFileInput = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: Object.fromEntries(\n            pallet.storage?.items.map((item) => {\n              const { name, docs, modifier } = item\n\n              if (pallet.name === \"System\" && name === \"Events\") {\n                return [\n                  \"Events\",\n                  {\n                    type: `StorageDescriptor<[], any, ${!modifier}, \"never\">`,\n                    docs: [\n                      ...docs,\n                      \"\",\n                      \" Due to readability reasons, return type of Events item is omitted in this documentation\",\n                    ],\n                  },\n                ]\n              }\n\n              const { args, payload, opaque } = docsTypesBuilder.buildStorage(\n                pallet.name,\n                name,\n              )\n              // if val is `void` it decodes to `undefined`, making it impossible\n              // to differentiate from a non-existant key\n              // therefore, if the key exists => null, if it doesn't => undefined\n              return [\n                name,\n                {\n                  type: `StorageDescriptor<${args}, ${payload === \"undefined\" ? \"null\" : payload}, ${!modifier}, ${opaque}>`,\n                  docs,\n                },\n              ]\n            }) ?? [],\n          ),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(storage, getClientImports)\n}\n\ntype FolderFileInput = {\n  [p: string]: {\n    docs: string[]\n    descriptorsTypesImports: string[]\n    values: { [p: string]: { type: string; docs: string[] } }\n  }\n}\n\nfunction buildTypeFolder(\n  input: FolderFileInput,\n  getClientImports: () => string[],\n): { [p: string]: string } {\n  const output: { [p: string]: string } = {}\n\n  output[\"index\"] = \"\"\n\n  for (const [\n    section,\n    { docs, values, descriptorsTypesImports },\n  ] of Object.entries(input)) {\n    if (Object.keys(values).length === 0) continue\n\n    const sectionDocs =\n      docs.length > 0\n        ? `\n/**\n${docs.map((doc: string) => ` * ${doc.trim()}`).join(\"\\n\")}\n * @packageDocumentation\n */\\n\\n\n`\n        : \"\"\n\n    const imports = `\nimport {\\n  ${getClientImports().join(\",\\n  \")}\\n} from \"${paths.client}\";\\n\nimport {\\n  ${descriptorsTypesImports.join(\",\\n  \")}\\n} from \"../${paths.types}\";\n  `\n\n    output[section] =\n      sectionDocs +\n      imports +\n      Object.entries(values)\n        .map(\n          ([typeName, typeDef]) =>\n            formatDocs(typeDef.docs) +\n            // splitting type declaration and export allows us to curcumvent potential\n            // collisions between imports and type names\n            `\ntype ${section}_${typeName} = ${typeDef.type};\nexport {${section}_${typeName} as ${typeName}};`,\n        )\n        .join(\"\\n\")\n\n    output[\"index\"] += `export * as ${section} from \"./${section}\";\\n`\n  }\n\n  return output\n}\n\nfunction formatDocs(docs: string[]): string {\n  return `/**\n${docs.map((doc: string) => ` * ${doc.trim()}`).join(\"\\n\")}\n*/\n`\n}\n\nfunction getIndexFileDocs({\n  chainName,\n  hasSection,\n}: {\n  chainName: string\n  hasSection: {\n    storage: boolean\n    runtimeCalls: boolean\n    errors: boolean\n    constants: boolean\n    events: boolean\n    calls: boolean\n    viewFns: boolean\n  }\n}): string {\n  return `\n/**\n * This is generated documentation for TypedAPI decriptors for **${chainName}** chain  \n * \n * **TypedApi calls** section describes apis that are available via calls like  \n * \\`\\`\\`ts\n * api.tx.XcmPallet.limited_teleport_assets({...})\n * \\`\\`\\`\n * Where \\`api\\` is returned by \\`client.getTypedApi(${chainName})\\` call  \n *\n * Each section has APIs grouped by pallet name  \n * \n * **Types** represent TypeScript types that are to be imported\n * from \\`@polkadot-api/descriptors\\`:  \n * \\`\\`\\`ts\n * import { XcmVersionedLocation, XcmV3Junctions } from \"@polkadot-api/descriptors\"\n * \\`\\`\\`\n * \n * @see [papi.how](https://papi.how/) for generic documentation on \\`polkadot-api\\`\n * \n * @packageDocumentation\n */\n\n${\n  hasSection.storage\n    ? `/**\n * Storage queries reference\n * \n * Each item described here is a\n *\\`StorageDescriptor<Args, ReturnType, Optional, Opaque>\\`  \n * For example, \\`System.Account\\` is of type\n * \\`\\`\\`ts\n * Account: StorageDescriptor<[Key: SS58String], {\n *     consumers: number;\n *     data: {\n *         flags: bigint;\n *         free: bigint;\n *         frozen: bigint;\n *         reserved: bigint;\n *     };\n *     nonce: number;\n *     providers: number;\n *     sufficients: number;\n * }, false, \"never\">\n * \\`\\`\\`\n * and can be queried via\n * \\`\\`\\`ts\n * const account = await api.query.System.Account.getValue(\"<AccountId>\")\n * console.log(account.data.free)\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/queries) on storage queries for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as Storage from \"./Storage\";\n\n`\n    : \"\"\n}\n${\n  hasSection.constants\n    ? `/**\n * Constants reference\n * \n * Each item described here is a \\`PlainDescriptor<T>\\`  \n * \n * For example, \\`System.Version\\` is of type\n * \\`\\`\\`ts\n * Version: PlainDescriptor<{\n *     apis: [FixedSizeBinary<8>, number][];\n *     authoring_version: number;\n *     impl_name: string;\n *     impl_version: number;\n *     spec_name: string;\n *     spec_version: number;\n *     state_version: number;\n *     transaction_version: number;\n * }>\n * \\`\\`\\`\n * and can be queried via\n * \\`\\`\\`ts\n * const version = await typedApi.constants.System.Version()\n * console.log(version.spec_version)\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/constants) on constants for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as Constants from \"./Constants\";\n\n`\n    : \"\"\n}\n${\n  hasSection.errors\n    ? `/**\n * Errors\n * \n * This section is temporarily commented out, \n * as errors aren't documented in papi yet\n * https://github.com/polkadot-api/polkadot-api-docs/issues/25 \n * \n * @namespace\n * @category Types\n */\n// export * as Errors from \"./Errors\";\n\n`\n    : \"\"\n}\n${\n  hasSection.calls\n    ? `/**\n * Transactions reference\n * \n * Each item described here is a \\`TxDescriptor<T>\\`, where \\`T\\` describes\n * all the arguments required by the extrinsic\n * \n * For example, \\`Balances.transfer_keep_alive\\` is of type\n * \\`\\`\\`ts\n * transfer_keep_alive: TxDescriptor<{\n *     dest: MultiAddress;\n *     value: bigint;\n * }>\n * \\`\\`\\`\n * and can be used like this\n * \\`\\`\\`ts\n * const tx = api.tx.Balances.transfer_keep_alive({\n *   dest: MultiAddress.Id(userAddress),\n *   value: 10n ** 10n, // 1 DOT\n * })\n * await tx.signAndSubmit(signer)\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/tx) on transactions for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as Transactions from \"./Transactions\";\n\n`\n    : \"\"\n}\n${\n  hasSection.events\n    ? `/**\n * Events\n * \n * Each item described here is a \\`PlainDescriptor<T>\\`  \n * \n * For example, \\`System.NewAccount\\` is of type\n * \\`\\`\\`ts\n * NewAccount: PlainDescriptor<{ \"account\": SS58String }>;\n * \\`\\`\\`\n * and can be queried via\n * \\`\\`\\`ts\n * const newAccountEvents = await api.event.System.NewAccount.pull()\n * newAccountEvents.forEach(newAccount => {\n *  const address: SS58String = newAccount.payload.account\n *  console.log(address)\n * })\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/events) on events for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as Events from \"./Events\";\n\n`\n    : \"\"\n}\n${\n  hasSection.viewFns\n    ? `/**\n * View Functions\n * \n * Each item described here is a \\`RuntimeDescriptor<Args, ReturnType>\\`\n * \n * For example, \\`Proxy.is_superset\\` is of type\n * \\`\\`\\`ts\n * is_superset: RuntimeDescriptor<[to_check: ProxyType, against: ProxyType], boolean>\n * \\`\\`\\`\n * and can be called like this:\n * \\`\\`\\`ts\n *  const isSuperset = await api.view.Proxy.is_superset(Enum(\"Any\"), Enum(\"NonTransfer\"))\n *  console.log(isSuperset)\n * })\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/view) on view functions for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as ViewFunctions from \"./ViewFunctions\";\n\n`\n    : \"\"\n}\n${\n  hasSection.runtimeCalls\n    ? `/**\n * Runtime calls\n * \n * Each item described here is a \\`RuntimeDescriptor<Args, ReturnType>\\`\n * \n * For example, \\`Metadata.metadata_at_version\\` is of type\n * \\`\\`\\`ts\n * metadata_at_version: RuntimeDescriptor<[version: number], Binary | undefined>\n * \\`\\`\\`\n * and can be called like this:\n * \\`\\`\\`ts\n *  const metadata = await api.apis.Metadata.metadata_at_version(15)\n *  console.log(metadata?.asHex())\n * })\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/apis) on runtime APIs for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as RuntimeCalls from \"./RuntimeCalls\";\n\n`\n    : \"\"\n}\n/**\n * Descriptors types\n * \n * These are the types used in API calls and imported out of descriptors  \n * \n * For example, \\`XcmVersionedLocation\\` is an enum:\n * \\`\\`\\`ts\n * XcmVersionedLocation: Enum<{\n *     V2: { ... };\n *     V3: {\n *         interior: XcmV3Junctions;\n *         parents: number;\n *     };\n *     V4: { ... };\n * }>\n * \\`\\`\\`\n * and can be used like this\n * \\`\\`\\`ts\n * import { XcmVersionedLocation, XcmV3Junctions } from \"@polkadot-api/descriptors\"\n * await typedApi.tx.XcmPallet.limited_teleport_assets({\n      dest: XcmVersionedLocation.V3({\n        parents: 0,\n        interior: XcmV3Junctions.X1(XcmV3Junction.Parachain(parachain_id)),\n      }),\n * \\`\\`\\`\n * \n * @namespace\n * @category Types\n */\nexport * as Types from \"./types\";`\n}\n"],"names":[],"mappings":"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"}