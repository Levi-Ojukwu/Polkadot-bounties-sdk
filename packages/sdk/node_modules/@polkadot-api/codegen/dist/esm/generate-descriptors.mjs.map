{"version":3,"file":"generate-descriptors.mjs","sources":["../../src/generate-descriptors.ts"],"sourcesContent":["import {\n  getChecksumBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport { filterObject, mapObject } from \"@polkadot-api/utils\"\nimport { anonymizeImports, anonymizeType } from \"./anonymize\"\nimport { getTypesBuilder } from \"./types-builder\"\n\nconst isDocs = (x: any) => {\n  if (typeof x !== \"object\") return false\n  const keys = new Set(Object.keys(x))\n  if (keys.size !== 2) return false\n  return keys.has(\"docs\") && keys.has(\"value\")\n}\n\nexport const customStringifyObject = (\n  input: string | Record<string, any> | Array<any>,\n): string => {\n  if (typeof input === \"string\" || typeof input === \"number\") return input\n\n  if (Array.isArray(input))\n    return `[${input.map(customStringifyObject).join(\", \")}]`\n\n  return `{${Object.entries(\n    mapObject(input, (x) => (isDocs(x) ? x : customStringifyObject(x))),\n  )\n    .map(([key, value]) => {\n      if (isDocs(value)) {\n        return `\\n\\n/**\\n${value.docs\n          .map((doc: string) => ` * ${doc.trim()}`)\n          .join(\"\\n\")}\\n */\\n${key}: ${customStringifyObject(value.value)}`\n      }\n      return `${key}: ${value}`\n    })\n    .join(\",\\n\")}}`\n}\n\n// type -> pallet -> name\nexport type DescriptorValues = Record<\n  \"storage\" | \"tx\" | \"events\" | \"constants\" | \"apis\" | \"viewFns\",\n  Record<string, Record<string, number>>\n>\n\nexport function capitalize(value: string) {\n  return value.slice(0, 1).toUpperCase() + value.slice(1)\n}\n\nexport const generateDescriptors = (\n  lookupFn: MetadataLookup,\n  checksumToIdx: Map<string, number>,\n  typesBuilder: ReturnType<typeof getTypesBuilder>,\n  checksumBuilder: ReturnType<typeof getChecksumBuilder>,\n  key: string,\n  paths: {\n    client: string\n    metadataTypes: string\n    types: string\n    descriptorValues: string\n    common: string\n  },\n  genesis?: string,\n) => {\n  const prefix = capitalize(key)\n  const { metadata } = lookupFn\n  const buildEnumObj = <T>(\n    val: number | undefined,\n    cb: (name: string, docs: string[]) => T,\n  ): Record<string, T> => {\n    if (val === undefined) return {}\n\n    const lookup = metadata.lookup[val]\n    if (lookup.def.tag !== \"variant\") throw null\n    return Object.fromEntries(\n      lookup.def.value.map((x) => {\n        return [x.name!, cb(x.name, x.docs)]\n      }),\n    )\n  }\n\n  const storage = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        Object.fromEntries(\n          pallet.storage?.items.map(({ name, modifier, docs }) => {\n            const { key, val, opaque } = typesBuilder.buildStorage(\n              pallet.name,\n              name,\n            )\n            const checksum = checksumBuilder.buildStorage(pallet.name, name)!\n            // if val is `void` it decodes to `undefined`, making it impossible\n            // to differentiate from a non-existant key\n            // therefore, if the key exists => null, if it doesn't => undefined\n            const type = `StorageDescriptor<${key}, ${val === \"undefined\" ? \"null\" : val}, ${!modifier}, ${opaque}>`\n            return [\n              name,\n              {\n                typeRef: checksumToIdx.get(checksum)!,\n                type,\n                name: `stg_${pallet.name}_${name}`,\n                docs,\n              },\n            ]\n          }) ?? [],\n        ),\n      ]\n    }),\n  )\n\n  const constants = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        Object.fromEntries(\n          pallet.constants?.map(({ name, docs }) => {\n            const checksum = checksumBuilder.buildConstant(pallet.name, name)!\n            const type = `PlainDescriptor<${typesBuilder.buildConstant(\n              pallet.name,\n              name,\n            )}>`\n            return [\n              name,\n              {\n                typeRef: checksumToIdx.get(checksum)!,\n                type,\n                name: `const_${pallet.name}_${name}`,\n                docs,\n              },\n            ]\n          }) ?? [],\n        ),\n      ]\n    }),\n  )\n\n  const calls = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        buildEnumObj(pallet.calls?.type, (name, docs) => ({\n          typeRef: checksumToIdx.get(\n            checksumBuilder.buildCall(pallet.name, name)!,\n          )!,\n          type: `TxDescriptor<${typesBuilder.buildCall(pallet.name, name)}>`,\n          name: `call_${pallet.name}_${name}`,\n          docs,\n        })),\n      ]\n    }),\n  )\n\n  const events = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        buildEnumObj(pallet.events?.type, (name, docs) => ({\n          typeRef: checksumToIdx.get(\n            checksumBuilder.buildEvent(pallet.name, name)!,\n          )!,\n          type: `PlainDescriptor<${typesBuilder.buildEvent(\n            pallet.name,\n            name,\n          )}>`,\n          name: `evt_${pallet.name}_${name}`,\n          docs,\n        })),\n      ]\n    }),\n  )\n\n  const errors = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        buildEnumObj(pallet.errors?.type, (name, docs) => {\n          return {\n            typeRef: checksumToIdx.get(\n              checksumBuilder.buildError(pallet.name, name)!,\n            )!,\n            type: `PlainDescriptor<${typesBuilder.buildError(\n              pallet.name,\n              name,\n            )}>`,\n            name: `err_${pallet.name}_${name}`,\n            docs,\n          }\n        }),\n      ]\n    }),\n  )\n\n  const viewFns = Object.fromEntries(\n    metadata.pallets.map((pallet) => [\n      pallet.name,\n      Object.fromEntries(\n        pallet.viewFns.map((viewFn) => {\n          const { args, value } = typesBuilder.buildViewFn(\n            pallet.name,\n            viewFn.name,\n          )\n          return [\n            viewFn.name,\n            {\n              typeRef: checksumToIdx.get(\n                checksumBuilder.buildViewFns(pallet.name, viewFn.name)!,\n              )!,\n              type: `RuntimeDescriptor<${args}, ${value}>`,\n              name: `view_${pallet.name}_${viewFn.name}`,\n              docs: viewFn.docs,\n            },\n          ]\n        }),\n      ),\n    ]),\n  )\n\n  const runtimeCalls = Object.fromEntries(\n    metadata.apis.map((api) => [\n      api.name,\n      {\n        docs: api.docs,\n        methods: Object.fromEntries(\n          api.methods.map((method) => {\n            const { args, value } = typesBuilder.buildRuntimeCall(\n              api.name,\n              method.name,\n            )\n            return [\n              method.name,\n              {\n                typeRef: checksumToIdx.get(\n                  checksumBuilder.buildRuntimeCall(api.name, method.name)!,\n                )!,\n                type: `RuntimeDescriptor<${args}, ${value}>`,\n                name: `runtime_${api.name}_${method.name}`,\n                docs: method.docs,\n              },\n            ]\n          }),\n        ),\n      },\n    ]),\n  )\n\n  const mapDescriptor = <T, R>(\n    descriptor: Record<string, Record<string, T>>,\n    mapFn: (value: T, pallet: string, name: string) => R,\n  ): Record<string, Record<string, R>> =>\n    filterObject(\n      mapObject(descriptor, (v, pallet) =>\n        mapObject(v, (value, name) => mapFn(value, pallet, name)),\n      ),\n      (v) => Object.keys(v).length > 0,\n    )\n\n  const extractValue = (input: { docs: string[]; type: string }) => ({\n    docs: input.docs,\n    value: input.type,\n  })\n\n  const iStorage = mapDescriptor(storage, extractValue)\n  const iCalls = mapDescriptor(calls, extractValue)\n  const iEvents = mapDescriptor(events, extractValue)\n  const iErrors = mapDescriptor(errors, extractValue)\n  const iConstants = mapDescriptor(constants, extractValue)\n  const iViewFns = mapDescriptor(viewFns, extractValue)\n\n  const descriptorValues: DescriptorValues = {\n    storage: {},\n    tx: {},\n    events: {},\n    constants: {},\n    viewFns: {},\n    apis: {},\n  }\n  const mapObjStr = mapObject as <I, O>(\n    input: Record<string, I>,\n    mapper: (i: I, k: string) => O,\n  ) => Record<string, O>\n  Object.keys(storage).forEach((pallet) => {\n    descriptorValues[\"storage\"][pallet] = mapObjStr(\n      storage[pallet],\n      (x) => x.typeRef,\n    )\n    descriptorValues[\"tx\"][pallet] = mapObjStr(calls[pallet], (x) => x.typeRef)\n    descriptorValues[\"events\"][pallet] = mapObjStr(\n      events[pallet],\n      (x) => x.typeRef,\n    )\n    descriptorValues[\"constants\"][pallet] = mapObjStr(\n      constants[pallet],\n      (x) => x.typeRef,\n    )\n    descriptorValues[\"viewFns\"][pallet] = mapObjStr(\n      viewFns[pallet],\n      (x) => x.typeRef,\n    )\n  })\n\n  const iRuntimeCalls = mapObject(runtimeCalls, (api) => ({\n    docs: api.docs,\n    value: mapObject(api.methods, ({ docs, type: value }) => ({ docs, value })),\n  }))\n\n  if (lookupFn.call) {\n    // Generate the types to have it included in common types\n    typesBuilder.buildDefinition(lookupFn.call)\n  }\n\n  const callInterface = lookupFn.call\n    ? `I${checksumBuilder.buildDefinition(lookupFn.call)}`\n    : null\n\n  // & { value: {Â type: string }} to remove pallets without tx (otherwise it's not assignable to TxCallData)\n  const chainCallType = callInterface\n    ? `export type ${prefix}CallData = Anonymize<${callInterface}> & { value: { type: string } };`\n    : \"\"\n\n  descriptorValues[\"apis\"] = mapObject(runtimeCalls, (api) =>\n    mapObject(api.methods, (x) => x.typeRef),\n  )\n\n  const clientImports = [\n    ...new Set([\n      \"StorageDescriptor\",\n      \"PlainDescriptor\",\n      \"TxDescriptor\",\n      \"RuntimeDescriptor\",\n      \"Enum\",\n      \"_Enum\",\n      \"GetEnum\",\n      \"ApisFromDef\",\n      \"QueryFromPalletsDef\",\n      \"TxFromPalletsDef\",\n      \"EventsFromPalletsDef\",\n      \"ErrorsFromPalletsDef\",\n      \"ConstFromPalletsDef\",\n      \"ViewFnsFromPalletsDef\",\n      ...typesBuilder.getClientFileImports(),\n      ...anonymizeImports,\n    ]),\n  ]\n\n  const assetId = getAssetId(lookupFn)\n  const assetType =\n    assetId == null ? \"void\" : typesBuilder.buildTypeDefinition(assetId)\n\n  const dispatchErrorId = getDispatchErrorId(lookupFn)\n  const dispatchErrorType =\n    dispatchErrorId == null\n      ? \"unknown\"\n      : typesBuilder.buildTypeDefinition(dispatchErrorId)\n\n  const commonTypeImports = typesBuilder.getTypeFileImports()\n\n  const exports = [\n    `default as ${key}`,\n    callInterface ? `${prefix}CallData` : null,\n  ].filter((v) => v !== null)\n\n  // Going through base64 conversion instead of using binary loader because of esbuild issue\n  // https://github.com/evanw/esbuild/issues/3894\n  const imports = `import {${clientImports.join(\", \")}} from \"${paths.client}\";\n  import {${commonTypeImports.join(\", \")}} from \"${paths.types}\";\n  import { toBinary } from \"${paths.common}\"\n\n  const descriptorValues = import(\"${paths.descriptorValues}\").then(module => module[\"${prefix}\"]);\n  const metadataTypes = import(\"${paths.metadataTypes}\").then(\n    module => toBinary('default' in module ? module.default : module)\n  );\n  `\n\n  const descriptorTypes = `${imports}\n\n${anonymizeType}\n\ntype IStorage = ${customStringifyObject(iStorage)};\ntype ICalls = ${customStringifyObject(iCalls)};\ntype IEvent = ${customStringifyObject(iEvents)};\ntype IError = ${customStringifyObject(iErrors)};\ntype IConstants = ${customStringifyObject(iConstants)};\ntype IViewFns = ${customStringifyObject(iViewFns)};\ntype IRuntimeCalls = ${customStringifyObject(iRuntimeCalls)};\ntype IAsset = PlainDescriptor<${assetType}>\nexport type ${prefix}DispatchError = ${dispatchErrorType}\nconst asset: IAsset = {} as IAsset\nconst getMetadata: () => Promise<Uint8Array> = () => import(\"./${key}_metadata\").then(\n  module => toBinary('default' in module ? module.default : module)\n)\nconst genesis: string | undefined = ${genesis ? `\"${genesis}\"` : undefined}\n\ntype PalletsTypedef = {\n  __storage: IStorage,\n  __tx: ICalls,\n  __event: IEvent,\n  __error: IError,\n  __const: IConstants\n  __view: IViewFns\n}\n\nexport type ${prefix} = {\n  descriptors: {\n    pallets: PalletsTypedef,\n    apis: IRuntimeCalls\n  } & Promise<any>,\n  metadataTypes: Promise<Uint8Array>\n  asset: IAsset\n  getMetadata: () => Promise<Uint8Array>\n  genesis: string | undefined\n};\nconst _allDescriptors = { descriptors: descriptorValues, metadataTypes, asset, getMetadata, genesis } as any as ${prefix};\nexport default _allDescriptors;\n\nexport type ${prefix}Apis = ApisFromDef<IRuntimeCalls>\nexport type ${prefix}Queries = QueryFromPalletsDef<PalletsTypedef>\nexport type ${prefix}Calls = TxFromPalletsDef<PalletsTypedef>\nexport type ${prefix}Events = EventsFromPalletsDef<PalletsTypedef>\nexport type ${prefix}Errors = ErrorsFromPalletsDef<PalletsTypedef>\nexport type ${prefix}Constants = ConstFromPalletsDef<PalletsTypedef>\nexport type ${prefix}ViewFns = ViewFnsFromPalletsDef<PalletsTypedef>\n${chainCallType}\n\nexport type ${prefix}WhitelistEntry =\n  | PalletKey\n  | ApiKey<IRuntimeCalls>\n  | \\`query.\\${NestedKey<PalletsTypedef['__storage']>}\\`\n  | \\`tx.\\${NestedKey<PalletsTypedef['__tx']>}\\`\n  | \\`event.\\${NestedKey<PalletsTypedef['__event']>}\\`\n  | \\`error.\\${NestedKey<PalletsTypedef['__error']>}\\`\n  | \\`const.\\${NestedKey<PalletsTypedef['__const']>}\\`\n  | \\`view.\\${NestedKey<PalletsTypedef['__view']>}\\`\n\ntype PalletKey = \\`*.\\${keyof (IStorage & ICalls & IEvent & IError & IConstants & IRuntimeCalls & IViewFns)}\\`\ntype NestedKey<D extends Record<string, Record<string, any>>> =\n  | \"*\"\n  | {\n      [P in keyof D & string]:\n        | \\`\\${P}.*\\`\n        | {\n            [N in keyof D[P] & string]: \\`\\${P}.\\${N}\\`\n          }[keyof D[P] & string]\n    }[keyof D & string]\n\ntype ApiKey<D extends Record<string, Record<string, any>>> =\n  | \"api.*\"\n  | {\n      [P in keyof D & string]:\n        | \\`api.\\${P}.*\\`\n        | {\n            [N in keyof D[P] & string]: \\`api.\\${P}.\\${N}\\`\n          }[keyof D[P] & string]\n    }[keyof D & string]\n`\n\n  return { descriptorTypes, descriptorValues, exports, commonTypeImports }\n}\n\nexport function getAssetId(lookup: MetadataLookup) {\n  const assetPayment = lookup.metadata.extrinsic.signedExtensions.find(\n    (x) => x.identifier === \"ChargeAssetTxPayment\",\n  )\n\n  if (assetPayment) {\n    const assetTxPayment = lookup(assetPayment.type)\n    if (assetTxPayment.type === \"struct\") {\n      const optionalAssetId = assetTxPayment.value.asset_id\n      if (optionalAssetId.type === \"option\") return optionalAssetId.value.id\n    }\n  }\n  return\n}\n\nexport function getDispatchErrorId(lookup: MetadataLookup) {\n  const systemPalletEventId = lookup.metadata.pallets.find(\n    (p) => p.name === \"System\",\n  )?.events\n  if (systemPalletEventId == null) return\n\n  const systemPalletEvent = lookup(systemPalletEventId.type)\n  if (systemPalletEvent.type !== \"enum\") return\n\n  const extrinsicFailed = systemPalletEvent.value.ExtrinsicFailed\n  if (extrinsicFailed?.type !== \"struct\") return\n\n  return extrinsicFailed.value.dispatch_error.id\n}\n"],"names":["key"],"mappings":"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"}