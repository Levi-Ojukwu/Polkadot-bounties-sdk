{"version":3,"file":"types-builder.mjs","sources":["../../src/types-builder.ts"],"sourcesContent":["import {\n  ArrayVar,\n  getChecksumBuilder,\n  MetadataLookup,\n  StructVar,\n  TupleVar,\n} from \"@polkadot-api/metadata-builders\"\nimport { getInternalTypesBuilder, isPrimitive } from \"./internal-types\"\nimport {\n  CodegenOutput,\n  generateTypescript,\n  mergeImports,\n  nativeNodeCodegen,\n  onlyCode,\n  processPapiPrimitives,\n} from \"./internal-types/generate-typescript\"\nimport type { KnownTypes } from \"./known-types\"\n\nexport interface Variable {\n  name: string\n\n  checksum: string\n  type: string\n}\n\nexport interface CodeDeclarations {\n  imports: Set<string>\n  // checksum -> Variable;\n  // in Mode.Anonymize contains normalized types for every checksum,\n  // in Mode.TerminateKnown contains expanded types, with duplication\n  variables: Map<string, Variable>\n  takenNames: Set<string>\n}\n\nexport const defaultDeclarations = (): CodeDeclarations => ({\n  imports: new Set(),\n  variables: new Map(),\n  takenNames: new Set(),\n})\n\nconst NEVER_STR = \"never\"\nconst opaqueHashers = new Set<string>([\n  \"Blake2128\",\n  \"Blake2256\",\n  \"Twox128\",\n  \"Twox256\",\n])\n\nexport const getTypesBuilder = (\n  declarations: CodeDeclarations,\n  getLookupEntryDef: MetadataLookup,\n  // checksum -> desired-name\n  knownTypes: KnownTypes,\n  checksumBuilder: ReturnType<typeof getChecksumBuilder>,\n) => {\n  const { metadata, call } = getLookupEntryDef\n  const callsChecksum = call ? checksumBuilder.buildDefinition(call) : null\n\n  const typeFileImports = new Set<string>()\n  const clientFileImports = new Set<string>()\n\n  const getChecksum = (id: number | StructVar | TupleVar | ArrayVar): string =>\n    typeof id === \"number\"\n      ? checksumBuilder.buildDefinition(id)!\n      : checksumBuilder.buildComposite(id)!\n\n  const internalBuilder = getInternalTypesBuilder(getLookupEntryDef)\n  const anonymize = ({ name, checksum }: Variable) =>\n    knownTypes[checksum] ? name : `Anonymize<${name}>`\n  const getName = (checksum: string) => {\n    if (!knownTypes[checksum]) return `I${checksum}`\n\n    const { name: originalName } = knownTypes[checksum]\n    let name = originalName\n    let i = 1\n    while (declarations.takenNames.has(name)) name = originalName + i++\n\n    declarations.takenNames.add(name)\n    return name\n  }\n\n  const buildDefinition = (id: number) => {\n    const node = internalBuilder(id)\n\n    return generateTypescript(node, (node, next, level) => {\n      // primitives are not assigned to intermediate types\n      if (node.type === \"primitive\") return nativeNodeCodegen(node, next)\n\n      const checksum =\n        \"id\" in node\n          ? getChecksum(node.id)\n          : // for types inlined in Enums, we might have an intermediate type\n            \"original\" in node\n            ? getChecksum(node.original)\n            : null\n\n      // We can't call this directly because we might have to prepare the\n      // `declarations.variables` if it turns out it's nested;\n      const getPapiPrimitive = (level: number) => {\n        const papiPrimitive = processPapiPrimitives(\n          node,\n          next,\n          !!checksum && !!knownTypes[checksum],\n        )\n        if (!papiPrimitive) return null\n        papiPrimitive.imports.client?.forEach((name) => {\n          if (level === 0) {\n            clientFileImports.add(name)\n          } else {\n            declarations.imports.add(name)\n          }\n        })\n        return onlyCode(papiPrimitive.code)\n      }\n\n      if (!checksum || isPrimitive(node) || node.type === \"union\") {\n        // It's not a lookup type nor an inlined Enum type\n        // Return the primitive type or the regular codegen.\n        // And if it's a chainPrimitive also return that primitive without creating\n        // and intermediate type.\n        return getPapiPrimitive(level) ?? nativeNodeCodegen(node, next)\n      }\n\n      if (level > 0 && checksum === callsChecksum) {\n        declarations.imports.add(\"TxCallData\")\n        return onlyCode(\"TxCallData\")\n      }\n\n      if (declarations.variables.has(checksum)) {\n        const entry = declarations.variables.get(checksum)!\n        if (level === 0) {\n          typeFileImports.add(entry.name)\n        }\n        return onlyCode(anonymize(entry))\n      }\n\n      const variable: Variable = {\n        checksum,\n        type: \"\",\n        name: getName(checksum),\n      }\n      if (level === 0) {\n        typeFileImports.add(variable.name)\n      }\n      declarations.variables.set(checksum, variable)\n      // We're wrapping the variable with another, so we increase a level.\n      variable.type = (\n        getPapiPrimitive(level + 1) ?? nativeNodeCodegen(node, next)\n      ).code\n\n      return onlyCode(anonymize(variable))\n    })\n  }\n\n  const buildTypeDefinition = (id: number) => buildDefinition(id).code\n\n  const buildStorage = (pallet: string, entry: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .storage!.items.find((s) => s.name === entry)!\n\n    if (storageEntry.type.tag === \"plain\")\n      return {\n        key: \"[]\",\n        val: `${buildTypeDefinition(storageEntry.type.value)}`,\n        opaque: NEVER_STR,\n      }\n\n    const hashers = storageEntry.type.value.hashers\n    const opaque =\n      hashers\n        .map((x, idx) => (opaqueHashers.has(x.tag) ? `\"${idx}\"` : null))\n        .filter(Boolean)\n        .join(\" | \") || NEVER_STR\n\n    const { key, value } = storageEntry.type.value\n    const val = buildTypeDefinition(value)\n\n    const returnKey =\n      storageEntry.type.value.hashers.length === 1\n        ? `[Key: ${buildTypeDefinition(key)}]`\n        : buildTypeDefinition(key)\n\n    return { key: returnKey, val, opaque }\n  }\n\n  const buildViewFn = (pallet: string, entry: string) => {\n    const viewFn = metadata.pallets\n      .find((x) => x.name === pallet)\n      ?.viewFns.find((x) => x.name === entry)\n    if (!viewFn) throw null\n\n    const innerTuple = viewFn.inputs\n      .map(({ name, type }) => `${name}: ${buildTypeDefinition(type)}`)\n      .join(\", \")\n\n    return {\n      args: `[${innerTuple}]`,\n      value: buildTypeDefinition(viewFn.output),\n    }\n  }\n\n  const buildRuntimeCall = (api: string, method: string) => {\n    const entry = metadata.apis\n      .find((x) => x.name === api)\n      ?.methods.find((x) => x.name === method)\n    if (!entry) throw null\n\n    const innerTuple = entry.inputs\n      .map(({ name, type }) => `${name}: ${buildTypeDefinition(type)}`)\n      .join(\", \")\n\n    return {\n      args: `[${innerTuple}]`,\n      value: buildTypeDefinition(entry.output),\n    }\n  }\n\n  const buildVariant =\n    (type: \"errors\" | \"events\" | \"calls\") => (pallet: string, name: string) => {\n      const lookupEntry = getLookupEntryDef(\n        metadata.pallets.find((x) => x.name === pallet)![type]!.type,\n      )\n      if (lookupEntry.type !== \"enum\") throw null\n\n      // if (getChecksum(lookupEntry.id) !== \"ajkhn97prklo5\") return \"\"\n\n      // Generate the type that has all the variants - This is so the consumer can import the type, even if it's not used directly by the descriptor file\n      buildDefinition(lookupEntry.id)\n\n      const innerLookup = lookupEntry.value[name]\n\n      if (innerLookup.type === \"lookupEntry\") {\n        return buildTypeDefinition(innerLookup.value.id)\n      } else if (innerLookup.type === \"void\") {\n        return \"undefined\"\n      } else {\n        const result = declarations.variables.get(\n          getChecksum(innerLookup),\n        )!.name\n        typeFileImports.add(result)\n\n        return `Anonymize<${result}>`\n      }\n    }\n\n  const buildConstant = (pallet: string, constantName: string) => {\n    // return \"\"\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .constants!.find((s) => s.name === constantName)!\n\n    return buildTypeDefinition(storageEntry.type)\n  }\n\n  return {\n    buildTypeDefinition,\n    buildDefinition,\n    buildStorage,\n    buildEvent: buildVariant(\"events\"),\n    buildError: buildVariant(\"errors\"),\n    buildCall: buildVariant(\"calls\"),\n    buildViewFn,\n    buildRuntimeCall,\n    buildConstant,\n    getTypeFileImports: () => Array.from(typeFileImports),\n    getClientFileImports: () => Array.from(clientFileImports),\n  }\n}\n\nexport const getDocsTypesBuilder = (\n  getLookupEntryDef: MetadataLookup,\n  knownTypes: KnownTypes,\n  checksumBuilder: ReturnType<typeof getChecksumBuilder>,\n) => {\n  const { metadata, call } = getLookupEntryDef\n  const callsChecksum = call ? checksumBuilder.buildDefinition(call) : null\n  const clientFileImports = new Set<string>()\n  const fileTypeEntries = new Set<number>()\n\n  // checksum -> types that are imported for it\n  const importsPerType = new Map<string, CodegenOutput[\"imports\"]>()\n\n  const declarations = defaultDeclarations()\n\n  const getChecksum = (id: number | StructVar | TupleVar | ArrayVar): string =>\n    typeof id === \"number\"\n      ? checksumBuilder.buildDefinition(id)!\n      : checksumBuilder.buildComposite(id)!\n\n  const internalBuilder = getInternalTypesBuilder(getLookupEntryDef)\n\n  const buildTypeDefinition = (id: number) => {\n    fileTypeEntries.add(id)\n    const node = internalBuilder(id)\n\n    const visited = new Set<string>()\n    const result = generateTypescript(node, (node, next): CodegenOutput => {\n      const checksum =\n        \"id\" in node\n          ? getChecksum(node.id)\n          : // for types inlined in Enums, we might have an intermediate type\n            \"original\" in node\n            ? getChecksum(node.original)\n            : null\n\n      const getPapiPrimitive = () => processPapiPrimitives(node, next, true)\n\n      if (!checksum) {\n        // It's not a lookup type nor an inlined Enum type\n        // Return the primitive type or the regular codegen.\n        return getPapiPrimitive() ?? nativeNodeCodegen(node, next)\n      }\n\n      if (node.type === \"primitive\") return nativeNodeCodegen(node, next)\n      if (checksum === callsChecksum) {\n        return {\n          code: \"TxCallData\",\n          imports: {\n            client: new Set([\"TxCallData\"]),\n          },\n        }\n      }\n\n      if (checksum in knownTypes) {\n        if (declarations.variables.has(checksum)) {\n          const entry = declarations.variables.get(checksum)!\n          return {\n            code: entry.name,\n            imports: {\n              types: new Set([entry.name]),\n            },\n          }\n        }\n\n        const variable: Variable = {\n          checksum,\n          type: \"\",\n          name: knownTypes[checksum].name,\n        }\n        declarations.variables.set(checksum, variable)\n        const generated = getPapiPrimitive() ?? nativeNodeCodegen(node, next)\n        variable.type = generated.code\n        importsPerType.set(\n          checksum,\n          mergeImports([\n            generated.imports,\n            {\n              types: new Set([variable.name]),\n            },\n          ]),\n        )\n\n        return {\n          code: variable.name,\n          imports: {\n            types: new Set([variable.name]),\n          },\n        }\n      }\n\n      if (declarations.variables.has(checksum)) {\n        const entry = declarations.variables.get(checksum)!\n        return {\n          code: entry.type,\n          imports: importsPerType.get(checksum) ?? {},\n        }\n      }\n\n      if (visited.has(checksum)) {\n        return {\n          code: \"__Circular\",\n          imports: {\n            types: new Set([\"__Circular\"]),\n          },\n        }\n      }\n      visited.add(checksum)\n\n      const result = getPapiPrimitive() ?? nativeNodeCodegen(node, next)\n      declarations.variables.set(checksum, {\n        checksum,\n        type: result.code,\n        name: \"I\" + checksum,\n      })\n      importsPerType.set(checksum, result.imports)\n      return result\n    })\n    return result.code\n  }\n\n  const buildStorage = (pallet: string, entry: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .storage!.items.find((s) => s.name === entry)!\n\n    if (storageEntry.type.tag === \"plain\")\n      return {\n        opaque: NEVER_STR,\n        args: \"[]\",\n        payload: `${buildTypeDefinition(storageEntry.type.value)}`,\n      }\n\n    const { key, value } = storageEntry.type.value\n    const payload = buildTypeDefinition(value)\n\n    const hashers = storageEntry.type.value.hashers\n    const opaque =\n      hashers\n        .map((x, idx) => (opaqueHashers.has(x.tag) ? `\"${idx}\"` : null))\n        .filter(Boolean)\n        .join(\" | \") || NEVER_STR\n\n    const returnKey =\n      hashers.length === 1\n        ? `[Key: ${buildTypeDefinition(key)}]`\n        : buildTypeDefinition(key)\n\n    return { args: returnKey, payload, opaque }\n  }\n\n  const buildViewFn = (pallet: string, entry: string) => {\n    const fn = metadata.pallets\n      .find((x) => x.name === pallet)\n      ?.viewFns.find((x) => x.name === entry)\n    if (!fn) throw null\n\n    const innerTuple = fn.inputs\n      .map(({ name, type }) => `${name}: ${buildTypeDefinition(type)}`)\n      .join(\", \")\n\n    return {\n      args: `[${innerTuple}]`,\n      value: buildTypeDefinition(fn.output),\n    }\n  }\n\n  const buildRuntimeCall = (api: string, method: string) => {\n    const entry = metadata.apis\n      .find((x) => x.name === api)\n      ?.methods.find((x) => x.name === method)\n    if (!entry) throw null\n\n    const innerTuple = entry.inputs\n      .map(({ name, type }) => `${name}: ${buildTypeDefinition(type)}`)\n      .join(\", \")\n\n    return {\n      args: `[${innerTuple}]`,\n      value: buildTypeDefinition(entry.output),\n    }\n  }\n\n  const buildVariant =\n    (type: \"errors\" | \"events\" | \"calls\") => (pallet: string, name: string) => {\n      const lookupEntry = getLookupEntryDef(\n        metadata.pallets.find((x) => x.name === pallet)![type]!.type,\n      )\n      if (lookupEntry.type !== \"enum\") throw null\n\n      const innerLookup = lookupEntry.value[name]\n\n      if (innerLookup.type === \"lookupEntry\") {\n        return buildTypeDefinition(innerLookup.value.id)\n      } else if (innerLookup.type === \"void\") {\n        return \"undefined\"\n      } else {\n        // building all variants, in order to populate declarations.variables\n        buildTypeDefinition(lookupEntry.id)\n        const innerChecksum = getChecksum(innerLookup)\n        const innerVariable = declarations.variables.get(innerChecksum)\n        if (!innerVariable) {\n          throw new Error(\n            `Unable to build ${type} variant for ${pallet}::${name}: ${innerChecksum} not populated`,\n          )\n        }\n\n        return innerVariable.type\n      }\n    }\n\n  const buildConstant = (pallet: string, constantName: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .constants!.find((s) => s.name === constantName)!\n\n    return buildTypeDefinition(storageEntry.type)\n  }\n\n  const recordTypeFileImports = (): string[] => {\n    const allImports = new Set<string>()\n    for (const id of fileTypeEntries) {\n      const thisTypeImports = importsPerType.get(getChecksum(id))\n      if (!thisTypeImports?.types) continue\n\n      for (const singleType of thisTypeImports.types.values()) {\n        allImports.add(singleType)\n      }\n    }\n    fileTypeEntries.clear()\n    return Array.from(allImports)\n  }\n\n  const getDescriptorsTypes = (): Variable[] =>\n    [...declarations.variables.entries()]\n      .filter(([checksum]) => knownTypes[checksum])\n      .map(([_, variable]) => variable)\n\n  return {\n    buildStorage,\n    buildRuntimeCall,\n    buildEvent: buildVariant(\"events\"),\n    buildError: buildVariant(\"errors\"),\n    buildCall: buildVariant(\"calls\"),\n    buildConstant,\n    buildViewFn,\n    declarations,\n    recordTypeFileImports,\n    getClientFileImports: () => Array.from(clientFileImports),\n    getDescriptorsTypes,\n  }\n}\n"],"names":["node","level","result"],"mappings":"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"}