{"version":3,"file":"generate-types.mjs","sources":["../../src/generate-types.ts"],"sourcesContent":["import { anonymizeImports, anonymizeType } from \"./anonymize\"\nimport { CodeDeclarations, Variable } from \"./types-builder\"\n\nconst getTypeDependencies = (input: string) =>\n  new Set([...input.matchAll(/Anonymize<(I\\w*)>/gm)].map((x) => x[1].slice(1)))\n\nconst optimizeVariables = (\n  variables: Map<string, Variable>,\n  commonTypeImports: Set<string>,\n) => {\n  const dependants = new Map<string, Set<string>>()\n  const dependencies = new Map<string, Set<string>>()\n\n  const toRemove = new Set<string>()\n\n  ;[...variables.entries()].forEach(([checksum, { type }]) => {\n    const iDependencies = getTypeDependencies(type)\n    dependencies.set(checksum, iDependencies)\n    iDependencies.forEach((dependencyChecksum) => {\n      const s = dependants.get(dependencyChecksum)\n      if (s) {\n        s.add(checksum)\n        toRemove.delete(dependencyChecksum)\n      } else {\n        dependants.set(dependencyChecksum, new Set([checksum]))\n        if (!commonTypeImports.has(variables.get(dependencyChecksum)!.name))\n          toRemove.add(dependencyChecksum)\n      }\n    })\n  })\n\n  while (true) {\n    const nonDependants = [...toRemove].filter((item) =>\n      [...(dependencies.get(item) ?? [])].every((x) => !toRemove.has(x)),\n    )\n\n    if (!nonDependants.length) break\n\n    nonDependants.forEach((checksum) => {\n      const variableToInline = variables.get(checksum)!\n      const [target] = [...dependants.get(checksum)!]\n      const variable = variables.get(target)!\n\n      const newType = variableToInline.type.startsWith(\"AnonymousEnum<\")\n        ? variableToInline.type.slice(9) // \"Anonymous\".length\n        : variableToInline.type\n\n      variable.type = variable.type.replaceAll(\n        `Anonymize<${variableToInline.name}>`,\n        newType,\n      )\n      variables.delete(checksum)\n      toRemove.delete(checksum)\n    })\n  }\n\n  return variables\n}\n\nexport const generateTypes = (\n  declarations: CodeDeclarations,\n  paths: {\n    client: string\n  },\n  commonTypeImports: Set<string>,\n) => {\n  const clientImports = [\n    ...new Set([\n      \"Enum\",\n      \"_Enum\",\n      \"GetEnum\",\n      ...declarations.imports,\n      ...anonymizeImports,\n    ]),\n  ]\n\n  const imports = `import {${clientImports.join(\", \")}} from \"${paths.client}\";`\n  const variables = optimizeVariables(declarations.variables, commonTypeImports)\n\n  const baseTypes = [...variables.values()]\n    .map(({ name, type }) =>\n      type.startsWith(\"Enum<\")\n        ? `export type ${name} = ${type};\\nexport const ${name} = _Enum as unknown as GetEnum<${name}>;`\n        : `export type ${name} = ${type};`,\n    )\n    .join(\"\\n\\n\")\n\n  return `${imports}\n\n  ${anonymizeType}\n\n  ${baseTypes}\n  `\n}\n"],"names":[],"mappings":"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"}