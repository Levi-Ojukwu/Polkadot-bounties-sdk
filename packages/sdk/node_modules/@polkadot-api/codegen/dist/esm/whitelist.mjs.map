{"version":3,"file":"whitelist.mjs","sources":["../../src/whitelist.ts"],"sourcesContent":["import { UnifiedMetadata } from \"@polkadot-api/substrate-bindings\"\nimport { getUsedTypes } from \"./get-used-types\"\nimport {\n  getChecksumBuilder,\n  getLookupFn,\n} from \"@polkadot-api/metadata-builders\"\n\nexport function applyWhitelist(\n  metadata: UnifiedMetadata,\n  whitelist: string[] | null,\n): UnifiedMetadata {\n  if (!whitelist) return metadata\n\n  const allApis = whitelist.includes(\"api.*\")\n  const fullApiRegex = /^api\\.(\\w+)\\.\\*$/\n  const fullApiIncluded = whitelist\n    .map((w) => fullApiRegex.exec(w)?.[1])\n    .filter((v) => !!v)\n  const apis = allApis\n    ? metadata.apis\n    : metadata.apis\n        .map((api) => {\n          if (fullApiIncluded.includes(api.name)) return api\n\n          return {\n            ...api,\n            methods: api.methods.filter((method) =>\n              whitelist.includes(`api.${api.name}.${method.name}`),\n            ),\n          }\n        })\n        .filter((api) => api.methods.length > 0)\n\n  const fullPalletRegex = /^\\*\\.(\\w+)$/\n  const fullPallets = whitelist\n    .map((w) => fullPalletRegex.exec(w)?.[1])\n    .filter((v) => !!v)\n\n  // this is the same for calls, events, and errors\n  type EnumRef = UnifiedMetadata[\"pallets\"][number][\"calls\"]\n  const filterEnum = (\n    whitelistPrefix: string,\n    palletName: string,\n    entry: EnumRef,\n  ): EnumRef => {\n    if (!entry) return entry\n    if (\n      whitelist.includes(`${whitelistPrefix}.*`) ||\n      whitelist.includes(`${whitelistPrefix}.${palletName}.*`)\n    )\n      return entry\n\n    const def = metadata.lookup[entry.type].def\n    if (def.tag !== \"variant\") throw new Error(whitelistPrefix + \" not an enum\")\n\n    const prefixNotIncluded = whitelist.every(\n      (e) => !e.startsWith(`${whitelistPrefix}.${palletName}`),\n    )\n\n    const value = prefixNotIncluded\n      ? []\n      : def.value.filter(({ name }) =>\n          whitelist.includes(`${whitelistPrefix}.${palletName}.${name}`),\n        )\n\n    const idx = metadata.lookup.length\n    metadata.lookup.push({\n      ...metadata.lookup[entry.type],\n      id: idx,\n      def: {\n        tag: \"variant\",\n        value,\n      },\n    })\n    return \"deprecationInfo\" in entry\n      ? {\n          type: idx,\n          deprecationInfo: entry.deprecationInfo,\n        }\n      : { type: idx }\n  }\n  const getEnumLength = (lookupIdx: number | undefined) => {\n    if (!lookupIdx) return 0\n    const def = metadata.lookup[lookupIdx].def\n    if (def.tag !== \"variant\") throw new Error(\"not an enum\")\n    return def.value.length\n  }\n\n  const filterList = <T extends { name: string }>(\n    whitelistPrefix: string,\n    palletName: string,\n    list: Array<T>,\n  ) => {\n    if (\n      whitelist.includes(`${whitelistPrefix}.*`) ||\n      whitelist.includes(`${whitelistPrefix}.${palletName}.*`)\n    )\n      return list\n\n    const prefixNotIncluded = whitelist.every(\n      (e) => !e.startsWith(`${whitelistPrefix}.${palletName}`),\n    )\n    if (prefixNotIncluded) return []\n\n    return list.filter(({ name }) =>\n      whitelist.includes(`${whitelistPrefix}.${palletName}.${name}`),\n    )\n  }\n\n  const filterPallets = (\n    pallets: UnifiedMetadata[\"pallets\"],\n    filterErrors: boolean,\n  ): UnifiedMetadata[\"pallets\"] =>\n    pallets\n      .map((pallet) => {\n        if (fullPallets.includes(pallet.name)) return pallet\n\n        return {\n          ...pallet,\n          calls: filterEnum(\"tx\", pallet.name, pallet.calls),\n          constants: filterList(\"const\", pallet.name, pallet.constants),\n          errors: filterErrors ? undefined : pallet.errors,\n          events: filterEnum(\"event\", pallet.name, pallet.events),\n          storage: pallet.storage\n            ? {\n                ...pallet.storage,\n                items: filterList(\"query\", pallet.name, pallet.storage.items),\n              }\n            : undefined,\n          viewFns: filterList(\"view\", pallet.name, pallet.viewFns),\n        }\n      })\n      .filter(\n        (pallet) =>\n          getEnumLength(pallet.calls?.type) +\n          pallet.constants.length +\n          getEnumLength(pallet.errors?.type) +\n          getEnumLength(pallet.events?.type) +\n          (pallet.storage?.items.length ?? 0) +\n          pallet.viewFns.length,\n      )\n\n  const pallets = filterPallets(metadata.pallets, false)\n\n  const visitedIdxs: number[] = []\n  const lookup = getLookupFn({ ...metadata, apis, pallets })\n  getUsedTypes(lookup, getChecksumBuilder(lookup)).checksums.forEach((_, idx) =>\n    visitedIdxs.push(idx),\n  )\n  let hasModuleError = false\n  for (const idx of visitedIdxs) {\n    const visited = lookup(idx)\n    // the only type we add byteLength is the decoded module error\n    if (visited.type === \"enum\" && visited.byteLength != null) {\n      hasModuleError = true\n      break\n    }\n  }\n\n  return {\n    ...metadata,\n    apis,\n    pallets: hasModuleError ? pallets : filterPallets(pallets, true),\n  }\n}\n"],"names":["pallets"],"mappings":"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"}