{"version":3,"file":"fix-descendant-values.mjs","sources":["../../../src/parsed-enhancers/fix-descendant-values.ts"],"sourcesContent":["import { chainHead } from \"@/methods\"\nimport type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { getRequest, jsonObj, operationNotification } from \"@/utils\"\n\nconst operationPrefix = \"__INNER_OP_DesV\"\nlet nextOperationId = 0\nexport const fixDescendantValues: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const [provider, request] = getRequest(base)\n  const getDescendantValues = getDescendantValuesFromOldRpc(request)\n\n  // the `id` of the json-rpc request that should respond with the `operationId`\n  // if it has started, the value is the callback-function that is waiting for the `operationId`\n  const preOpId = new Map<string, (operationId: string) => void>()\n\n  // chainHeadSubscription - operationId => operationState\n  const onGoing: Map<\n    string,\n    Map<\n      string,\n      {\n        isOutterDone: boolean\n        isInnerDone: boolean\n        cancel: () => void\n      }\n    >\n  > = new Map()\n\n  const { send: originalSend, disconnect } = provider((msg: any) => {\n    // it's a response\n    if (\"id\" in msg) {\n      const opIdCb = preOpId.get(msg.id)\n      if (opIdCb) {\n        preOpId.delete(msg.id)\n        if (msg.result.result === \"started\") opIdCb(msg.result.operationId)\n      }\n    } else if (msg.params) {\n      // it's a notifiaction\n      const { subscription, result } = (msg as any).params\n      const { operationId } = result || {}\n      const operations = onGoing.get(subscription)\n\n      if (operations && result.event === \"stop\") {\n        operations.forEach((x) => {\n          x.cancel()\n        })\n        onGoing.delete(subscription)\n      }\n\n      const operation = operations?.get(operationId)\n      if (operation) {\n        switch (result.event) {\n          case \"operationInaccessible\":\n          case \"operationError\":\n            operation.cancel()\n            break\n          case \"operationStorageDone\": {\n            if (operation.isInnerDone) {\n              operations!.delete(operationId)\n            } else {\n              operation.isOutterDone = true\n              return\n            }\n          }\n        }\n      }\n    }\n    onMsg(msg)\n  })\n\n  const getStartDescendantValues =\n    (subscription: string, blockHash: string, keys: string[]) =>\n    (operationId: string) => {\n      let _cancel = () => {}\n      if (!onGoing.has(subscription)) {\n        onGoing.set(subscription, new Map())\n      }\n      const operationsMap = onGoing.get(subscription)!\n      const state = {\n        isOutterDone: false,\n        isInnerDone: false,\n        cancel: () => {\n          _cancel()\n        },\n      }\n      operationsMap.set(operationId, state)\n\n      let nFinished = 0\n      const stoppers = keys.map((key) =>\n        getDescendantValues(\n          key,\n          blockHash,\n          (values) => {\n            onMsg(\n              operationNotification(\n                subscription,\n                \"operationStorageItems\",\n                operationId,\n                { items: values.map(([key, value]) => ({ key, value })) },\n              ),\n            )\n          },\n          (error) => {\n            _cancel()\n            if (!state.isOutterDone) {\n              // stop the outer\n              originalSend(\n                jsonObj({\n                  method: \"chainHead_v1_stopOperation\",\n                  params: [operationId],\n                }),\n              )\n            }\n            // send error\n            onMsg(\n              operationNotification(\n                subscription,\n                \"operationError\",\n                operationId,\n                {\n                  error:\n                    typeof error === \"string\" ? error : JSON.stringify(error),\n                },\n              ),\n            )\n          },\n          () => {\n            if (++nFinished === keys.length) {\n              if (state.isOutterDone) {\n                // done\n                _cancel()\n                onMsg(\n                  operationNotification(\n                    subscription,\n                    \"operationStorageDone\",\n                    operationId,\n                  ),\n                )\n              } else state.isInnerDone = true\n            }\n          },\n        ),\n      )\n      _cancel = () => {\n        operationsMap.delete(operationId)\n        stoppers.forEach((cb) => cb())\n      }\n    }\n\n  const send = (msg: any) => {\n    switch (msg.method) {\n      case chainHead.storage: {\n        const [followSub, blockHash, items] = msg.params as [\n          string,\n          string,\n          any[],\n        ]\n        const descendantsValuesKeys: string[] = []\n        const actualItems = items.filter((x) => {\n          const isDescendantsValues = x.type === \"descendantsValues\"\n          if (isDescendantsValues) descendantsValuesKeys.push(x.key)\n          return !isDescendantsValues\n        })\n\n        const startGetDescendantValues = getStartDescendantValues(\n          followSub,\n          blockHash,\n          descendantsValuesKeys,\n        )\n        if (!actualItems.length) {\n          const operationId = operationPrefix + nextOperationId++\n          onMsg(\n            jsonObj({\n              id: msg.id,\n              result: { result: \"started\", operationId },\n            }),\n          )\n          startGetDescendantValues(operationId)\n          onGoing.get(followSub)!.get(operationId)!.isOutterDone = true\n          return\n        } else if (descendantsValuesKeys.length) {\n          preOpId.set(msg.id, startGetDescendantValues)\n        }\n        msg.params[2] = actualItems\n        break\n      }\n      case chainHead.stopOperation: {\n        const [followSubscription, operationId] = msg.params as [string, string]\n        const data = onGoing.get(followSubscription)?.get(operationId)\n        if (data) {\n          data.cancel()\n          if (data.isOutterDone) return\n        }\n        break\n      }\n      case chainHead.unfollow: {\n        const [followSubscription] = msg.params as [string]\n        onGoing.get(followSubscription)?.forEach((x) => x.cancel())\n        onGoing.delete(followSubscription)\n        break\n      }\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n\n/**\n * A higher-order function that returns a process to fetch descendant values\n * from the storage of block using an older RPC method.\n *\n * This function takes a `request` function as an argument, which is used to\n * make RPC calls. The returned function accepts a storage key (`rootKey`) and a\n * block hash (`at`) as inputs, as well as three callbacks:\n * 1. `onValues`: triggered when new values are retrieved.\n * 2. `onError`: triggered in case of an error during the operation.\n * 3. `onDone`: triggered when all values have been successfully fetched.\n *\n * The operation works by paginating through storage keys using\n * `state_getKeysPaged`\n * and fetching the corresponding values using `state_queryStorageAt`.\n * It runs in the background and supports stopping the operation early by\n * returning a callback function that, when invoked, cancels further processing.\n *\n * The flow of execution:\n * - The function continuously fetches storage keys in batches.\n * - For each batch, it fetches the descendant values at the specified block\n * hash.\n * - If an error occurs or the user cancels the operation, it stops fetching.\n * - The `onDone` callback is triggered when all the keys have been processed\n * and all ongoing value retrieval operations are completed.\n */\nconst getDescendantValuesFromOldRpc =\n  (\n    request: <T>(\n      method: string,\n      args: Array<any>,\n      onSuccess: (value: T) => void,\n      onError: (e: any) => void,\n    ) => void,\n  ) =>\n  (\n    rootKey: string,\n    at: string,\n    onValues: (input: Array<[string, string]>) => void,\n    onError: (e: any) => void,\n    onDone: () => void,\n  ): (() => void) => {\n    let isRunning = true\n    let areAllKeysDone = false\n    let onGoingValues = 0\n\n    const _onError = (e: any) => {\n      if (isRunning) {\n        isRunning = false\n        onError(e)\n      }\n    }\n\n    const PAGE_SIZE = 1000\n    const pullKeys = (startAtKey?: string) => {\n      request<string[]>(\n        \"state_getKeysPaged\",\n        [rootKey, PAGE_SIZE, startAtKey || undefined, at],\n        (result) => {\n          if (isRunning) {\n            if (result.length > 0) {\n              onGoingValues++\n              request<[{ block: string; changes: Array<[string, string]> }]>(\n                \"state_queryStorageAt\",\n                [result, at],\n                ([{ changes }]) => {\n                  if (isRunning) {\n                    onGoingValues--\n                    onValues(changes)\n                    if (areAllKeysDone && !onGoingValues) onDone()\n                  }\n                },\n                _onError,\n              )\n            }\n            if (result.length < PAGE_SIZE) {\n              areAllKeysDone = true\n              if (!onGoingValues) onDone()\n            } else pullKeys(result.at(-1))\n          }\n        },\n        _onError,\n      )\n    }\n    pullKeys()\n\n    return () => {\n      isRunning = false\n    }\n  }\n"],"names":["key"],"mappings":"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"}