{"version":3,"file":"fix-unordered-events.mjs","sources":["../../../src/parsed-enhancers/fix-unordered-events.ts"],"sourcesContent":["import type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { chainHead } from \"@/methods\"\n\nconst terminalOperationEvents = new Set(\n  [\"BodyDone\", \"CallDone\", \"StorageDone\", \"Inaccessible\", \"Error\"].map(\n    (x) => \"operation\" + x,\n  ),\n)\nconst isTerminalNotification = (msg: any): boolean =>\n  terminalOperationEvents.has(msg.params?.result?.event)\n\nexport const fixUnorderedEvents: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const pendingChainHeadSubs = new Set<string>()\n  const pendingOperationIds: Map<string, string> = new Map()\n\n  const activeOperationIds = new Map<string, Set<string>>()\n  const uknownOperationNotifications = new Map<\n    string,\n    Map<string, Array<any>>\n  >()\n\n  const { send: originalSend, disconnect } = base((message) => {\n    // it's a response\n    if (\"id\" in message) {\n      onMsg(message)\n      const { id, result } = message as unknown as {\n        id: string\n        result: string\n      }\n      if (pendingChainHeadSubs.has(id)) {\n        pendingChainHeadSubs.delete(id)\n        activeOperationIds.set(result, new Set())\n        uknownOperationNotifications.set(result, new Map())\n        return\n      }\n\n      const subId = pendingOperationIds.get(id)\n      if (subId !== undefined) {\n        pendingOperationIds.delete(id)\n        const opId = (message as any).result?.operationId\n        // it's possible that the limit has been reached... so we need to check\n        // it's also possible that the response came after an unfollow\n        if (opId !== undefined && activeOperationIds.has(subId)) {\n          const subOperations = activeOperationIds.get(subId)!\n          subOperations.add(opId)\n          const pendingNotifications = uknownOperationNotifications\n            .get(subId)\n            ?.get(opId)\n\n          if (pendingNotifications) {\n            pendingNotifications.forEach(onMsg)\n            uknownOperationNotifications.get(subId)!.delete(opId)\n            if (isTerminalNotification(pendingNotifications.at(-1)))\n              subOperations.delete(opId)\n          }\n        }\n      }\n    } else {\n      // it's a notification\n      const { subscription, result } = (message as any).params\n      const operationIds = activeOperationIds.get(subscription)\n      if (operationIds) {\n        const { operationId } = (message as any).params.result\n        if (operationId !== undefined) {\n          if (!operationIds.has(operationId)) {\n            // The operationId hasn't arrived yet\n            const subscriptionPending =\n              uknownOperationNotifications.get(subscription)!\n            const pendingMessages = subscriptionPending.get(operationId) ?? []\n            pendingMessages.push(message)\n            subscriptionPending.set(operationId, pendingMessages)\n            return\n          } else if (isTerminalNotification(message))\n            operationIds.delete(operationId)\n        } else if (result?.event === \"stop\") {\n          activeOperationIds.delete(subscription)\n          uknownOperationNotifications.delete(subscription)\n        }\n      }\n      onMsg(message)\n    }\n  })\n\n  const send = (msg: any) => {\n    const subId = msg.params[0]\n    switch (msg.method) {\n      case chainHead.follow:\n        pendingChainHeadSubs.add(msg.id)\n        break\n\n      case chainHead.body:\n      case chainHead.call:\n      case chainHead.storage:\n        pendingOperationIds.set(msg.id, subId)\n        break\n\n      case chainHead.unfollow:\n        activeOperationIds.delete(subId)\n        uknownOperationNotifications.delete(subId)\n        break\n\n      case chainHead.stopOperation:\n        activeOperationIds.get(subId)?.delete(msg.params[1])\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n"],"names":[],"mappings":"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"}