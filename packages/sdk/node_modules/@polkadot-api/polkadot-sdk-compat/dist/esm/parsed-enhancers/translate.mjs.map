{"version":3,"file":"translate.mjs","sources":["../../../src/parsed-enhancers/translate.ts"],"sourcesContent":["import { chainHead, chainSpec, transaction } from \"@/methods\"\nimport { ParsedJsonRpcEnhancer } from \"@/parsed\"\n\nconst jsonRpcMsg = <T extends {}>(msg: T) => ({\n  jsonrpc: \"2.0\",\n  ...msg,\n})\n\nconst [transactionGroup] = transaction.stop.split(\"_\")\nconst unstable = \"unstable\"\nconst rpcMethods = \"rpc_methods\"\nconst RPC_METHODS_ID = \"__INTERNAL_ID\"\n\nexport const translate: ParsedJsonRpcEnhancer = (base) => {\n  return (originalOnMsg) => {\n    let isRunning = true\n    let bufferedMsgs: Array<{ id: string; method: string; params: string }> = []\n\n    // It's possible (and very likely) that the consumer will start sending requests\n    // before we have figured out which are the actual methods that are available and\n    // how to translate them. So, the initial `_send` function just captures those received\n    // requests until it's able to \"translate\" them... At which point it will send all\n    // the buffered messages and then it will mutate the _send function with the one\n    // that it's able to transalte the requests\n    let _send = (msg: any) => {\n      bufferedMsgs.push(msg)\n    }\n\n    // originally the _onMsg function is wired up to receive the initial response to\n    // our internal rpc_methods request. Once it receives the response, then it applies\n    // the necessary transaltions and re-wires the _onMsg to the original one.\n    const preOnMsg: (msg: any) => void = ({\n      id,\n      result,\n      error,\n    }: {\n      id: string\n      result: { methods: string[] } | undefined\n      error: any\n    }) => {\n      if (id !== RPC_METHODS_ID || !isRunning) return\n\n      // it's an error, let's try again\n      if (!result) {\n        console.error(error)\n        if (nTries < 4) {\n          setTimeout(sendMethodsRequest, 200)\n          return\n        }\n        // simplest way to propagate the error\n        result = { methods: [] }\n      }\n\n      const methodsSet = new Set(result.methods)\n      const methodMappings: Record<string, string | null> = {}\n\n      ;[chainHead, chainSpec, transaction].forEach((obj) => {\n        Object.values(obj).forEach((method) => {\n          if (methodsSet.has(method)) {\n            methodMappings[method] = method\n          } else {\n            const [group, , name] = method.split(\"_\")\n            const unstableMethod = `${group}_${unstable}_${name}`\n\n            if (methodsSet.has(unstableMethod)) {\n              methodMappings[method] = unstableMethod\n              methodsSet.delete(unstableMethod)\n              methodsSet.add(method)\n            } else {\n              methodMappings[method] = null\n              if (group === transactionGroup) {\n                let matchedMethod: string\n                const translatedMethod =\n                  method === \"stop\" ? \"unwatch\" : \"submitAndWatch\"\n                const txGroup = [\n                  transactionGroup + \"Watch\",\n                  transactionGroup,\n                ].find((group) =>\n                  [\"v1\", unstable].find((v) =>\n                    methodsSet.has(\n                      (matchedMethod = `${group}_${v}_${translatedMethod}`),\n                    ),\n                  ),\n                )\n                if (txGroup) {\n                  methodMappings[method] = matchedMethod!\n                  methodsSet.add(method)\n                }\n              }\n            }\n          }\n        })\n      })\n\n      _onMsg = originalOnMsg\n      const enhancedSend = ({\n        method,\n        ...rest\n      }: {\n        method: string\n        id: string\n      }) => {\n        if (method === rpcMethods) {\n          Promise.resolve().then(() => {\n            originalOnMsg(\n              jsonRpcMsg({\n                id: rest.id,\n                result: { methods: [...methodsSet] },\n              }),\n            )\n          })\n          return\n        }\n\n        const mapping = methodMappings[method]\n        if (mapping === null) {\n          if (method.split(\"_\")[2] === \"follow\") {\n            reset()\n            _send({ method, ...rest } as any)\n          } else {\n            Promise.resolve().then(() => {\n              originalOnMsg({\n                error: { code: -32603, message: `Method not found: ${method}` },\n                id: rest.id,\n              })\n            })\n          }\n        } else\n          originalSend({\n            method: mapping || method,\n            ...rest,\n          })\n      }\n\n      const bufferCopy = [...bufferedMsgs]\n      bufferedMsgs = []\n      for (let i = 0; isRunning && i < bufferCopy.length; i++)\n        enhancedSend(bufferCopy[i])\n      if (isRunning) _send = enhancedSend\n    }\n    let _onMsg = preOnMsg\n\n    const { send: originalSend, disconnect } = base((msg: any) => {\n      _onMsg(msg)\n    })\n    const reset = () => {\n      isRunning = true\n      bufferedMsgs = []\n      _send = (msg: any) => {\n        bufferedMsgs.push(msg)\n      }\n      _onMsg = preOnMsg\n      sendMethodsRequest()\n    }\n\n    let nTries = 0\n    const sendMethodsRequest = () => {\n      nTries++\n      originalSend(\n        jsonRpcMsg({\n          id: RPC_METHODS_ID,\n          method: rpcMethods,\n          params: [],\n        }),\n      )\n    }\n    sendMethodsRequest()\n\n    return {\n      send: (msg) => {\n        _send(msg)\n      },\n      disconnect() {\n        isRunning = false\n        _send = _onMsg = () => {}\n        bufferedMsgs = []\n        disconnect()\n      },\n    }\n  }\n}\n"],"names":["group"],"mappings":"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"}