{"version":3,"file":"fix-unordered-blocks.mjs","sources":["../../../src/parsed-enhancers/fix-unordered-blocks.ts"],"sourcesContent":["import type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { chainHead } from \"@/methods\"\n\ninterface InitializedRpc {\n  event: \"initialized\"\n  finalizedBlockHashes: string[]\n}\n\ninterface NewBlockRpc {\n  event: \"newBlock\"\n  blockHash: string\n  parentBlockHash: string\n}\n\ninterface BestBlockChangedRpc {\n  event: \"bestBlockChanged\"\n  bestBlockHash: string\n}\n\ninterface FinalizedRpc {\n  event: \"finalized\"\n  finalizedBlockHashes: Array<string>\n  prunedBlockHashes: Array<string>\n}\n\nexport interface StopRpc {\n  event: \"stop\"\n}\n\ntype FollowEvent =\n  | InitializedRpc\n  | NewBlockRpc\n  | BestBlockChangedRpc\n  | FinalizedRpc\n  | StopRpc\n\nexport const fixUnorderedBlocks: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const pendingChainHeadSubs = new Set<string>()\n  const pinnedBlocksInSub = new Map<string, Set<string>>()\n  const uknownBlocksNotifications = new Map<string, Map<string, any>>()\n\n  const { send: originalSend, disconnect } = base((message) => {\n    // it's a response\n    if (\"id\" in message) {\n      onMsg(message)\n      const { id, result } = message as unknown as {\n        id: string\n        result: string\n      }\n\n      if (pendingChainHeadSubs.has(id)) {\n        pendingChainHeadSubs.delete(id)\n        pinnedBlocksInSub.set(result, new Set())\n        uknownBlocksNotifications.set(result, new Map())\n        return\n      }\n    } else {\n      // it's a notification\n      const { subscription } = (message as any).params\n      const pinnedBlocks = pinnedBlocksInSub.get(subscription)\n      const premature = uknownBlocksNotifications.get(subscription)!\n      if (pinnedBlocks) {\n        const result = (message as any).params.result as FollowEvent\n        const { event } = result\n        if (event === \"initialized\") {\n          result.finalizedBlockHashes.forEach((hash) => {\n            pinnedBlocks.add(hash)\n          })\n        }\n\n        if (event === \"finalized\") {\n          result.prunedBlockHashes = result.prunedBlockHashes.filter((x) =>\n            pinnedBlocks.has(x),\n          )\n        }\n\n        if (event === \"newBlock\") {\n          pinnedBlocks.add(result.blockHash)\n          const hash = result.blockHash\n          const missing = premature.get(hash)\n          if (missing) {\n            premature.delete(hash)\n            onMsg(message)\n            Promise.resolve().then(() => {\n              onMsg(missing)\n            })\n            return\n          }\n        }\n\n        if (event === \"bestBlockChanged\") {\n          const hash = result.bestBlockHash\n          if (!pinnedBlocks.has(hash)) {\n            uknownBlocksNotifications.get(subscription)!.set(hash, message)\n            return\n          }\n        }\n\n        if (event === \"stop\") {\n          pinnedBlocks.delete(subscription)\n          uknownBlocksNotifications.delete(subscription)\n        }\n      }\n      onMsg(message)\n    }\n  })\n\n  const send = (msg: any) => {\n    const subId = msg.params[0]\n    switch (msg.method) {\n      case chainHead.follow:\n        pendingChainHeadSubs.add(msg.id)\n        break\n\n      case chainHead.unpin:\n        const [subscription, blocks] = msg.params as [string, string[]]\n        blocks.forEach((block) => {\n          pinnedBlocksInSub.get(subscription)?.delete(block)\n          uknownBlocksNotifications.get(subscription)?.delete(block)\n        })\n        break\n\n      case chainHead.unfollow:\n        pinnedBlocksInSub.delete(subId)\n        uknownBlocksNotifications.delete(subId)\n        break\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n"],"names":[],"mappings":"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"}