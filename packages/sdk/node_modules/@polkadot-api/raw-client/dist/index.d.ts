import { JsonRpcProvider } from '@polkadot-api/json-rpc-provider';

interface IRpcError {
    code: number;
    message: string;
    data?: any;
}
declare class RpcError extends Error implements IRpcError {
    code: number;
    data: any;
    constructor(e: IRpcError);
}

interface Subscriber<T> {
    next: (data: T) => void;
    error: (e: Error) => void;
}
declare const getSubscriptionsManager: <T>() => {
    has: (key: string) => boolean;
    subscribe(id: string, subscriber: Subscriber<T>): void;
    unsubscribe(id: string): void;
    next(id: string, data: T): void;
    error(id: string, e: Error): void;
    errorAll(e: Error): void;
};
type SubscriptionManager<T> = ReturnType<typeof getSubscriptionsManager<T>>;

type UnsubscribeFn = () => void;
type FollowSubscriptionCb<T> = (subscriptionId: string, cb: Subscriber<T>) => UnsubscribeFn;
type ClientRequestCb<T, TT> = {
    onSuccess: (result: T, followSubscription: FollowSubscriptionCb<TT>) => void;
    onError: (e: Error) => void;
};
type ClientRequest<T, TT> = (method: string, params: Array<any>, cb?: ClientRequestCb<T, TT>) => UnsubscribeFn;
interface Client {
    disconnect: () => void;
    request: ClientRequest<any, any>;
}
declare const createClient: (gProvider: JsonRpcProvider) => Client;

declare class DestroyedError extends Error {
    constructor();
}

export { DestroyedError, RpcError, createClient, getSubscriptionsManager };
export type { Client, ClientRequest, ClientRequestCb, FollowSubscriptionCb, IRpcError, Subscriber, SubscriptionManager };
