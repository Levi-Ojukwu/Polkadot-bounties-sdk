{"version":3,"file":"index.js","sources":["../src/RpcError.ts","../src/subscriptions-manager.ts","../src/DestroyedError.ts","../src/createClient.ts"],"sourcesContent":["export interface IRpcError {\n  code: number\n  message: string\n  data?: any\n}\n\nexport class RpcError extends Error implements IRpcError {\n  code\n  data\n  constructor(e: IRpcError) {\n    super(e.message)\n    this.code = e.code\n    this.data = e.data\n    this.name = \"RpcError\"\n  }\n}\n","export interface Subscriber<T> {\n  next: (data: T) => void\n  error: (e: Error) => void\n}\n\nexport const getSubscriptionsManager = <T>() => {\n  const subscriptions = new Map<string, Subscriber<T>>()\n\n  return {\n    has: subscriptions.has.bind(subscriptions),\n    subscribe(id: string, subscriber: Subscriber<T>) {\n      subscriptions.set(id, subscriber)\n    },\n    unsubscribe(id: string) {\n      subscriptions.delete(id)\n    },\n    next(id: string, data: T) {\n      subscriptions.get(id)?.next(data)\n    },\n    error(id: string, e: Error) {\n      const subscriber = subscriptions.get(id)\n      if (subscriber) {\n        subscriptions.delete(id)\n        subscriber.error(e)\n      }\n    },\n    errorAll(e: Error) {\n      const subscribers = [...subscriptions.values()]\n      subscriptions.clear()\n      subscribers.forEach((s) => {\n        s.error(e)\n      })\n    },\n  }\n}\n\nexport type SubscriptionManager<T> = ReturnType<\n  typeof getSubscriptionsManager<T>\n>\n","export class DestroyedError extends Error {\n  constructor() {\n    super(\"Client destroyed\")\n    this.name = \"DestroyedError\"\n  }\n}\n","import type {\n  JsonRpcConnection,\n  JsonRpcProvider,\n} from \"@polkadot-api/json-rpc-provider\"\nimport { RpcError, IRpcError } from \"./RpcError\"\nimport { getSubscriptionsManager, Subscriber } from \"./subscriptions-manager\"\nimport { DestroyedError } from \"./DestroyedError\"\n\ntype UnsubscribeFn = () => void\nexport type FollowSubscriptionCb<T> = (\n  subscriptionId: string,\n  cb: Subscriber<T>,\n) => UnsubscribeFn\n\nexport type ClientRequestCb<T, TT> = {\n  onSuccess: (result: T, followSubscription: FollowSubscriptionCb<TT>) => void\n  onError: (e: Error) => void\n}\n\nexport type ClientRequest<T, TT> = (\n  method: string,\n  params: Array<any>,\n  cb?: ClientRequestCb<T, TT>,\n) => UnsubscribeFn\n\nexport interface Client {\n  disconnect: () => void\n  request: ClientRequest<any, any>\n}\n\nlet nextClientId = 1\nexport const createClient = (gProvider: JsonRpcProvider): Client => {\n  let clientId = nextClientId++\n  const responses = new Map<string, ClientRequestCb<any, any>>()\n  const subscriptions = getSubscriptionsManager()\n\n  let connection: JsonRpcConnection | null = null\n\n  const send = (\n    id: string,\n    method: string,\n    params: Array<boolean | string | number | null>,\n  ) => {\n    connection!.send(\n      JSON.stringify({\n        jsonrpc: \"2.0\",\n        id,\n        method,\n        params,\n      }),\n    )\n  }\n\n  function onMessage(message: string): void {\n    try {\n      let id: string,\n        result,\n        error: IRpcError | undefined,\n        params: { subscription: any; result: any; error?: IRpcError },\n        subscription: string\n\n      const parsed = JSON.parse(message)\n      ;({ id, result, error, params } = parsed)\n\n      if (id === null) throw new Error(params?.error?.message ?? \"id null\")\n\n      if (id != null) {\n        const cb = responses.get(id)\n        if (!cb) return\n\n        responses.delete(id)\n\n        return error\n          ? cb.onError(new RpcError(error))\n          : cb.onSuccess(result, (opaqueId, subscriber) => {\n              const subscriptionId = opaqueId\n              subscriptions.subscribe(subscriptionId, subscriber)\n              return () => {\n                subscriptions.unsubscribe(subscriptionId)\n              }\n            })\n      }\n\n      // at this point, it means that it should be a notification\n      ;({ subscription, result, error } = params)\n      if (!subscription || (!error && !Object.hasOwn(params, \"result\"))) throw 0\n\n      const subscriptionId = subscription\n\n      if (error) {\n        subscriptions.error(subscriptionId, new RpcError(error!))\n      } else {\n        subscriptions.next(subscriptionId, result)\n      }\n    } catch (e) {\n      console.warn(\"Error parsing incomming message: \" + message)\n      console.error(e)\n    }\n  }\n  connection = gProvider(onMessage)\n\n  const disconnect = () => {\n    connection?.disconnect()\n    connection = null\n    subscriptions.errorAll(new DestroyedError())\n    responses.forEach((r) => r.onError(new DestroyedError()))\n    responses.clear()\n  }\n\n  let nextId = 1\n  const request = <T, TT>(\n    method: string,\n    params: Array<any>,\n    cb?: ClientRequestCb<T, TT>,\n  ): UnsubscribeFn => {\n    if (!connection) throw new Error(\"Not connected\")\n    const id = `${clientId}-${nextId++}`\n\n    if (cb) responses.set(id, cb)\n    send(id, method, params)\n\n    return (): void => {\n      responses.delete(id)\n    }\n  }\n\n  return {\n    request,\n    disconnect,\n  }\n}\n"],"names":["subscriptionId"],"mappings":"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"}