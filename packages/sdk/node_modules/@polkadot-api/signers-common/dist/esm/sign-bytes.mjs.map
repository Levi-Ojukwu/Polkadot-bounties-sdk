{"version":3,"file":"sign-bytes.mjs","sources":["../../src/sign-bytes.ts"],"sourcesContent":["import { Binary } from \"@polkadot-api/substrate-bindings\"\nimport { mergeUint8 } from \"@polkadot-api/utils\"\n\nconst [preBytes, postBytes] = [\"<Bytes>\", \"</Bytes>\"].map((str) =>\n  Binary.fromText(str).asBytes(),\n)\n\nexport const getSignBytes =\n  (sign: (x: Uint8Array) => Uint8Array | Promise<Uint8Array>) =>\n  async (data: Uint8Array): Promise<Uint8Array> => {\n    let isPadded = true\n    let i: number\n\n    for (i = 0; isPadded && i < preBytes.length; i++)\n      isPadded = preBytes[i] === data[i]\n    isPadded = isPadded && i === preBytes.length\n\n    const postDataStart = data.length - postBytes.length\n    for (i = 0; isPadded && i < postBytes.length; i++)\n      isPadded = postBytes[i] === data[postDataStart + i]\n    isPadded = isPadded && i === postBytes.length\n\n    return sign(isPadded ? data : mergeUint8([preBytes, data, postBytes]))\n  }\n"],"names":[],"mappings":";;;AAGA,MAAM,CAAC,QAAA,EAAU,SAAS,IAAI,CAAC,SAAA,EAAW,UAAU,CAAA,CAAE,GAAA;AAAA,EAAI,CAAC,GAAA,KACzD,MAAA,CAAO,QAAA,CAAS,GAAG,EAAE,OAAA;AACvB,CAAA;AAEO,MAAM,YAAA,GACX,CAAC,IAAA,KACD,OAAO,IAAA,KAA0C;AAC/C,EAAA,IAAI,QAAA,GAAW,IAAA;AACf,EAAA,IAAI,CAAA;AAEJ,EAAA,KAAK,CAAA,GAAI,CAAA,EAAG,QAAA,IAAY,CAAA,GAAI,SAAS,MAAA,EAAQ,CAAA,EAAA;AAC3C,IAAA,QAAA,GAAW,QAAA,CAAS,CAAC,CAAA,KAAM,IAAA,CAAK,CAAC,CAAA;AACnC,EAAA,QAAA,GAAW,QAAA,IAAY,MAAM,QAAA,CAAS,MAAA;AAEtC,EAAA,MAAM,aAAA,GAAgB,IAAA,CAAK,MAAA,GAAS,SAAA,CAAU,MAAA;AAC9C,EAAA,KAAK,CAAA,GAAI,CAAA,EAAG,QAAA,IAAY,CAAA,GAAI,UAAU,MAAA,EAAQ,CAAA,EAAA;AAC5C,IAAA,QAAA,GAAW,SAAA,CAAU,CAAC,CAAA,KAAM,IAAA,CAAK,gBAAgB,CAAC,CAAA;AACpD,EAAA,QAAA,GAAW,QAAA,IAAY,MAAM,SAAA,CAAU,MAAA;AAEvC,EAAA,OAAO,IAAA,CAAK,WAAW,IAAA,GAAO,UAAA,CAAW,CAAC,QAAA,EAAU,IAAA,EAAM,SAAS,CAAC,CAAC,CAAA;AACvE;;;;"}