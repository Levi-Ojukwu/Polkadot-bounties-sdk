{"version":3,"file":"v4.mjs","sources":["../../src/v4.ts"],"sourcesContent":["import {\n  compact,\n  extrinsicFormat,\n  UnifiedMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { mergeUint8 } from \"@polkadot-api/utils\"\nimport { getLookupFn, LookupEntry } from \"@polkadot-api/metadata-builders\"\n\nconst enum SignerType {\n  Polkadot,\n  Ethereum,\n}\nconst unkownSignerType = () => new Error(\"Unkown signer\")\nconst getSignerType = (\n  metadata: UnifiedMetadata,\n): [SignerType, [] | [number]] => {\n  const { extrinsic } = metadata\n  const getLookup = getLookupFn(metadata)\n  let address: LookupEntry\n  let signature: LookupEntry\n  if (\"address\" in extrinsic) {\n    address = getLookup(extrinsic.address)\n    signature = getLookup(extrinsic.signature)\n  } else {\n    const extProps = Object.fromEntries(\n      metadata.lookup[extrinsic.type].params\n        .filter((x) => x.type != null)\n        .map((x) => [x.name, getLookup(x.type!)]),\n    )\n    address = extProps[\"Address\"]\n    signature = extProps[\"Signature\"]\n    if (!address || !signature) throw unkownSignerType()\n  }\n\n  if (\n    address.type === \"AccountId20\" &&\n    signature.type === \"array\" &&\n    signature.len === 65 &&\n    signature.value.type === \"primitive\" &&\n    signature.value.value === \"u8\"\n  )\n    return [SignerType.Ethereum, []]\n\n  if (\n    signature.type !== \"enum\" ||\n    [\"Ecdsa\", \"Ed25519\", \"Sr25519\"].some((x) => !(x in signature.value))\n  )\n    throw unkownSignerType()\n\n  if (address.type === \"enum\") {\n    const id = address.value[\"Id\"]\n    if (id.type === \"lookupEntry\" && id.value.type === \"AccountId32\")\n      return [SignerType.Polkadot, [id.idx]]\n  } else if (address.type === \"AccountId32\") return [SignerType.Polkadot, []]\n  throw unkownSignerType()\n}\n\nconst signingTypeId: Record<\"Ecdsa\" | \"Ed25519\" | \"Sr25519\", number> = {\n  Ed25519: 0,\n  Sr25519: 1,\n  Ecdsa: 2,\n}\n\nexport const createV4Tx = (\n  metadata: UnifiedMetadata,\n  publicKey: Uint8Array,\n  signed: Uint8Array,\n  extra: Uint8Array[],\n  callData: Uint8Array,\n  signingType?: \"Ecdsa\" | \"Ed25519\" | \"Sr25519\",\n) => {\n  const [signerType, addressPrefix] = getSignerType(metadata)\n  const preResult = mergeUint8([\n    extrinsicFormat.enc({ version: 4, type: \"signed\" }),\n    // converting it to a `MultiAddress` enum, where the index 0 is `Id(AccountId)`\n    signerType === SignerType.Ethereum\n      ? publicKey\n      : new Uint8Array([...addressPrefix, ...publicKey]),\n    signerType === SignerType.Ethereum || !signingType\n      ? signed\n      : new Uint8Array([signingTypeId[signingType], ...signed]),\n    ...extra,\n    callData,\n  ])\n  return mergeUint8([compact.enc(preResult.length), preResult])\n}\n"],"names":[],"mappings":"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"}