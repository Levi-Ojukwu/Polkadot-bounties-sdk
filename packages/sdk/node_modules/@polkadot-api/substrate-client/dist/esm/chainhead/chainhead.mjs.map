{"version":3,"file":"chainhead.mjs","sources":["../../../src/chainhead/chainhead.ts"],"sourcesContent":["import {\n  DestroyedError,\n  Subscriber,\n  getSubscriptionsManager,\n  ClientRequest,\n  FollowSubscriptionCb,\n} from \"@polkadot-api/raw-client\"\nimport type {\n  FollowEventWithRuntimeRpc,\n  FollowEventWithoutRuntimeRpc,\n  OperationEventsRpc,\n  StopRpc,\n} from \"./json-rpc-types\"\nimport type {\n  ChainHead,\n  ClientInnerRequest,\n  FollowEventWithoutRuntime,\n  FollowEventWithRuntime,\n  FollowResponse,\n} from \"./public-types\"\nimport { noop, deferred } from \"@/internal-utils\"\nimport { createBodyFn } from \"./body\"\nimport { createCallFn } from \"./call\"\nimport { createHeaderFn } from \"./header\"\nimport { createStorageFn } from \"./storage\"\nimport { createUnpinFn } from \"./unpin\"\nimport { DisjointError, StopError } from \"./errors\"\nimport { createStorageCb } from \"./storage-subscription\"\nimport { chainHead } from \"@/methods\"\n\ntype FollowEventRpc =\n  | FollowEventWithRuntimeRpc\n  | FollowEventWithoutRuntimeRpc\n  | OperationEventsRpc\n  | StopRpc\n\nfunction isOperationEvent(event: FollowEventRpc): event is OperationEventsRpc {\n  return (event as OperationEventsRpc).operationId !== undefined\n}\n\nexport function getChainHead(\n  request: ClientRequest<string, FollowEventRpc>,\n): ChainHead {\n  return (\n    withRuntime: boolean,\n    onFollowEvent:\n      | ((event: FollowEventWithoutRuntime) => void)\n      | ((event: FollowEventWithRuntime) => void),\n    onFollowError: (e: Error) => void,\n  ): FollowResponse => {\n    const subscriptions = getSubscriptionsManager<OperationEventsRpc>()\n    const ongoingRequests = new Set<() => void>()\n    const deferredFollow = deferred<string | Error>()\n    // If it's:\n    // - a (deferred)`Promise`: it means that the susbscription is active AND that the response to the follow request has not been resolved\n    // - a `string`: it means that the subscription is active and that the response to the follow request has been successful.\n    // - `null`: it means that the subscription is inactive (for whatever reason: error or unsubscription)\n    let followSubscription: Promise<string | Error> | string | null =\n      deferredFollow.promise\n\n    let stopListeningToFollowEvents = noop\n    const unfollowRequest = (subscriptionId: string) => {\n      request(chainHead.unfollow, [subscriptionId])\n    }\n\n    const stopEverything = (sendUnfollow: boolean) => {\n      stopListeningToFollowEvents()\n      // if it's `null` it means that everything has already been stopped\n      if (followSubscription === null) return\n\n      if (sendUnfollow) {\n        if (followSubscription instanceof Promise) {\n          followSubscription.then((x) => {\n            if (typeof x === \"string\") unfollowRequest(x)\n          })\n        } else unfollowRequest(followSubscription)\n      }\n      followSubscription = null\n      ongoingRequests.forEach((cb) => {\n        cb()\n      })\n      ongoingRequests.clear()\n      subscriptions.errorAll(new DisjointError())\n    }\n\n    const onAllFollowEventsNext = (event: FollowEventRpc) => {\n      if (isOperationEvent(event))\n        return subscriptions.next(event.operationId, event)\n\n      switch (event.event) {\n        case \"stop\":\n          onFollowError(new StopError())\n          return stopEverything(false)\n        case \"initialized\":\n        case \"newBlock\":\n        case \"bestBlockChanged\":\n        case \"finalized\":\n          const { event: type, ...rest } = event\n          return onFollowEvent({ type, ...rest } as any)\n      }\n    }\n\n    const onAllFollowEventsError = (error: Error) => {\n      onFollowError(error)\n      stopEverything(!(error instanceof DestroyedError))\n    }\n\n    request(chainHead.follow, [withRuntime], {\n      onSuccess: (\n        subscriptionId: string,\n        follow: FollowSubscriptionCb<FollowEventRpc>,\n      ) => {\n        // If the consumer has unsubscribed in between, then it will be `null`\n        // and it should stay that way\n        if (followSubscription instanceof Promise) {\n          followSubscription = subscriptionId\n          stopListeningToFollowEvents = follow(subscriptionId, {\n            next: onAllFollowEventsNext,\n            error: onAllFollowEventsError,\n          })\n        }\n        deferredFollow.res(subscriptionId)\n      },\n      onError: (e: Error) => {\n        followSubscription = null\n        deferredFollow.res(e)\n        onFollowError(e)\n      },\n    })\n\n    const fRequest: ClientInnerRequest<any, any> = (method, params, cb) => {\n      const disjoint = () => {\n        cb?.onError(new DisjointError())\n      }\n\n      if (followSubscription === null) {\n        disjoint()\n        return noop\n      }\n\n      const onSubscription = (subscription: string) => {\n        if (!cb) return request(method, [subscription, ...params])\n\n        ongoingRequests.add(disjoint)\n\n        const onSubscribeOperation = (\n          operationId: string,\n          subscriber: Subscriber<any>,\n        ) => {\n          if (followSubscription === null) {\n            subscriber.error(new DisjointError())\n            return noop\n          }\n\n          subscriptions.subscribe(operationId, subscriber)\n\n          return () => {\n            subscriptions.unsubscribe(operationId)\n          }\n        }\n\n        const cleanup = request(method, [subscription, ...params], {\n          onSuccess: (response) => {\n            ongoingRequests.delete(disjoint)\n            cb.onSuccess(response, onSubscribeOperation)\n          },\n          onError: (e) => {\n            ongoingRequests.delete(disjoint)\n            cb.onError(e)\n          },\n        })\n\n        return () => {\n          ongoingRequests.delete(disjoint)\n          cleanup()\n        }\n      }\n\n      if (typeof followSubscription === \"string\")\n        return onSubscription(followSubscription)\n\n      let onCancel = noop\n      followSubscription.then((x) => {\n        if (x instanceof Error) return disjoint()\n        if (followSubscription) onCancel = onSubscription(x)\n      })\n\n      return () => {\n        onCancel()\n      }\n    }\n\n    return {\n      unfollow() {\n        stopEverything(true)\n      },\n      body: createBodyFn(fRequest),\n      call: createCallFn(fRequest),\n      header: createHeaderFn(fRequest),\n      storage: createStorageFn(fRequest),\n      storageSubscription: createStorageCb(fRequest),\n      unpin: createUnpinFn(fRequest),\n      _request: fRequest,\n    }\n  }\n}\n"],"names":[],"mappings":"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"}