{"version":3,"file":"get-lookup.mjs","sources":["../../src/get-lookup.ts"],"sourcesContent":["import { denormalizeLookup, LookupEntry } from \"@polkadot-api/metadata-builders\"\nimport { Binary, V14Lookup, v14Lookup } from \"@polkadot-api/substrate-bindings\"\nimport { InkMetadata, Layout } from \"./metadata-types\"\nimport { pjsTypes } from \"./metadata-pjs-types\"\n\nexport interface InkMetadataLookup {\n  (id: number): LookupEntry\n  metadata: InkMetadata\n  storage: StorageLayout\n}\n\nexport interface StorageEntryPoint {\n  keyPrefix: string\n  key: number | null\n  typeId: number\n}\n\nexport type StorageLayout = Record<string, StorageEntryPoint>\n\nexport const getInkLookup = (metadata: InkMetadata): InkMetadataLookup => {\n  // We can reuse dynamic-builder's lookup if we encode and re-decode the type\n  // into V14Lookup, because both v14 metadata lookup and ink types use scale-info\n  const encoded = pjsTypes.enc(metadata.types)\n  const decoded = v14Lookup.dec(encoded)\n\n  // Signal the lookup the AccountId type\n  const accountTypeId = metadata.spec.environment.accountId.type\n  const accountIdEntry = decoded.find((e) => e.id === accountTypeId)\n  if (accountIdEntry) {\n    accountIdEntry.path = [\"AccountId32\"]\n  }\n\n  const storage = getStorageLayout(metadata, decoded)\n  const getLookupEntryDef = denormalizeLookup(decoded)\n\n  return Object.assign(getLookupEntryDef, {\n    metadata,\n    lookup: decoded,\n    storage,\n  })\n}\n\nfunction getStorageLayout(metadata: InkMetadata, lookup: V14Lookup) {\n  const result: StorageLayout = {}\n\n  const readLayout = (node: Layout, path: string[] = []): number | null => {\n    function addType(def: V14Lookup[number][\"def\"]) {\n      const id = lookup.length\n      lookup[id] = {\n        id,\n        docs: [],\n        def,\n        params: [],\n        path: [],\n      }\n      return id\n    }\n\n    if (\"root\" in node) {\n      // On version 4-, the keys in the storage were in big-endian.\n      // For version 5+, the keys in storage are in scale, which is little-endian.\n      // https://use.ink/faq/migrating-from-ink-4-to-5#metadata-storage-keys-encoding-change\n      // https://github.com/use-ink/ink/pull/2048\n      const keyPrefix =\n        Number(metadata.version) === 4\n          ? Binary.fromBytes(\n              Binary.fromHex(node.root.root_key).asBytes().reverse(),\n            ).asHex()\n          : node.root.root_key\n\n      const typeId = readLayout(node.root.layout, path)!\n      if (node.root.ty != null) {\n        function resolveType(id: number, path: string[]) {\n          const type = metadata.types[id].type\n\n          // A vector internally uses a Mapping, but we have to get it\n          const fields =\n            \"composite\" in type.def\n              ? new Map(\n                  (type.def.composite.fields ?? []).map((v) => [\n                    v.name,\n                    v.type,\n                  ]),\n                )\n              : null\n          const params = new Map(\n            (type.params ?? []).map((v) => [v.name, v.type]),\n          )\n\n          if (\n            params.size === 2 &&\n            params.has(\"V\") &&\n            fields &&\n            fields.size === 2 &&\n            fields.has(\"len\") &&\n            fields.has(\"elements\")\n          ) {\n            // Vectors have length and elements as different entry points\n            resolveType(fields.get(\"len\")!, [...path, \"len\"])\n            resolveType(fields.get(\"elements\")!, path)\n            return\n          } else if (params.size === 3 && params.has(\"K\") && params.has(\"V\")) {\n            // Mapping\n            result[path.join(\".\")] = {\n              keyPrefix,\n              key: params.get(\"K\")!,\n              typeId: params.get(\"V\")!,\n            }\n          } else if (params.size === 2 && params.has(\"V\")) {\n            // Lazy\n            result[path.join(\".\")] = {\n              keyPrefix,\n              key: null,\n              typeId: params.get(\"V\")!,\n            }\n          }\n        }\n        resolveType(node.root.ty, path)\n      }\n\n      if (!result[path.join(\".\")]) {\n        result[path.join(\".\")] = {\n          keyPrefix,\n          key: null,\n          typeId,\n        }\n      }\n\n      // Anyone addressing this node will encounter an empty type\n      return addType({\n        tag: \"composite\",\n        value: [],\n      })\n    }\n    if (\"leaf\" in node) {\n      return node.leaf.ty\n    }\n    if (\"hash\" in node) {\n      throw new Error(\"HashLayout not implemented\")\n    }\n    if (\"array\" in node) {\n      const inner = readLayout(node.array.layout, path)\n\n      return inner == null\n        ? null\n        : addType({\n            tag: \"array\",\n            value: {\n              len: node.array.len,\n              type: inner,\n            },\n          })\n    }\n    if (\"struct\" in node) {\n      const inner = node.struct.fields\n        .map((field) => ({\n          name: field.name,\n          type: readLayout(field.layout, [...path, field.name])!,\n          typeName: undefined,\n          docs: [],\n        }))\n        .filter((field) => field.type != null)\n\n      return addType({\n        tag: \"composite\",\n        value: inner,\n      })\n    }\n\n    const inner = Object.values(node.enum.variants).map((variant, index) => ({\n      name: variant.name,\n      fields: variant.fields\n        .map((field) => ({\n          name: field.name,\n          type: readLayout(field.layout, [...path, variant.name, field.name])!,\n          typeName: undefined,\n          docs: [],\n        }))\n        .filter((v) => v.type !== null),\n      index,\n      docs: [],\n    }))\n\n    return addType({\n      tag: \"variant\",\n      value: inner,\n    })\n  }\n  readLayout(metadata.storage)\n\n  return result\n}\n"],"names":["resolveType","path","inner"],"mappings":"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"}