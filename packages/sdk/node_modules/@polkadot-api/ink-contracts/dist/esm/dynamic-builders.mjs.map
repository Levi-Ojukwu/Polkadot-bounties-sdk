{"version":3,"file":"dynamic-builders.mjs","sources":["../../src/dynamic-builders.ts"],"sourcesContent":["import { getLookupCodecBuilder } from \"@polkadot-api/metadata-builders\"\nimport { Binary, Variant } from \"@polkadot-api/substrate-bindings\"\nimport {\n  _void,\n  Bytes,\n  Codec,\n  CodecType,\n  createCodec,\n  enhanceCodec,\n  StringRecord,\n  Struct,\n  Tuple,\n} from \"@polkadot-api/substrate-bindings\"\nimport { InkMetadataLookup } from \"./get-lookup\"\nimport {\n  EventParamSpec,\n  EventSpecV5,\n  MessageParamSpec,\n  TypeSpec,\n} from \"./metadata-types\"\n\nexport const getInkDynamicBuilder = (metadataLookup: InkMetadataLookup) => {\n  const { metadata } = metadataLookup\n\n  const buildDefinition = getLookupCodecBuilder(metadataLookup)\n\n  const buildStorage = (name = \"\") => {\n    const storageEntry = metadataLookup.storage[name]\n    if (!storageEntry)\n      throw new Error(`Storage entry ${name ? name : \"{root}\"} not found`)\n\n    const keyCodec =\n      storageEntry.key == null ? _void : buildDefinition(storageEntry.key)\n    return {\n      key: prependBytes(keyCodec, storageEntry.keyPrefix),\n      value: buildDefinition(storageEntry.typeId),\n    }\n  }\n\n  const buildCallable = (callable: {\n    selector: string\n    args: Array<MessageParamSpec>\n    returnType: TypeSpec\n  }) => {\n    const argsCodec = Struct(\n      Object.fromEntries(\n        callable.args.map((param) => [\n          param.label,\n          buildDefinition(param.type.type),\n        ]),\n      ) as StringRecord<Codec<any>>,\n    )\n\n    return {\n      call: prependBytes(argsCodec, callable.selector),\n      value: buildDefinition(callable.returnType.type),\n    }\n  }\n\n  const buildConstructor = (label: string) => {\n    const constr = metadata.spec.constructors.find((c) => c.label === label)\n    if (!constr) {\n      throw new Error(`Constructor ${label} not found`)\n    }\n\n    return buildCallable(constr)\n  }\n\n  const buildMessage = (label: string) => {\n    const message = metadata.spec.messages.find((c) => c.label === label)\n    if (!message) {\n      throw new Error(`Message ${label} not found`)\n    }\n\n    return buildCallable(message)\n  }\n\n  const buildEventCodec = (event: { args: EventParamSpec[] }) =>\n    Struct(\n      Object.fromEntries(\n        event.args.map((param) => [\n          param.label,\n          buildDefinition(param.type.type),\n        ]),\n      ) as StringRecord<Codec<any>>,\n    )\n\n  const buildEvent = (signatureTopic: string | undefined) => {\n    const events = metadata.spec.events as EventSpecV5[]\n\n    const withType = <T>(codec: Codec<T>, type: string) =>\n      enhanceCodec<T, { type: string; value: T }>(\n        codec,\n        (evt) => evt.value,\n        (value) => ({ type, value }),\n      )\n\n    if (signatureTopic) {\n      const event = events.find((evt) => evt.signature_topic === signatureTopic)\n      return event ? withType(buildEventCodec(event), event.label) : null\n    }\n\n    const candidates = events.filter(\n      (evt) => evt.signature_topic === signatureTopic,\n    )\n    return candidates.length\n      ? first(candidates.map((c) => withType(buildEventCodec(c), c.label)))\n      : null\n  }\n\n  const buildEvents = () =>\n    Variant(\n      Object.fromEntries(\n        metadata.spec.events.map((evt) => [evt.label, buildEventCodec(evt)]),\n      ) as unknown as StringRecord<Codec<any>>,\n    )\n\n  return {\n    buildConstructor,\n    buildMessage,\n    buildStorage,\n    buildEvents,\n    buildEvent,\n  }\n}\n\nexport type InkDynamicBuilder = ReturnType<typeof getInkDynamicBuilder>\n\nconst prependBytes = <T>(codec: Codec<T>, hex: string) => {\n  const bytes = Binary.fromHex(hex).asBytes()\n  const wrappedCodec = Tuple(Bytes(bytes.length), codec)\n  return enhanceCodec(\n    wrappedCodec,\n    (value: CodecType<typeof codec>): CodecType<typeof wrappedCodec> => [\n      bytes,\n      value,\n    ],\n    ([, value]) => value,\n  )\n}\n\nconst first = <T>(codecs: Codec<T>[]) =>\n  createCodec<T>(\n    (x) => {\n      for (const codec of codecs) {\n        try {\n          codec.enc(x)\n        } catch (_) {}\n      }\n      throw new Error(\"Unable to encode\")\n    },\n    (x) => {\n      for (const codec of codecs) {\n        try {\n          codec.dec(x)\n        } catch (_) {}\n      }\n      throw new Error(\"Unable to decode\")\n    },\n  )\n"],"names":[],"mappings":"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"}