{"version":3,"file":"getObservableClient.mjs","sources":["../../src/getObservableClient.ts"],"sourcesContent":["import {\n  type SubstrateClient,\n  type UnsubscribeFn,\n} from \"@polkadot-api/substrate-client\"\nimport { noop, Observable, of } from \"rxjs\"\nimport { ChainHead$, getChainHead$, RuntimeContext } from \"./chainHead\"\nimport getBroadcastTx$ from \"./tx\"\nimport { Archive$, getArchive } from \"./archive\"\n\nconst ofNullFn = () => of(null)\n\nexport interface ObservableClient {\n  chainHead$: () => ChainHead$\n  archive: (\n    getRuntime: (codeHash: string) => Observable<RuntimeContext | null>,\n  ) => Archive$\n  broadcastTx$: (transaction: string) => Observable<never>\n  destroy: UnsubscribeFn\n}\n\nexport const getObservableClient = (\n  substrateClient: SubstrateClient,\n  {\n    getMetadata,\n    setMetadata,\n  }: Partial<{\n    getMetadata: (codeHash: string) => Observable<Uint8Array | null>\n    setMetadata: (codeHash: string, rawMetadata: Uint8Array) => void\n  }> = {},\n): ObservableClient => ({\n  chainHead$: () =>\n    getChainHead$(\n      substrateClient.chainHead,\n      getMetadata || ofNullFn,\n      setMetadata || noop,\n    ),\n  archive: getArchive(substrateClient.archive),\n  broadcastTx$: getBroadcastTx$(substrateClient.transaction),\n  destroy: substrateClient.destroy,\n})\n"],"names":[],"mappings":";;;;;AASA,MAAM,QAAA,GAAW,MAAM,EAAA,CAAG,IAAI,CAAA;AAWvB,MAAM,mBAAA,GAAsB,CACjC,eAAA,EACA;AAAA,EACE,WAAA;AAAA,EACA;AACF,CAAA,GAGK,EAAC,MACgB;AAAA,EACtB,YAAY,MACV,aAAA;AAAA,IACE,eAAA,CAAgB,SAAA;AAAA,IAChB,WAAA,IAAe,QAAA;AAAA,IACf,WAAA,IAAe;AAAA,GACjB;AAAA,EACF,OAAA,EAAS,UAAA,CAAW,eAAA,CAAgB,OAAO,CAAA;AAAA,EAC3C,YAAA,EAAc,eAAA,CAAgB,eAAA,CAAgB,WAAW,CAAA;AAAA,EACzD,SAAS,eAAA,CAAgB;AAC3B,CAAA;;;;"}