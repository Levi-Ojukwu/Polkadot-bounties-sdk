{"version":3,"file":"concatMapEager.mjs","sources":["../../../src/utils/concatMapEager.ts"],"sourcesContent":["import { defer, Observable, ObservableInput, Subscription } from \"rxjs\"\n\nexport const concatMapEager =\n  <I, O>(\n    mapper: (outterValue: I, index: number) => ObservableInput<O>,\n    concurrent = Infinity,\n  ) =>\n  (source$: Observable<I>) =>\n    new Observable<O>((observer) => {\n      let topSubscription: Subscription\n      const queues = new Map<number, Observable<O>>()\n      const innerSubscriptions = new Map<number, Subscription>()\n      const results = new Map<number, O[]>()\n\n      let mapperIdx = 0\n      let subscriptionIdx = 0\n      let observerIdx = 0\n\n      const nextSubscription = () => {\n        const inner$ = queues.get(subscriptionIdx)\n        if (!inner$) {\n          if (\n            innerSubscriptions.size === 0 &&\n            (typeof topSubscription === \"undefined\" || topSubscription.closed)\n          ) {\n            observer.complete()\n          }\n          return\n        }\n        const idx = subscriptionIdx++\n        queues.delete(idx)\n        if (observerIdx !== idx) {\n          results.set(idx, [])\n        }\n\n        let isCompleted = false\n        let subscription = inner$.subscribe({\n          next(x: O) {\n            if (observerIdx === idx) {\n              observer.next(x)\n            } else {\n              results.get(idx)!.push(x)\n            }\n          },\n          complete() {\n            isCompleted = true\n            innerSubscriptions.delete(idx)\n            if (idx === observerIdx) {\n              observerIdx++\n              while (results.has(observerIdx)) {\n                results.get(observerIdx)!.forEach((x) => observer.next(x))\n                results.delete(observerIdx)\n                if (innerSubscriptions.has(observerIdx)) {\n                  break\n                }\n                observerIdx++\n              }\n            }\n            nextSubscription()\n          },\n          error(e: any) {\n            observer.error(e)\n          },\n        })\n\n        if (!isCompleted) innerSubscriptions.set(idx, subscription)\n      }\n\n      // Cover synchronous path sub => nextSubscription => no new values => if (topSubscription == null) complete()\n      topSubscription = new Subscription()\n      topSubscription.add(\n        source$.subscribe({\n          next(outterValue: I) {\n            const idx = mapperIdx++\n            queues.set(\n              idx,\n              defer(() => mapper(outterValue, idx)),\n            )\n            if (innerSubscriptions.size < concurrent) {\n              nextSubscription()\n            }\n          },\n          error(e: any) {\n            observer.error(e)\n          },\n          complete() {\n            if (innerSubscriptions.size === 0) {\n              observer.complete()\n            }\n          },\n        }),\n      )\n\n      return () => {\n        innerSubscriptions.forEach((subscription) => subscription.unsubscribe())\n        topSubscription.unsubscribe()\n        queues.clear()\n        results.clear()\n      }\n    })\n"],"names":[],"mappings":"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"}