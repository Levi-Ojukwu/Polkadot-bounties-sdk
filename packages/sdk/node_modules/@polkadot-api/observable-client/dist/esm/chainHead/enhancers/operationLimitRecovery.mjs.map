{"version":3,"file":"operationLimitRecovery.mjs","sources":["../../../../src/chainHead/enhancers/operationLimitRecovery.ts"],"sourcesContent":["import { OperationLimitError } from \"@polkadot-api/substrate-client\"\nimport type { Subscriber } from \"rxjs\"\nimport { Observable } from \"rxjs\"\n\ninterface PendingTaskNode<T> {\n  value: T\n  next?: PendingTaskNode<T>\n  prev?: PendingTaskNode<T>\n}\n\nexport default class PendingTaskQueue<T> {\n  private first?: PendingTaskNode<T>\n  private last?: PendingTaskNode<T>\n\n  private getRemoveFn(node: PendingTaskNode<T>) {\n    return () => {\n      if (node.prev) {\n        node.prev.next = node.next\n      } else {\n        this.first = node.next\n      }\n\n      if (node.next) {\n        node.next.prev = node.prev\n      } else {\n        this.last = node.prev\n      }\n\n      delete node.prev\n      delete node.next\n    }\n  }\n\n  push(value: T) {\n    const newNode: PendingTaskNode<T> = { value }\n\n    if (this.last === undefined) {\n      this.last = this.first = newNode\n    } else {\n      this.last.next = newNode\n      newNode.prev = this.last\n\n      this.last = newNode\n    }\n\n    return this.getRemoveFn(newNode)\n  }\n\n  unshift(value: T) {\n    this.first = { value, next: this.first }\n    this.first.next && (this.first.next.prev = this.first)\n    this.last ||= this.first\n    return this.getRemoveFn(this.first)\n  }\n\n  pop() {\n    const result = this.first?.value\n\n    if (this.first) {\n      this.first = this.first.next\n\n      if (!this.first) {\n        this.last = undefined\n      } else {\n        delete this.first.prev?.next\n        delete this.first.prev\n      }\n    }\n\n    return result\n  }\n\n  isEmpty() {\n    return !this.first\n  }\n}\n\nexport const getWithRecovery = () => {\n  const tearDownOperations = new Map<Observable<any>, () => void>()\n\n  const setTeardown = (observable: Observable<any>, cb: () => void) => {\n    tearDownOperations.set(observable, () => {\n      tearDownOperations.delete(observable)\n      cb()\n    })\n  }\n\n  const teardown = (observable: Observable<any>) => {\n    tearDownOperations.get(observable)?.()\n  }\n\n  const pendingTasks = new PendingTaskQueue<{\n    observer: Subscriber<any>\n    source$: Observable<any>\n  }>()\n  const unshift = pendingTasks.unshift.bind(pendingTasks)\n  const push = pendingTasks.push.bind(pendingTasks)\n\n  const addTask = (\n    task: {\n      observer: Subscriber<any>\n      source$: Observable<any>\n    },\n    topPriority: boolean,\n  ) => {\n    const fn = topPriority ? unshift : push\n    setTeardown(task.source$, fn(task))\n  }\n\n  const onEmptySlot = () => {\n    const data = pendingTasks.pop()\n    if (!data) return\n\n    tearDownOperations.delete(data.source$)\n    process(data)\n  }\n\n  const process = <T>(data: {\n    observer: Subscriber<T>\n    source$: Observable<T>\n  }) => {\n    const { source$, observer } = data\n\n    let isOperationLimit = false\n    const subscription = source$.subscribe({\n      next(x) {\n        observer.next(x)\n      },\n      error(e) {\n        ;(isOperationLimit = e instanceof OperationLimitError)\n          ? addTask(data, true)\n          : observer.error(e)\n      },\n      complete() {\n        observer.complete()\n      },\n    })\n\n    if (!subscription.closed) {\n      setTeardown(source$, () => {\n        subscription.unsubscribe()\n        onEmptySlot()\n      })\n    } else if (!isOperationLimit) onEmptySlot()\n  }\n\n  const withRecovery =\n    (topPriority = false) =>\n    <T>(source$: Observable<T>): Observable<T> =>\n      new Observable((observer) => {\n        const pendingTask = { observer, source$ }\n\n        if (pendingTasks.isEmpty()) {\n          process(pendingTask)\n        } else {\n          addTask(pendingTask, topPriority)\n        }\n\n        return () => {\n          teardown(source$)\n        }\n      })\n\n  const withNormalRecovery = withRecovery()\n  const withRecoveryFn =\n    <Args extends Array<any>, T>(fn: (...args: Args) => Observable<T>) =>\n    (...args: Args) =>\n      withNormalRecovery(fn(...args))\n\n  return { withRecovery, withRecoveryFn }\n}\n"],"names":[],"mappings":"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"}