{"version":3,"file":"get-runtime-creator.mjs","sources":["../../../../src/chainHead/streams/get-runtime-creator.ts"],"sourcesContent":["import {\n  getDynamicBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  Binary,\n  Codec,\n  Decoder,\n  HexString,\n  metadata as metadataCodec,\n  SS58String,\n  UnifiedMetadata,\n  unifyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport {\n  catchError,\n  EMPTY,\n  map,\n  mergeMap,\n  Observable,\n  of,\n  shareReplay,\n  tap,\n  timer,\n} from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { OperationInaccessibleError } from \"@polkadot-api/substrate-client\"\nimport { createRuntimeCtx, getRawMetadata$ } from \"@/utils\"\n\nexport type SystemEvent = {\n  phase:\n    | { type: \"ApplyExtrinsic\"; value: number }\n    | { type: \"Finalization\" }\n    | { type: \"Initialization\" }\n  event: {\n    type: string\n    value: {\n      type: string\n      value: any\n    }\n  }\n  topics: Array<Binary>\n}\n\nexport type Mortality =\n  | {\n      mortal: false\n    }\n  | { mortal: true; period: number; phase: number }\n\nexport interface RuntimeContext {\n  metadataRaw: Uint8Array\n  lookup: MetadataLookup\n  codeHash: HexString\n  dynamicBuilder: ReturnType<typeof getDynamicBuilder>\n  events: {\n    key: string\n    dec: Decoder<Array<SystemEvent>>\n  }\n  accountId: Codec<SS58String>\n  assetId: number | null\n  getMortalityFromTx: Decoder<Mortality>\n}\n\nexport interface Runtime {\n  at: string\n  codeHash$: Observable<string>\n  runtime: Observable<RuntimeContext>\n  addBlock: (block: string) => Runtime\n  deleteBlocks: (blocks: string[]) => number\n  usages: Set<string>\n}\n\nconst withRecovery =\n  (getHash: () => string | null) =>\n  <Args extends Array<any>, T>(\n    fn: (hash: string, ...args: Args) => Observable<T>,\n  ): ((...args: Args) => Observable<T>) => {\n    const result: (...args: Args) => Observable<T> = (...args) => {\n      const hash = getHash()\n      return hash\n        ? fn(hash, ...args).pipe(\n            catchError((e) => {\n              if (e instanceof BlockNotPinnedError) return result(...args)\n              if (e instanceof OperationInaccessibleError)\n                return timer(750).pipe(mergeMap(() => result(...args)))\n              throw e\n            }),\n          )\n        : EMPTY\n    }\n    return result\n  }\n\nexport const getRuntimeCreator = (\n  call$: (hash: string, method: string, args: string) => Observable<string>,\n  getCodeHash$: (blockHash: string) => Observable<string>,\n  getCachedMetadata: (codeHash: string) => Observable<Uint8Array | null>,\n  setCachedMetadata: (codeHash: string, metadataRaw: Uint8Array) => void,\n) => {\n  const getMetadata$ = (\n    codeHash$: Observable<string>,\n    rawMetadata$: Observable<Uint8Array>,\n  ): Observable<{\n    metadataRaw: Uint8Array\n    metadata: UnifiedMetadata\n    codeHash: string\n  }> =>\n    codeHash$.pipe(\n      mergeMap((codeHash) =>\n        getCachedMetadata(codeHash).pipe(\n          catchError(() => of(null)),\n          mergeMap((metadataRaw) =>\n            metadataRaw\n              ? of(metadataRaw)\n              : rawMetadata$.pipe(\n                  tap((raw) => {\n                    setCachedMetadata(codeHash, raw)\n                  }),\n                ),\n          ),\n          map((metadataRaw) => ({\n            codeHash,\n            metadataRaw,\n            metadata: unifyMetadata(metadataCodec.dec(metadataRaw)),\n          })),\n        ),\n      ),\n    )\n\n  return (getHash: () => string | null): Runtime => {\n    const enhancer = withRecovery(getHash)\n    const initialHash = getHash()!\n    const usages = new Set<string>([initialHash])\n    const codeHash$ = enhancer(getCodeHash$)().pipe(shareReplay(1))\n\n    const runtimeContext$: Observable<RuntimeContext> = getMetadata$(\n      codeHash$,\n      getRawMetadata$(enhancer(call$)),\n    ).pipe(\n      map(({ metadata, metadataRaw, codeHash }) =>\n        createRuntimeCtx(metadata, metadataRaw, codeHash),\n      ),\n      shareReplay(1),\n    )\n\n    const result: Runtime = {\n      at: initialHash,\n      runtime: runtimeContext$,\n      codeHash$,\n      addBlock: (block: string) => {\n        usages.add(block)\n        return result\n      },\n      deleteBlocks: (blocks) => {\n        blocks.forEach((block) => {\n          usages.delete(block)\n        })\n        return usages.size\n      },\n      usages,\n    }\n    runtimeContext$.subscribe({\n      error() {},\n    })\n\n    return result\n  }\n}\n"],"names":["metadataCodec"],"mappings":"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"}