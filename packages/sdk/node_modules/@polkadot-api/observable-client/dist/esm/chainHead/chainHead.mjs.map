{"version":3,"file":"chainHead.mjs","sources":["../../../src/chainHead/chainHead.ts"],"sourcesContent":["import { concatMapEager, delayUnsubscription, shareLatest } from \"@/utils\"\nimport {\n  ChainHead,\n  DisjointError,\n  FollowEventWithRuntime,\n  StorageItemInput,\n  StorageResult,\n} from \"@polkadot-api/substrate-client\"\nimport {\n  EMPTY,\n  MonoTypeOperatorFunction,\n  Observable,\n  ReplaySubject,\n  Subject,\n  defer,\n  distinctUntilChanged,\n  endWith,\n  filter,\n  identity,\n  map,\n  merge,\n  mergeAll,\n  mergeMap,\n  noop,\n  of,\n  scan,\n  share,\n  shareReplay,\n  switchMap,\n  take,\n  takeWhile,\n  tap,\n} from \"rxjs\"\n\nimport { withDefaultValue } from \"@/utils\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  fromAbortControllerFn,\n  getWithOptionalHash$,\n  getWithRecovery,\n  withLazyFollower,\n  withOperationInaccessibleRetry,\n  withStopRecovery,\n} from \"./enhancers\"\nimport { BlockNotPinnedError } from \"./errors\"\nimport { getRecoveralStorage$ } from \"./storage-queries\"\nimport type {\n  BlockUsageEvent,\n  PinnedBlock,\n  PinnedBlocks,\n  RuntimeContext,\n  SystemEvent,\n} from \"./streams\"\nimport { getFollow$, getPinnedBlocks$, toBlockInfo } from \"./streams\"\nimport { getTrackTx } from \"./track-tx\"\nimport { getValidateTx } from \"./validate-tx\"\n\nexport type {\n  FollowEventWithRuntime,\n  PinnedBlock,\n  PinnedBlocks,\n  RuntimeContext,\n  SystemEvent,\n}\n\nexport type BlockInfo = {\n  hash: string\n  number: number\n  parent: string\n  hasNewRuntime: boolean\n}\n\nexport const getChainHead$ = (\n  chainHead: ChainHead,\n  getCachedMetadata: (codeHash: string) => Observable<Uint8Array | null>,\n  setCachedMetadata: (codeHash: string, metadataRaw: Uint8Array) => void,\n) => {\n  const { getFollower, unfollow, follow$, getHeader, hasher$ } =\n    getFollow$(chainHead)\n  const lazyFollower = withLazyFollower(getFollower)\n  const { withRecovery, withRecoveryFn } = getWithRecovery()\n\n  const blockUsage$ = new Subject<BlockUsageEvent>()\n\n  const usingBlock: <T>(blockHash: string) => MonoTypeOperatorFunction<T> =\n    (hash: string) => (base) =>\n      new Observable((observer) => {\n        blockUsage$.next({ type: \"blockUsage\", value: { type: \"hold\", hash } })\n        const subscription = base.subscribe(observer)\n        subscription.add(() => {\n          setTimeout(() => {\n            blockUsage$.next({\n              type: \"blockUsage\",\n              value: { type: \"release\", hash },\n            })\n          }, 0)\n        })\n        return subscription\n      })\n\n  const withRefcount =\n    <A extends Array<any>, T>(\n      fn: (hash: string, ...args: A) => Observable<T>,\n    ): ((hash: string, ...args: A) => Observable<T>) =>\n    (hash, ...args) =>\n      fn(hash, ...args).pipe(usingBlock(hash))\n\n  const withInMemory =\n    <A extends Array<any>, T>(\n      fn: (hash: string, ...args: A) => Observable<T>,\n      label: string,\n    ): ((hash: string, ...args: A) => Observable<T>) =>\n    (hash, ...args) =>\n      new Observable((observer) =>\n        pinnedBlocks$.state.blocks.has(hash)\n          ? fn(hash, ...args).subscribe(observer)\n          : observer.error(new BlockNotPinnedError(hash, label)),\n      )\n\n  const unpin = (hashes: string[]) =>\n    getFollower()\n      .unpin(hashes)\n      .catch((e) => {\n        if (e instanceof DisjointError) return\n        throw e\n      })\n\n  const commonEnhancer = <A extends Array<any>, T>(\n    fn: (\n      key: string,\n      ...args: [...A, ...[abortSignal: AbortSignal]]\n    ) => Promise<T>,\n    label: string,\n  ) =>\n    withInMemory(\n      withRefcount(\n        withStopRecovery(\n          pinnedBlocks$,\n          withRecoveryFn(fromAbortControllerFn(fn)),\n          `stop-${label}`,\n        ),\n      ),\n      label,\n    )\n\n  const cache = new Map<string, Map<string, Observable<any>>>()\n\n  const stg = withRefcount(\n    withRecoveryFn(fromAbortControllerFn(lazyFollower(\"storage\"))),\n  )\n  const getCodeHash = (blockHash: string): Observable<HexString> =>\n    // \":code\" => \"0x3a636f6465\"\n    stg(blockHash, \"hash\", \"0x3a636f6465\", null).pipe(map((x) => x!))\n\n  const newBlocks$ = new Subject<BlockInfo | null>()\n  const pinnedBlocks$ = getPinnedBlocks$(\n    follow$,\n    withRefcount(withRecoveryFn(fromAbortControllerFn(lazyFollower(\"call\")))),\n    getCodeHash,\n    getCachedMetadata,\n    setCachedMetadata,\n    blockUsage$,\n    newBlocks$,\n    (blocks) => {\n      unpin(blocks).catch((err) => {\n        console.error(\"unpin\", err)\n      })\n      blocks.forEach((hash) => {\n        cache.delete(hash)\n      })\n    },\n    (block) => {\n      cache.delete(block)\n    },\n  )\n\n  const getRuntimeContext$ = withInMemory(\n    withRefcount(\n      (hash: string) =>\n        pinnedBlocks$.state.runtimes[\n          pinnedBlocks$.state.blocks.get(hash)!.runtime\n        ].runtime,\n    ),\n    \"getRuntimeCtx\",\n  )\n  const withRuntime =\n    <T>(mapper: (x: T) => string) =>\n    (source$: Observable<T>): Observable<[T, RuntimeContext]> =>\n      source$.pipe(\n        concatMapEager((x) =>\n          getRuntimeContext$(mapper(x)).pipe(map((runtime) => [x, runtime])),\n        ),\n      )\n\n  const upsertCachedStream = <T>(\n    hash: string,\n    key: string,\n    stream: Observable<T>,\n  ): Observable<T> => {\n    const hashCache = cache.get(hash) ?? new Map()\n    const cached = hashCache.get(key)\n    if (cached) return cached\n\n    cache.set(hash, hashCache)\n\n    let connector: ReplaySubject<T>\n    const result = stream.pipe(\n      share({\n        connector: () => (connector = new ReplaySubject()),\n      }),\n      tap({\n        complete() {\n          hashCache.set(key, connector)\n        },\n      }),\n      delayUnsubscription(),\n    )\n    hashCache.set(key, result)\n\n    return result\n  }\n\n  const finalized$ = pinnedBlocks$.pipe(\n    filter((x) => !x.recovering),\n    distinctUntilChanged((a, b) => a.finalized === b.finalized),\n    scan((acc, value) => {\n      let current = value.blocks.get(value.finalized)!\n      const result = [current]\n\n      const latest = acc.at(-1)\n      if (!latest) return result\n\n      while (current.number > latest.number + 1) {\n        current = value.blocks.get(current.parent)!\n        if (!current) break\n        result.unshift(current)\n      }\n      return result\n    }, [] as PinnedBlock[]),\n    mergeAll(),\n    map(toBlockInfo),\n    shareLatest,\n  )\n\n  const best$ = pinnedBlocks$.pipe(\n    distinctUntilChanged((a, b) => a.best === b.best),\n    map((pinned) => toBlockInfo(pinned.blocks.get(pinned.best)!)),\n    shareLatest,\n  )\n\n  const bestBlocks$ = pinnedBlocks$.pipe(\n    filter((x) => !x.recovering),\n    distinctUntilChanged(\n      (prev, current) =>\n        prev.finalized === current.finalized && prev.best === current.best,\n    ),\n    scan((acc, pinned) => {\n      const getBlockInfo = (hash: string) =>\n        acc.get(hash) || toBlockInfo(pinned.blocks.get(hash)!)\n\n      const best = getBlockInfo(pinned.best)\n      const finalized = getBlockInfo(pinned.finalized)\n\n      const len = best.number - finalized.number + 1\n      const result = new Array<BlockInfo>(len)\n      for (let i = 0, hash = best.hash; i < len; i++) {\n        result[i] = getBlockInfo(hash)\n        hash = result[i].parent\n      }\n\n      return new Map(result.map((b) => [b.hash, b]))\n    }, new Map<string, BlockInfo>()),\n    map((x) => [...x.values()]),\n    shareLatest,\n  )\n\n  const runtime$ = pinnedBlocks$.pipe(\n    distinctUntilChanged((a, b) => a.finalizedRuntime === b.finalizedRuntime),\n    switchMap(({ finalizedRuntime: { runtime } }) =>\n      runtime.pipe(withDefaultValue(null)),\n    ),\n    shareLatest,\n  )\n\n  const metadata$ = runtime$.pipe(map((x) => x?.lookup.metadata ?? null))\n\n  const withOptionalHash$ = getWithOptionalHash$(\n    finalized$.pipe(map((b) => b.hash)),\n    best$.pipe(map((b) => b.hash)),\n    usingBlock,\n  )\n\n  const _body$ = commonEnhancer(lazyFollower(\"body\"), \"body\")\n  const body$ = (hash: string) =>\n    withOperationInaccessibleRetry(\n      upsertCachedStream(hash, \"body\", _body$(hash)),\n    )\n\n  const _storage$ = commonEnhancer(lazyFollower(\"storage\"), \"storage\")\n\n  const storage$ = withOptionalHash$(\n    withInMemory(\n      <\n        Type extends StorageItemInput[\"type\"],\n        M extends\n          | undefined\n          | ((data: StorageResult<Type>, ctx: RuntimeContext) => any),\n      >(\n        hash: string,\n        type: Type,\n        keyMapper: (ctx: RuntimeContext) => string,\n        childTrie: string | null = null,\n        mapper?: M,\n      ): Observable<\n        undefined extends M ? StorageResult<Type> : ReturnType<NonNullable<M>>\n      > =>\n        pinnedBlocks$.state.runtimes[\n          pinnedBlocks$.state.blocks.get(hash)!.runtime\n        ].runtime.pipe(\n          mergeMap((ctx) => {\n            const key = keyMapper(ctx)\n            return upsertCachedStream(\n              hash,\n              `storage-${type}-${key}-${childTrie ?? \"\"}`,\n              _storage$(hash, type, key, childTrie),\n            ).pipe(mapper ? map((raw) => mapper(raw, ctx)) : identity)\n          }),\n        ) as Observable<\n          undefined extends M ? StorageResult<Type> : ReturnType<NonNullable<M>>\n        >,\n      \"storage\",\n    ),\n  )\n\n  const recoveralStorage$ = getRecoveralStorage$(getFollower, withRecovery)\n  const storageQueries$ = withOptionalHash$(\n    withInMemory(\n      withStopRecovery(\n        pinnedBlocks$,\n        (hash: string, queries: Array<StorageItemInput>, childTrie?: string) =>\n          recoveralStorage$(hash, queries, childTrie ?? null, false),\n        `storageQueries`,\n      ),\n      \"storageQueries\",\n    ),\n  )\n\n  const header$ = withOptionalHash$(\n    withInMemory(\n      withStopRecovery(\n        pinnedBlocks$,\n        (hash: string) => defer(() => getHeader(hash)),\n        \"header\",\n      ),\n      \"header\",\n    ),\n  )\n\n  const eventsAt$ = (hash: string | null) =>\n    storage$(\n      hash,\n      \"value\",\n      (ctx) => ctx.events.key,\n      null,\n      (x, ctx) => ctx.events.dec(x!),\n    )\n\n  const __call$ = commonEnhancer(lazyFollower(\"call\"), \"call\")\n  const call$ = withOptionalHash$((hash: string, fn: string, args: string) =>\n    upsertCachedStream(hash, `call-${fn}-${args}`, __call$(hash, fn, args)),\n  )\n\n  const validateTx$ = getValidateTx(call$, getRuntimeContext$)\n\n  const innerBody$ = (hash: string) =>\n    upsertCachedStream(hash, \"body\", _body$(hash))\n\n  const trackTx$ = getTrackTx(pinnedBlocks$, innerBody$, validateTx$, eventsAt$)\n  const trackTxWithoutEvents$ = getTrackTx(\n    pinnedBlocks$,\n    innerBody$,\n    validateTx$,\n    () => of(),\n  )\n\n  const genesis$ = runtime$.pipe(\n    filter(Boolean),\n    take(1),\n    mergeMap((runtime) => {\n      const { enc } = runtime.dynamicBuilder.buildStorage(\n        \"System\",\n        \"BlockHash\",\n      ).keys\n      // const genesis$ =\n      // there are chains (e.g. kilt) that use u64 as block number\n      // u64 is encoded as bigint\n      // using dynamic builder for safety\n      let key: string\n      try {\n        // for u32\n        key = enc(0)\n      } catch {\n        // for u64\n        key = enc(0n)\n      }\n\n      return storage$(null, \"value\", () => key, null) as Observable<HexString>\n    }),\n    shareReplay(1),\n  )\n  // calling `unfollow` also kills the subscription due to the fact\n  // that `follow$` completes, which makes all other streams to\n  // also complete (or error, in the case of ongoing operations)\n  merge(runtime$, bestBlocks$).subscribe({\n    error() {},\n  })\n\n  const getRuntime$ = (codeHash: string): Observable<RuntimeContext | null> =>\n    merge(\n      ...Object.values(pinnedBlocks$.state.runtimes).map((runtime) =>\n        runtime.codeHash$.pipe(\n          mergeMap((_codehash) =>\n            codeHash === _codehash ? runtime.runtime : EMPTY,\n          ),\n        ),\n      ),\n    ).pipe(endWith(null), take(1))\n\n  const holdBlock = (blockHash: string | null, shouldThrow = false) => {\n    let hash = blockHash || \"finalized\"\n    hash = pinnedBlocks$.state[hash as \"best\" | \"finalized\"] || hash\n\n    if (!pinnedBlocks$.state.blocks.has(hash)) {\n      if (shouldThrow) throw new BlockNotPinnedError(hash, \"holdBlock\")\n      return noop\n    }\n\n    blockUsage$.next({\n      type: \"blockUsage\",\n      value: {\n        type: \"hold\",\n        hash,\n      },\n    })\n\n    let tearDown = () => {\n      blockUsage$.next({\n        type: \"blockUsage\",\n        value: {\n          type: \"release\",\n          hash,\n        },\n      })\n      tearDown = noop\n    }\n    return () => {\n      tearDown()\n    }\n  }\n\n  const withHodl =\n    (blockHash: string | null) =>\n    <T>(base: Observable<T>) =>\n      new Observable<T>((observer) => {\n        const subscription = base.subscribe(observer)\n        if (!subscription.closed) subscription.add(holdBlock(blockHash))\n        return subscription\n      })\n\n  return {\n    follow$,\n    unfollow,\n    finalized$,\n    best$,\n    bestBlocks$,\n    newBlocks$: newBlocks$.pipe(takeWhile(Boolean)),\n    runtime$,\n    metadata$,\n    genesis$,\n    hasher$,\n    getRuntime$,\n\n    header$,\n    body$,\n    call$,\n    storage$,\n    storageQueries$,\n    eventsAt$,\n\n    withHodl,\n    holdBlock,\n    trackTx$,\n    trackTxWithoutEvents$,\n    validateTx$,\n    pinnedBlocks$,\n    withRuntime,\n    getRuntimeContext$: withOptionalHash$(getRuntimeContext$),\n  }\n}\n\nexport type ChainHead$ = ReturnType<typeof getChainHead$>\n"],"names":[],"mappings":"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"}