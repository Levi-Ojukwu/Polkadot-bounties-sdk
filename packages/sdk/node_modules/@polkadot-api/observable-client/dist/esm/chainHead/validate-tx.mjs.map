{"version":3,"file":"validate-tx.mjs","sources":["../../../src/chainHead/validate-tx.ts"],"sourcesContent":["import { Observable, map, withLatestFrom } from \"rxjs\"\nimport { fromHex, mergeUint8, toHex } from \"@polkadot-api/utils\"\nimport {\n  _void,\n  createDecoder,\n  Decoder,\n  ResultPayload,\n  u8,\n  Variant,\n} from \"@polkadot-api/substrate-bindings\"\nimport { RuntimeContext } from \"./streams\"\n\nconst external = new Uint8Array([2])\n\nconst getValidateTxArgs = (tx: string, hash: string) =>\n  toHex(mergeUint8([external, fromHex(tx), fromHex(hash)]))\n\nconst TaggedTransactionQueue = \"TaggedTransactionQueue\"\nconst validateTransaction = \"validate_transaction\"\n\nconst [, defaultInvalidTxDecoder] = Variant({\n  InvalidTransaction: Variant({\n    Call: _void,\n    Payment: _void,\n    Future: _void,\n    Stale: _void,\n    BadProof: _void,\n    AncientBirthBlock: _void,\n    ExhaustsResources: _void,\n    Custom: u8,\n    BadMandatory: _void,\n    MandatoryValidation: _void,\n    BadSigner: _void,\n  }),\n  UnknownTransaction: Variant({\n    CannotLookup: _void,\n    NoUnsignedValidator: _void,\n    Custom: u8,\n  }),\n})\nconst defaultValidateTxDecoder: Decoder<ResultPayload<undefined, any>> =\n  createDecoder((input) => {\n    const firstByte = u8.dec(input)\n    if (firstByte > 1)\n      throw new Error(\"Unable to decode validateTransaction result\")\n\n    if (!firstByte) return { success: true, value: undefined }\n    let value: any\n    try {\n      value = defaultInvalidTxDecoder(input)\n    } catch (_) {\n      value = {\n        type: \"UnknownInvalidTx\",\n      }\n    }\n    return { success: false, value }\n  })\n\nexport const getValidateTx =\n  (\n    call$: (\n      hash: string | null,\n      fnName: string,\n      parameters: string,\n    ) => Observable<string>,\n    getRuntimeContext: (hash: string) => Observable<RuntimeContext>,\n  ) =>\n  (blockHash: string, tx: string): Observable<ResultPayload<any, any>> => {\n    const decoder$ = getRuntimeContext(blockHash).pipe(\n      map((ctx) => {\n        try {\n          return ctx.dynamicBuilder.buildRuntimeCall(\n            TaggedTransactionQueue,\n            validateTransaction,\n          ).value[1] as Decoder<ResultPayload<any, any>>\n        } catch (_) {\n          return defaultValidateTxDecoder\n        }\n      }),\n    )\n    return call$(\n      blockHash,\n      `${TaggedTransactionQueue}_${validateTransaction}`,\n      getValidateTxArgs(tx, blockHash),\n    ).pipe(\n      withLatestFrom(decoder$),\n      map(([result, decoder]) => decoder(result)),\n    )\n  }\n"],"names":[],"mappings":";;;;AAYA,MAAM,QAAA,GAAW,IAAI,UAAA,CAAW,CAAC,CAAC,CAAC,CAAA;AAEnC,MAAM,iBAAA,GAAoB,CAAC,EAAA,EAAY,IAAA,KACrC,MAAM,UAAA,CAAW,CAAC,QAAA,EAAU,OAAA,CAAQ,EAAE,CAAA,EAAG,OAAA,CAAQ,IAAI,CAAC,CAAC,CAAC,CAAA;AAE1D,MAAM,sBAAA,GAAyB,wBAAA;AAC/B,MAAM,mBAAA,GAAsB,sBAAA;AAE5B,MAAM,GAAG,uBAAuB,CAAA,GAAI,OAAA,CAAQ;AAAA,EAC1C,oBAAoB,OAAA,CAAQ;AAAA,IAC1B,IAAA,EAAM,KAAA;AAAA,IACN,OAAA,EAAS,KAAA;AAAA,IACT,MAAA,EAAQ,KAAA;AAAA,IACR,KAAA,EAAO,KAAA;AAAA,IACP,QAAA,EAAU,KAAA;AAAA,IACV,iBAAA,EAAmB,KAAA;AAAA,IACnB,iBAAA,EAAmB,KAAA;AAAA,IACnB,MAAA,EAAQ,EAAA;AAAA,IACR,YAAA,EAAc,KAAA;AAAA,IACd,mBAAA,EAAqB,KAAA;AAAA,IACrB,SAAA,EAAW;AAAA,GACZ,CAAA;AAAA,EACD,oBAAoB,OAAA,CAAQ;AAAA,IAC1B,YAAA,EAAc,KAAA;AAAA,IACd,mBAAA,EAAqB,KAAA;AAAA,IACrB,MAAA,EAAQ;AAAA,GACT;AACH,CAAC,CAAA;AACD,MAAM,wBAAA,GACJ,aAAA,CAAc,CAAC,KAAA,KAAU;AACvB,EAAA,MAAM,SAAA,GAAY,EAAA,CAAG,GAAA,CAAI,KAAK,CAAA;AAC9B,EAAA,IAAI,SAAA,GAAY,CAAA;AACd,IAAA,MAAM,IAAI,MAAM,6CAA6C,CAAA;AAE/D,EAAA,IAAI,CAAC,SAAA,EAAW,OAAO,EAAE,OAAA,EAAS,IAAA,EAAM,OAAO,MAAA,EAAU;AACzD,EAAA,IAAI,KAAA;AACJ,EAAA,IAAI;AACF,IAAA,KAAA,GAAQ,wBAAwB,KAAK,CAAA;AAAA,EACvC,SAAS,CAAA,EAAG;AACV,IAAA,KAAA,GAAQ;AAAA,MACN,IAAA,EAAM;AAAA,KACR;AAAA,EACF;AACA,EAAA,OAAO,EAAE,OAAA,EAAS,KAAA,EAAO,KAAA,EAAM;AACjC,CAAC,CAAA;AAEI,MAAM,gBACX,CACE,KAAA,EAKA,iBAAA,KAEF,CAAC,WAAmB,EAAA,KAAoD;AACtE,EAAA,MAAM,QAAA,GAAW,iBAAA,CAAkB,SAAS,CAAA,CAAE,IAAA;AAAA,IAC5C,GAAA,CAAI,CAAC,GAAA,KAAQ;AACX,MAAA,IAAI;AACF,QAAA,OAAO,IAAI,cAAA,CAAe,gBAAA;AAAA,UACxB,sBAAA;AAAA,UACA;AAAA,SACF,CAAE,MAAM,CAAC,CAAA;AAAA,MACX,SAAS,CAAA,EAAG;AACV,QAAA,OAAO,wBAAA;AAAA,MACT;AAAA,IACF,CAAC;AAAA,GACH;AACA,EAAA,OAAO,KAAA;AAAA,IACL,SAAA;AAAA,IACA,CAAA,EAAG,sBAAsB,CAAA,CAAA,EAAI,mBAAmB,CAAA,CAAA;AAAA,IAChD,iBAAA,CAAkB,IAAI,SAAS;AAAA,GACjC,CAAE,IAAA;AAAA,IACA,eAAe,QAAQ,CAAA;AAAA,IACvB,GAAA,CAAI,CAAC,CAAC,MAAA,EAAQ,OAAO,CAAA,KAAM,OAAA,CAAQ,MAAM,CAAC;AAAA,GAC5C;AACF;;;;"}