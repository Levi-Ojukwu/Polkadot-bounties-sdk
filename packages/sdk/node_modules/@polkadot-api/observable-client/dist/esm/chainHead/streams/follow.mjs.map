{"version":3,"file":"follow.mjs","sources":["../../../../src/chainHead/streams/follow.ts"],"sourcesContent":["import { getHasherFromHeader, type Hasher } from \"@/hashers\"\nimport { blockHeader, HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  BestBlockChanged,\n  ChainHead,\n  Finalized,\n  FollowEventWithRuntime,\n  FollowResponse,\n  Initialized,\n  NewBlockWithRuntime,\n  StopError,\n} from \"@polkadot-api/substrate-client\"\nimport {\n  Observable,\n  ObservedValueOf,\n  ReplaySubject,\n  Subscription,\n  noop,\n  share,\n} from \"rxjs\"\n\ntype EnhancedFollowEventWithRuntime =\n  | (Initialized & {\n      number: number\n      parentHash: string\n      runtimeChanges: Set<string>\n      hasNewRuntime: boolean\n    })\n  | NewBlockWithRuntime\n  | BestBlockChanged\n  | Finalized\n\nconst createGetRuntimeChanges = (\n  getCodeHash: (block: string) => Promise<string>,\n) => {\n  const getRuntimeChanges = async (\n    blocks: Array<string>,\n    firstId: { idx: number; id: string },\n    lastId: { idx: number; id: string },\n  ): Promise<Array<string>> => {\n    const firstBlock = blocks[firstId.idx]\n    const lastBlock = blocks[lastId.idx]\n    if (blocks.length === 2) return [firstBlock, lastBlock]\n\n    const middleIdx = firstId.idx + Math.floor((lastId.idx - firstId.idx) / 2)\n    const middle = {\n      idx: middleIdx,\n      id: await getCodeHash(blocks[middleIdx]),\n    }\n\n    if (middle.id === firstId.id)\n      return getRuntimeChanges(blocks, middle, lastId)\n\n    if (middle.id === lastId.id)\n      return getRuntimeChanges(blocks, firstId, middle)\n\n    const [left, [_SKIP, ...right]] = await Promise.all([\n      getRuntimeChanges(blocks, firstId, middle),\n      getRuntimeChanges(blocks, middle, lastId),\n    ])\n    return [...left, ...right]\n  }\n\n  return async (blocks: Array<string>): Promise<Array<string>> => {\n    if (blocks.length < 2) return blocks\n\n    const lastIdx = blocks.length - 1\n    const [initialBlock] = blocks\n    const lastBlock = blocks[lastIdx]\n\n    const [firstId, lastId] = await Promise.all(\n      [initialBlock, lastBlock].map(getCodeHash),\n    )\n    if (firstId === lastId) return [blocks[0]]\n\n    return getRuntimeChanges(\n      blocks,\n      { idx: 0, id: firstId },\n      { idx: lastIdx, id: lastId },\n    )\n  }\n}\n\nconst withInitializedNumber = (\n  getFollower: () => FollowResponse,\n  getCodeHash: (block: string) => Promise<string>,\n) => {\n  const getRuntimeChanges = createGetRuntimeChanges(getCodeHash)\n  const getRawHeader = (blockHash: HexString) => getFollower().header(blockHash)\n  const hasher$ = new ReplaySubject<Hasher>(1)\n\n  const operator = (source$: Observable<FollowEventWithRuntime>) =>\n    new Observable<EnhancedFollowEventWithRuntime>((observer) => {\n      let pending: Array<EnhancedFollowEventWithRuntime> | null = null\n      return source$.subscribe({\n        next(event) {\n          if (event.type === \"initialized\") {\n            pending = []\n            const [blockHash] = event.finalizedBlockHashes\n            Promise.all([\n              getRawHeader(blockHash),\n              getRuntimeChanges(event.finalizedBlockHashes),\n            ])\n              .then(([rawHeader, changes]) => {\n                if (!hasher$.closed) {\n                  hasher$.next(getHasherFromHeader(rawHeader, blockHash))\n                  hasher$.complete()\n                }\n                const header = blockHeader.dec(rawHeader)\n                if (!observer.closed) {\n                  observer.next({\n                    type: \"initialized\",\n                    finalizedBlockHashes: event.finalizedBlockHashes,\n                    runtimeChanges: new Set(changes),\n                    number: header.number,\n                    parentHash: header.parentHash,\n                    hasNewRuntime: header.digests.some(\n                      (d) => d.type === \"runtimeUpdated\",\n                    ),\n                  })\n                  pending!.forEach((e) => {\n                    observer.next(e)\n                  })\n                  pending = null\n                }\n              })\n              .catch((e) => {\n                if (!observer.closed) observer.error(e)\n              })\n          } else if (pending) pending.push(event)\n          else observer.next(event)\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n\n  return {\n    getHeader: (blockHash: HexString) =>\n      getRawHeader(blockHash).then(blockHeader[1]),\n    hasher$: hasher$.asObservable(),\n    operator,\n  }\n}\n\nexport const getFollow$ = (chainHead: ChainHead) => {\n  let follower: FollowResponse | null = null\n  let unfollow: () => void = noop\n\n  const getFollower = () => {\n    if (!follower) throw new Error(\"Missing chainHead subscription\")\n    return follower\n  }\n\n  const getCodeHash = async (blockHash: string) =>\n    // \":code\" => \"0x3a636f6465\"\n    getFollower().storage(\n      blockHash,\n      \"hash\",\n      \"0x3a636f6465\",\n      null,\n    ) as Promise<string>\n\n  const { hasher$, operator, getHeader } = withInitializedNumber(\n    getFollower,\n    getCodeHash,\n  )\n  const follow$ = new Observable<FollowEventWithRuntime>((observer) => {\n    follower = chainHead(\n      true,\n      (e) => {\n        observer.next(e)\n      },\n      (e) => {\n        follower = null\n        observer.error(e)\n      },\n    )\n    unfollow = () => {\n      observer.complete()\n      follower?.unfollow()\n    }\n  }).pipe(operator, retryChainHeadError(), share())\n\n  return {\n    getHeader,\n    hasher$,\n    getFollower,\n    follow$,\n    unfollow: () => {\n      unfollow()\n    },\n  }\n}\n\nconst retryChainHeadError =\n  <T extends { type: string }>() =>\n  (source$: Observable<T>) =>\n    new Observable<\n      | T\n      | {\n          type: \"stop-error\"\n        }\n    >((observer) => {\n      const subscription = new Subscription()\n      const subscribe = () =>\n        source$.subscribe({\n          next: (v) => observer.next(v),\n          error: (e) => {\n            subscription.add(subscribe())\n            if (e instanceof StopError) {\n              observer.next({ type: \"stop-error\" })\n            } else {\n              console.warn(\"ChainHead follow request failed, retryingâ€¦\", e)\n            }\n          },\n          complete: () => observer.complete(),\n        })\n      subscription.add(subscribe())\n      return subscription\n    })\n\nexport type FollowEvent =\n  | ObservedValueOf<\n      ReturnType<ReturnType<typeof withInitializedNumber>[\"operator\"]>\n    >\n  | { type: \"stop-error\" }\n"],"names":[],"mappings":"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"}