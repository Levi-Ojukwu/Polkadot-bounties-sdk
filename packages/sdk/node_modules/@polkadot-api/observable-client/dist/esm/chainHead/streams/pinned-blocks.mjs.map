{"version":3,"file":"pinned-blocks.mjs","sources":["../../../../src/chainHead/streams/pinned-blocks.ts"],"sourcesContent":["import { shareLatest } from \"@/utils\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  Observable,\n  Observer,\n  Subject,\n  exhaustMap,\n  filter,\n  map,\n  merge,\n  scan,\n  tap,\n  timer,\n} from \"rxjs\"\nimport { withStopRecovery } from \"../enhancers\"\nimport type { FollowEvent } from \"./follow\"\nimport { Runtime, getRuntimeCreator } from \"./get-runtime-creator\"\nimport { BlockInfo } from \"../chainHead\"\n\nexport interface PinnedBlock {\n  hash: string\n  number: number\n  parent: string\n  children: Set<string>\n  runtime: string\n  unpinnable: boolean\n  refCount: number\n  recovering: boolean\n  hasNewRuntime: boolean\n}\n\nexport interface BlockUsageEvent {\n  type: \"blockUsage\"\n  value: { type: \"hold\"; hash: string } | { type: \"release\"; hash: string }\n}\ninterface CleanupEvent {\n  type: \"cleanup\"\n}\n\nexport type PinnedBlocks = {\n  best: string\n  finalized: string\n  runtimes: Record<string, Runtime>\n  blocks: Map<string, PinnedBlock>\n  finalizedRuntime: Runtime\n  recovering: boolean\n}\n\nexport const toBlockInfo = ({\n  hash,\n  number,\n  parent,\n  hasNewRuntime,\n}: PinnedBlock): BlockInfo => ({\n  hash,\n  number,\n  parent,\n  hasNewRuntime,\n})\n\nconst createRuntimeGetter = (pinned: PinnedBlocks, startAt: HexString) => {\n  return () => {\n    const runtime = pinned.runtimes[startAt]\n    if (!runtime) return pinned.blocks.has(startAt) ? startAt : null\n    const winner = [...runtime.usages].at(-1)\n    return winner ?? null\n  }\n}\n\nconst deleteBlock = (blocks: PinnedBlocks[\"blocks\"], blockHash: string) => {\n  blocks.get(blocks.get(blockHash)!.parent)?.children.delete(blockHash)\n  blocks.delete(blockHash)\n}\n\nconst deleteBlocks = (blocks: PinnedBlocks, toDelete: string[]) => {\n  toDelete.forEach((hash) => {\n    deleteBlock(blocks.blocks, hash)\n  })\n\n  Object.entries(blocks.runtimes)\n    .map(([key, value]) => ({\n      key,\n      usages: value.deleteBlocks(toDelete),\n    }))\n    .filter((x) => x.usages === 0)\n    .map((x) => x.key)\n    .forEach((unusedRuntime) => {\n      delete blocks.runtimes[unusedRuntime]\n    })\n}\n\nexport const getPinnedBlocks$ = (\n  follow$: Observable<FollowEvent>,\n  call$: (hash: string, method: string, args: string) => Observable<string>,\n  getCodeHash$: (blockHash: string) => Observable<string>,\n  getCachedMetadata$: (codeHash: string) => Observable<Uint8Array | null>,\n  setCachedMetadata: (codeHash: string, metadataRaw: Uint8Array) => void,\n  blockUsage$: Subject<BlockUsageEvent>,\n  newBlocks$: Observer<BlockInfo | null>,\n  onUnpin: (blocks: string[]) => void,\n  deleteFromCache: (block: string) => void,\n) => {\n  const onNewBlock = (block: PinnedBlock) => {\n    newBlocks$.next(toBlockInfo(block))\n  }\n  const cleanup$ = new Subject<void>()\n  const cleanupEvt$ = cleanup$.pipe(\n    exhaustMap(() => timer(0)),\n    map(\n      (): CleanupEvent => ({\n        type: \"cleanup\" as const,\n      }),\n    ),\n  )\n\n  const state: PinnedBlocks = getInitialPinnedBlocks()\n  const pinnedBlocks$: Observable<PinnedBlocks> = merge(\n    blockUsage$,\n    cleanupEvt$,\n    follow$,\n  ).pipe(\n    scan((acc, event) => {\n      const unpinAndDelete = (toUnpin: string[]) => {\n        deleteBlocks(acc, toUnpin)\n        onUnpin(toUnpin)\n      }\n\n      switch (event.type) {\n        case \"initialized\":\n          if (\n            acc.recovering &&\n            !event.finalizedBlockHashes.some((hash) => acc.blocks.has(hash))\n          ) {\n            acc = Object.assign(acc, getInitialPinnedBlocks())\n            newBlocks$.next(null)\n          }\n\n          const latestFinalizedHeight =\n            acc.blocks.get(acc.finalized)?.number ?? -1\n\n          const lastIdx = event.finalizedBlockHashes.length - 1\n          acc.finalized = acc.best = event.finalizedBlockHashes[lastIdx]\n          let latestRuntime = acc.finalizedRuntime.at\n\n          const newBlocks: Array<PinnedBlock> = []\n          event.finalizedBlockHashes.forEach((hash, i) => {\n            const unpinnable = i !== lastIdx\n            const preexistingBlock = acc.blocks.get(hash)\n\n            if (preexistingBlock) {\n              preexistingBlock.recovering = false\n              preexistingBlock.unpinnable = unpinnable\n            } else {\n              const number = event.number + i\n              const isNew = number > latestFinalizedHeight\n              const requiresFromNewRuntime =\n                event.runtimeChanges.has(hash) && !acc.runtimes[hash] && isNew\n              if (requiresFromNewRuntime) latestRuntime = hash\n              const parent =\n                i === 0 ? event.parentHash : event.finalizedBlockHashes[i - 1]\n\n              const block = {\n                hash: hash,\n                hasNewRuntime: i\n                  ? event.runtimeChanges.has(hash)\n                  : event.hasNewRuntime,\n                parent,\n                children: new Set(\n                  i === lastIdx ? [] : [event.finalizedBlockHashes[i + 1]],\n                ),\n                unpinnable,\n                runtime: latestRuntime,\n                refCount: 0,\n                number,\n                recovering: false,\n              }\n              acc.blocks.set(hash, block)\n              // it must happen after setting the block\n              if (requiresFromNewRuntime)\n                acc.finalizedRuntime = acc.runtimes[hash] = getRuntime(\n                  createRuntimeGetter(acc, hash),\n                )\n              acc.runtimes[latestRuntime].usages.add(hash)\n              if (isNew) newBlocks.push(block)\n            }\n          })\n          newBlocks.forEach(onNewBlock)\n          return acc\n\n        case \"stop-error\":\n          for (const block of acc.blocks.values()) {\n            block.recovering = true\n          }\n          acc.recovering = true\n\n          return acc\n\n        case \"newBlock\": {\n          const { parentBlockHash: parent, blockHash: hash } = event\n          if (acc.blocks.has(hash)) {\n            acc.blocks.get(hash)!.recovering = false\n          } else {\n            const parentNode = acc.blocks.get(parent)!\n            parentNode.children.add(hash)\n            const number = parentNode.number + 1\n            const block = {\n              hash,\n              number,\n              parent: parent,\n              children: new Set<string>(),\n              runtime: event.newRuntime ? hash : parentNode.runtime,\n              unpinnable: false,\n              refCount: 0,\n              recovering: false,\n              hasNewRuntime: !!event.newRuntime,\n            }\n            acc.blocks.set(hash, block)\n            if (event.newRuntime) {\n              // getRuntime calls getHash immediately\n              // it assumes pinnedBlocks.runtimes[hash] is empty and pinnedBlocks.blocks.has(hash)\n              acc.runtimes[hash] = getRuntime(createRuntimeGetter(acc, hash))\n            }\n\n            acc.runtimes[block.runtime].addBlock(hash)\n            onNewBlock(block)\n          }\n\n          return acc\n        }\n\n        case \"bestBlockChanged\": {\n          if (acc.recovering) {\n            for (const [hash, block] of acc.blocks) {\n              if (block.recovering) {\n                deleteBlock(acc.blocks, hash)\n                deleteFromCache(hash)\n              }\n            }\n            acc.recovering = false\n          }\n          acc.best = event.bestBlockHash\n          return acc\n        }\n\n        case \"finalized\": {\n          acc.finalized = event.finalizedBlockHashes.slice(-1)[0]\n          const { blocks } = acc\n\n          // This logic is only needed because of a bug on some pretty old versions\n          // of the polkadot-sdk node. However, fixing it with an enhancer\n          // was a huge PITA. Therefore, it's more pragmatic to address it here\n          if (blocks.get(acc.best)!.number < blocks.get(acc.finalized)!.number)\n            acc.best = acc.finalized\n\n          acc.finalizedRuntime =\n            acc.runtimes[blocks.get(acc.finalized)!.runtime]\n\n          event.prunedBlockHashes.forEach((hash) => {\n            const block = acc.blocks.get(hash)\n            if (block) {\n              block.unpinnable = true\n            }\n          })\n\n          let current = blocks.get(blocks.get(acc.finalized)!.parent)\n          while (current && !current.unpinnable) {\n            current.unpinnable = true\n            current = blocks.get(current.parent)\n          }\n\n          cleanup$.next()\n\n          return acc\n        }\n        case \"cleanup\": {\n          const toUnpin = [...acc.blocks.values()]\n            .filter(({ unpinnable, refCount }) => unpinnable && !refCount)\n            .map(({ hash }) => hash)\n\n          unpinAndDelete(toUnpin)\n          return acc\n        }\n        case \"blockUsage\": {\n          if (!acc.blocks.has(event.value.hash)) return acc\n\n          const block = acc.blocks.get(event.value.hash)!\n          block.refCount += event.value.type === \"hold\" ? 1 : -1\n          if (block.refCount === 0 && !block.recovering && block.unpinnable) {\n            const toUnpin = [block.hash]\n            unpinAndDelete(toUnpin)\n          }\n          return acc\n        }\n      }\n    }, state),\n    filter((x) => !!x.finalizedRuntime.runtime),\n    map((x) => ({ ...x })),\n    tap({\n      error(e) {\n        newBlocks$.error(e)\n      },\n    }),\n    shareLatest,\n  )\n  const getRuntime = getRuntimeCreator(\n    withStopRecovery(pinnedBlocks$, call$, \"pinned-blocks\"),\n    withStopRecovery(pinnedBlocks$, getCodeHash$, \"pinned-blocks\"),\n    getCachedMetadata$,\n    setCachedMetadata,\n  )\n  return Object.assign(pinnedBlocks$, { state })\n}\n\nconst getInitialPinnedBlocks = (): PinnedBlocks => ({\n  best: \"\",\n  finalized: \"\",\n  runtimes: {},\n  blocks: new Map(),\n  finalizedRuntime: {} as Runtime,\n  recovering: false,\n})\n"],"names":[],"mappings":"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"}