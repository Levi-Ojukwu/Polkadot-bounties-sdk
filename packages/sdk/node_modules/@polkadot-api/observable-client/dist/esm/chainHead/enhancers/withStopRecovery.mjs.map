{"version":3,"file":"withStopRecovery.mjs","sources":["../../../../src/chainHead/enhancers/withStopRecovery.ts"],"sourcesContent":["import { Observable, ObservedValueOf, Subscription } from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { PinnedBlocks } from \"../streams\"\n\nexport function withStopRecovery<A extends Array<any>, T>(\n  blocks$: Observable<PinnedBlocks>,\n  fn: (hash: string, ...args: A) => Observable<T>,\n  label: string,\n) {\n  return (hash: string, ...args: A) => {\n    const source$ = fn(hash, ...args)\n\n    return new Observable<ObservedValueOf<typeof source$>>((observer) => {\n      let sourceSub: Subscription | null = null\n      let isSubscribed = false\n      const performSourceSub = () => {\n        if (isSubscribed) return\n        isSubscribed = true\n        sourceSub = source$.subscribe({\n          next: (v) => observer.next(v),\n          error: (e) => observer.error(e),\n          complete: () => observer.complete(),\n        })\n        sourceSub.add(() => {\n          isSubscribed = false\n          sourceSub = null\n        })\n      }\n\n      let isRecovering = false\n      const blockSub = blocks$.subscribe({\n        next: (v) => {\n          const block = v.blocks.get(hash)\n          if (!block) {\n            // This branch used to conflict with BlockPrunedError, as the block might disappear when it gets pruned\n            // We can avoid this conflict by checking that we're actually recovering.\n            if (isRecovering) {\n              observer.error(new BlockNotPinnedError(hash, label))\n            }\n          } else if (block.recovering) {\n            // Pause while it's recovering, as we don't know if the block is there\n            sourceSub?.unsubscribe()\n          } else {\n            performSourceSub()\n          }\n          isRecovering = v.recovering\n        },\n        error: (e) => observer.error(e),\n      })\n\n      return () => {\n        blockSub.unsubscribe()\n        sourceSub?.unsubscribe()\n      }\n    })\n  }\n}\n"],"names":[],"mappings":";;;AAIO,SAAS,gBAAA,CACd,OAAA,EACA,EAAA,EACA,KAAA,EACA;AACA,EAAA,OAAO,CAAC,SAAiB,IAAA,KAAY;AACnC,IAAA,MAAM,OAAA,GAAU,EAAA,CAAG,IAAA,EAAM,GAAG,IAAI,CAAA;AAEhC,IAAA,OAAO,IAAI,UAAA,CAA4C,CAAC,QAAA,KAAa;AACnE,MAAA,IAAI,SAAA,GAAiC,IAAA;AACrC,MAAA,IAAI,YAAA,GAAe,KAAA;AACnB,MAAA,MAAM,mBAAmB,MAAM;AAC7B,QAAA,IAAI,YAAA,EAAc;AAClB,QAAA,YAAA,GAAe,IAAA;AACf,QAAA,SAAA,GAAY,QAAQ,SAAA,CAAU;AAAA,UAC5B,IAAA,EAAM,CAAC,CAAA,KAAM,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA,UAC5B,KAAA,EAAO,CAAC,CAAA,KAAM,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA,UAC9B,QAAA,EAAU,MAAM,QAAA,CAAS,QAAA;AAAS,SACnC,CAAA;AACD,QAAA,SAAA,CAAU,IAAI,MAAM;AAClB,UAAA,YAAA,GAAe,KAAA;AACf,UAAA,SAAA,GAAY,IAAA;AAAA,QACd,CAAC,CAAA;AAAA,MACH,CAAA;AAEA,MAAA,IAAI,YAAA,GAAe,KAAA;AACnB,MAAA,MAAM,QAAA,GAAW,QAAQ,SAAA,CAAU;AAAA,QACjC,IAAA,EAAM,CAAC,CAAA,KAAM;AACX,UAAA,MAAM,KAAA,GAAQ,CAAA,CAAE,MAAA,CAAO,GAAA,CAAI,IAAI,CAAA;AAC/B,UAAA,IAAI,CAAC,KAAA,EAAO;AAGV,YAAA,IAAI,YAAA,EAAc;AAChB,cAAA,QAAA,CAAS,KAAA,CAAM,IAAI,mBAAA,CAAoB,IAAA,EAAM,KAAK,CAAC,CAAA;AAAA,YACrD;AAAA,UACF,CAAA,MAAA,IAAW,MAAM,UAAA,EAAY;AAE3B,YAAA,SAAA,EAAW,WAAA,EAAY;AAAA,UACzB,CAAA,MAAO;AACL,YAAA,gBAAA,EAAiB;AAAA,UACnB;AACA,UAAA,YAAA,GAAe,CAAA,CAAE,UAAA;AAAA,QACnB,CAAA;AAAA,QACA,KAAA,EAAO,CAAC,CAAA,KAAM,QAAA,CAAS,MAAM,CAAC;AAAA,OAC/B,CAAA;AAED,MAAA,OAAO,MAAM;AACX,QAAA,QAAA,CAAS,WAAA,EAAY;AACrB,QAAA,SAAA,EAAW,WAAA,EAAY;AAAA,MACzB,CAAA;AAAA,IACF,CAAC,CAAA;AAAA,EACH,CAAA;AACF;;;;"}