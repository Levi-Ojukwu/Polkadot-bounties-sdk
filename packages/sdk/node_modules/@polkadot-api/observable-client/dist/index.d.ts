import * as _polkadot_api_substrate_client from '@polkadot-api/substrate-client';
import { ChainHead, StorageItemInput, StorageResult, Archive, StorageItemResponse, UnsubscribeFn, SubstrateClient } from '@polkadot-api/substrate-client';
import { Observable, noop, ObservableInput } from 'rxjs';
import * as _polkadot_api_substrate_bindings from '@polkadot-api/substrate-bindings';
import { HexString, Decoder, Binary, Codec, SS58String, ResultPayload } from '@polkadot-api/substrate-bindings';
import { MetadataLookup, getDynamicBuilder } from '@polkadot-api/metadata-builders';

type Hasher = (input: Uint8Array) => Uint8Array;

type SystemEvent = {
    phase: {
        type: "ApplyExtrinsic";
        value: number;
    } | {
        type: "Finalization";
    } | {
        type: "Initialization";
    };
    event: {
        type: string;
        value: {
            type: string;
            value: any;
        };
    };
    topics: Array<Binary>;
};
type Mortality = {
    mortal: false;
} | {
    mortal: true;
    period: number;
    phase: number;
};
interface RuntimeContext {
    metadataRaw: Uint8Array;
    lookup: MetadataLookup;
    codeHash: HexString;
    dynamicBuilder: ReturnType<typeof getDynamicBuilder>;
    events: {
        key: string;
        dec: Decoder<Array<SystemEvent>>;
    };
    accountId: Codec<SS58String>;
    assetId: number | null;
    getMortalityFromTx: Decoder<Mortality>;
}
interface Runtime {
    at: string;
    codeHash$: Observable<string>;
    runtime: Observable<RuntimeContext>;
    addBlock: (block: string) => Runtime;
    deleteBlocks: (blocks: string[]) => number;
    usages: Set<string>;
}

interface PinnedBlock {
    hash: string;
    number: number;
    parent: string;
    children: Set<string>;
    runtime: string;
    unpinnable: boolean;
    refCount: number;
    recovering: boolean;
    hasNewRuntime: boolean;
}
type PinnedBlocks = {
    best: string;
    finalized: string;
    runtimes: Record<string, Runtime>;
    blocks: Map<string, PinnedBlock>;
    finalizedRuntime: Runtime;
    recovering: boolean;
};

type AnalyzedBlock = {
    hash: HexString;
    found: {
        type: true;
        index: number;
        events: any;
    } | {
        type: false;
        validity: ResultPayload<any, any> | null;
    };
};

type BlockInfo = {
    hash: string;
    number: number;
    parent: string;
    hasNewRuntime: boolean;
};
declare const getChainHead$: (chainHead: ChainHead, getCachedMetadata: (codeHash: string) => Observable<Uint8Array | null>, setCachedMetadata: (codeHash: string, metadataRaw: Uint8Array) => void) => {
    follow$: Observable<(_polkadot_api_substrate_client.NewBlockWithRuntime | _polkadot_api_substrate_client.BestBlockChanged | _polkadot_api_substrate_client.Finalized | (_polkadot_api_substrate_client.Initialized & {
        number: number;
        parentHash: string;
        runtimeChanges: Set<string>;
        hasNewRuntime: boolean;
    })) | {
        type: "stop-error";
    }>;
    unfollow: () => void;
    finalized$: Observable<BlockInfo>;
    best$: Observable<BlockInfo>;
    bestBlocks$: Observable<BlockInfo[]>;
    newBlocks$: Observable<BlockInfo>;
    runtime$: Observable<RuntimeContext | null>;
    metadata$: Observable<{
        version: 14 | 15 | 16;
        lookup: _polkadot_api_substrate_bindings.V14Lookup;
        pallets: ({
            name: string;
            storage: {
                prefix: string;
                items: ({
                    name: string;
                    modifier: number;
                    type: {
                        tag: "plain";
                        value: number;
                    } | {
                        tag: "map";
                        value: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        }>>;
                    };
                    fallback: HexString;
                    docs: string[];
                } | ({
                    name: string;
                    modifier: number;
                    type: {
                        tag: "plain";
                        value: number;
                    } | {
                        tag: "map";
                        value: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        }>>;
                    };
                    fallback: HexString;
                    docs: string[];
                } & {
                    deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                        tag: "NotDeprecated";
                        value: undefined;
                    } | {
                        tag: "DeprecatedWithoutNote";
                        value: undefined;
                    } | {
                        tag: "Deprecated";
                        value: {
                            note: string;
                            since: string | undefined;
                        };
                    }>>;
                }))[];
            } | undefined;
            calls: {
                type: number;
            } | ({
                type: number;
            } & {
                deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                    index: number;
                    deprecation: {
                        tag: "DeprecatedWithoutNote";
                        value: undefined;
                    } | {
                        tag: "Deprecated";
                        value: {
                            note: string;
                            since: string | undefined;
                        };
                    };
                }[]>>;
            }) | undefined;
            events: {
                type: number;
            } | ({
                type: number;
            } & {
                deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                    index: number;
                    deprecation: {
                        tag: "DeprecatedWithoutNote";
                        value: undefined;
                    } | {
                        tag: "Deprecated";
                        value: {
                            note: string;
                            since: string | undefined;
                        };
                    };
                }[]>>;
            }) | undefined;
            constants: ({
                name: string;
                type: number;
                value: HexString;
                docs: string[];
            } | ({
                name: string;
                type: number;
                value: HexString;
                docs: string[];
            } & {
                deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                    tag: "NotDeprecated";
                    value: undefined;
                } | {
                    tag: "DeprecatedWithoutNote";
                    value: undefined;
                } | {
                    tag: "Deprecated";
                    value: {
                        note: string;
                        since: string | undefined;
                    };
                }>>;
            }))[];
            errors: {
                type: number;
            } | ({
                type: number;
            } & {
                deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                    index: number;
                    deprecation: {
                        tag: "DeprecatedWithoutNote";
                        value: undefined;
                    } | {
                        tag: "Deprecated";
                        value: {
                            note: string;
                            since: string | undefined;
                        };
                    };
                }[]>>;
            }) | undefined;
            associatedTypes: Array<{
                name: string;
                type: number;
                docs: string[];
            }>;
            viewFns: Array<_polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                deprecationInfo: {
                    tag: "NotDeprecated";
                    value: undefined;
                } | {
                    tag: "DeprecatedWithoutNote";
                    value: undefined;
                } | {
                    tag: "Deprecated";
                    value: {
                        note: string;
                        since: string | undefined;
                    };
                };
                name: string;
                inputs: {
                    name: string;
                    type: number;
                }[];
                output: number;
                docs: string[];
                id: HexString;
            }>>>;
            index: number;
            docs: string[];
        } | ({
            name: string;
            storage: {
                prefix: string;
                items: ({
                    name: string;
                    modifier: number;
                    type: {
                        tag: "plain";
                        value: number;
                    } | {
                        tag: "map";
                        value: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        }>>;
                    };
                    fallback: HexString;
                    docs: string[];
                } | ({
                    name: string;
                    modifier: number;
                    type: {
                        tag: "plain";
                        value: number;
                    } | {
                        tag: "map";
                        value: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        }>>;
                    };
                    fallback: HexString;
                    docs: string[];
                } & {
                    deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                        tag: "NotDeprecated";
                        value: undefined;
                    } | {
                        tag: "DeprecatedWithoutNote";
                        value: undefined;
                    } | {
                        tag: "Deprecated";
                        value: {
                            note: string;
                            since: string | undefined;
                        };
                    }>>;
                }))[];
            } | undefined;
            calls: {
                type: number;
            } | ({
                type: number;
            } & {
                deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                    index: number;
                    deprecation: {
                        tag: "DeprecatedWithoutNote";
                        value: undefined;
                    } | {
                        tag: "Deprecated";
                        value: {
                            note: string;
                            since: string | undefined;
                        };
                    };
                }[]>>;
            }) | undefined;
            events: {
                type: number;
            } | ({
                type: number;
            } & {
                deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                    index: number;
                    deprecation: {
                        tag: "DeprecatedWithoutNote";
                        value: undefined;
                    } | {
                        tag: "Deprecated";
                        value: {
                            note: string;
                            since: string | undefined;
                        };
                    };
                }[]>>;
            }) | undefined;
            constants: ({
                name: string;
                type: number;
                value: HexString;
                docs: string[];
            } | ({
                name: string;
                type: number;
                value: HexString;
                docs: string[];
            } & {
                deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                    tag: "NotDeprecated";
                    value: undefined;
                } | {
                    tag: "DeprecatedWithoutNote";
                    value: undefined;
                } | {
                    tag: "Deprecated";
                    value: {
                        note: string;
                        since: string | undefined;
                    };
                }>>;
            }))[];
            errors: {
                type: number;
            } | ({
                type: number;
            } & {
                deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                    index: number;
                    deprecation: {
                        tag: "DeprecatedWithoutNote";
                        value: undefined;
                    } | {
                        tag: "Deprecated";
                        value: {
                            note: string;
                            since: string | undefined;
                        };
                    };
                }[]>>;
            }) | undefined;
            associatedTypes: Array<{
                name: string;
                type: number;
                docs: string[];
            }>;
            viewFns: Array<_polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                deprecationInfo: {
                    tag: "NotDeprecated";
                    value: undefined;
                } | {
                    tag: "DeprecatedWithoutNote";
                    value: undefined;
                } | {
                    tag: "Deprecated";
                    value: {
                        note: string;
                        since: string | undefined;
                    };
                };
                name: string;
                inputs: {
                    name: string;
                    type: number;
                }[];
                output: number;
                docs: string[];
                id: HexString;
            }>>>;
            index: number;
            docs: string[];
        } & {
            deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                tag: "NotDeprecated";
                value: undefined;
            } | {
                tag: "DeprecatedWithoutNote";
                value: undefined;
            } | {
                tag: "Deprecated";
                value: {
                    note: string;
                    since: string | undefined;
                };
            }>>;
        }))[];
        extrinsic: {
            version: number[];
            signedExtensions: Array<{
                identifier: string;
                type: number;
                additionalSigned: number;
            }>;
        } & (({
            type: number;
        } | {
            address: number;
            call: number;
            signature: number;
        }) & ({} | {
            signedExtensionsByVersion: Array<[number, number[]]>;
        }));
        apis: ({
            name: string;
            methods: ({
                name: string;
                inputs: Array<{
                    name: string;
                    type: number;
                }>;
                output: number;
                docs: string[];
            } | ({
                name: string;
                inputs: Array<{
                    name: string;
                    type: number;
                }>;
                output: number;
                docs: string[];
            } & {
                deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                    tag: "NotDeprecated";
                    value: undefined;
                } | {
                    tag: "DeprecatedWithoutNote";
                    value: undefined;
                } | {
                    tag: "Deprecated";
                    value: {
                        note: string;
                        since: string | undefined;
                    };
                }>>;
            }))[];
            docs: string[];
        } & (({} | {
            version: number;
        }) & ({} | {
            deprecationInfo: _polkadot_api_substrate_bindings.CodecType<_polkadot_api_substrate_bindings.Codec<{
                tag: "NotDeprecated";
                value: undefined;
            } | {
                tag: "DeprecatedWithoutNote";
                value: undefined;
            } | {
                tag: "Deprecated";
                value: {
                    note: string;
                    since: string | undefined;
                };
            }>>;
        })))[];
    } | null>;
    genesis$: Observable<string & {
        __hexString?: unknown;
    }>;
    hasher$: Observable<Hasher>;
    getRuntime$: (codeHash: string) => Observable<RuntimeContext | null>;
    header$: (hash: string | null) => Observable<{
        parentHash: HexString;
        number: number;
        stateRoot: HexString;
        extrinsicRoot: HexString;
        digests: _polkadot_api_substrate_bindings.Enum<{
            other: Uint8Array<ArrayBufferLike>;
            consensus: {
                engine: string;
                payload: HexString;
            };
            seal: {
                engine: string;
                payload: HexString;
            };
            preRuntime: {
                engine: string;
                payload: HexString;
            };
            runtimeUpdated: undefined;
        }>[];
    }>;
    body$: (hash: string) => Observable<string[]>;
    call$: (hash: string | null, fn: string, args: string) => Observable<string>;
    storage$: <Type extends StorageItemInput["type"], M extends undefined | ((data: StorageResult<Type>, ctx: RuntimeContext) => any)>(hash: string | null, type: Type, keyMapper: (ctx: RuntimeContext) => string, childTrie?: string | null | undefined, mapper?: M | undefined) => Observable<undefined extends M ? StorageResult<Type> : ReturnType<NonNullable<M>>>;
    storageQueries$: (hash: string | null, queries: StorageItemInput[], childTrie?: string | undefined) => Observable<_polkadot_api_substrate_client.StorageItemResponse>;
    eventsAt$: (hash: string | null) => Observable<SystemEvent[]>;
    withHodl: (blockHash: string | null) => <T>(base: Observable<T>) => Observable<T>;
    holdBlock: (blockHash: string | null, shouldThrow?: boolean) => typeof noop;
    trackTx$: (tx: string) => Observable<AnalyzedBlock>;
    trackTxWithoutEvents$: (tx: string) => Observable<AnalyzedBlock>;
    validateTx$: (blockHash: string, tx: string) => Observable<_polkadot_api_substrate_bindings.ResultPayload<any, any>>;
    pinnedBlocks$: Observable<PinnedBlocks> & {
        state: PinnedBlocks;
    };
    withRuntime: <T>(mapper: (x: T) => string) => (source$: Observable<T>) => Observable<[T, RuntimeContext]>;
    getRuntimeContext$: (hash: string | null) => Observable<RuntimeContext>;
};
type ChainHead$ = ReturnType<typeof getChainHead$>;

declare class BlockNotPinnedError extends Error {
    constructor(hash: string, label: string);
}

declare const getArchive: ({ storageSubscription, ...archive }: Archive) => (getRuntime: (codeHash: string) => Observable<RuntimeContext | null>) => {
    body$: (hash: string) => Observable<string[]>;
    header$: (blockHash: string) => Observable<{
        parentHash: HexString;
        number: number;
        stateRoot: HexString;
        extrinsicRoot: HexString;
        digests: _polkadot_api_substrate_bindings.Enum<{
            other: Uint8Array<ArrayBufferLike>;
            consensus: {
                engine: string;
                payload: HexString;
            };
            seal: {
                engine: string;
                payload: HexString;
            };
            preRuntime: {
                engine: string;
                payload: HexString;
            };
            runtimeUpdated: undefined;
        }>[];
    }>;
    storage$: <Type extends StorageItemInput["type"], M extends undefined | ((data: StorageResult<Type>, ctx: RuntimeContext) => any)>(hash: string, type: Type, keyMapper: (ctx: RuntimeContext) => string, childTrie?: string | null, mapper?: M) => Observable<undefined extends M ? StorageResult<Type> : ReturnType<NonNullable<M>>>;
    storageQueries$: (hash: string, queries: Array<StorageItemInput>, childTrie?: string) => Observable<StorageItemResponse>;
    call$: (hash: string, fnName: string, callParameters: string) => Observable<string>;
    eventsAt$: (hash: string) => Observable<SystemEvent[]>;
    getRuntimeContext$: (blockHash: string) => Observable<RuntimeContext>;
};
type Archive$ = ReturnType<ReturnType<typeof getArchive>>;

interface ObservableClient {
    chainHead$: () => ChainHead$;
    archive: (getRuntime: (codeHash: string) => Observable<RuntimeContext | null>) => Archive$;
    broadcastTx$: (transaction: string) => Observable<never>;
    destroy: UnsubscribeFn;
}
declare const getObservableClient: (substrateClient: SubstrateClient, { getMetadata, setMetadata, }?: Partial<{
    getMetadata: (codeHash: string) => Observable<Uint8Array | null>;
    setMetadata: (codeHash: string, rawMetadata: Uint8Array) => void;
}>) => ObservableClient;

declare const isBestOrFinalizedBlock: (blocks$: Observable<PinnedBlocks>, blockHash: string) => Observable<"best" | "finalized" | null>;

declare const concatMapEager: <I, O>(mapper: (outterValue: I, index: number) => ObservableInput<O>, concurrent?: number) => (source$: Observable<I>) => Observable<O>;

declare const withArchive: <Args extends Array<any>, T, Hash extends string | (string | null)>(chainHeadFn: (blockHash: Hash, ...args: Args) => Observable<T>, archiveFn: (blockHash: string, ...args: Args) => Observable<T>) => ((blockHash: Hash, ...args: Args) => Observable<T>);

export { BlockNotPinnedError, concatMapEager, getObservableClient, isBestOrFinalizedBlock, withArchive };
export type { AnalyzedBlock, Archive$, BlockInfo, ChainHead$, ObservableClient, PinnedBlock, PinnedBlocks, RuntimeContext, SystemEvent };
