{"version":3,"file":"index.js","sources":["../src/utils/shareLatest.ts","../src/utils/concatMapEager.ts","../src/utils/with-default-value.ts","../src/utils/delay-unsubscription.ts","../src/utils/create-metadata-ctx.ts","../src/utils/get-raw-metadta.ts","../src/chainHead/enhancers/operationLimitRecovery.ts","../src/chainHead/errors.ts","../src/chainHead/enhancers/operation-inaccessible-retry.ts","../src/chainHead/enhancers/optionalHash.ts","../src/chainHead/enhancers/fromAbortControllerFn.ts","../src/chainHead/enhancers/lazyFollower.ts","../src/chainHead/enhancers/withStopRecovery.ts","../src/chainHead/storage-queries.ts","../src/hashers.ts","../src/chainHead/streams/follow.ts","../src/chainHead/streams/get-runtime-creator.ts","../src/chainHead/streams/pinned-blocks.ts","../src/chainHead/track-tx.ts","../src/chainHead/validate-tx.ts","../src/chainHead/chainHead.ts","../src/tx.ts","../src/archive/archive.ts","../src/getObservableClient.ts","../src/chainHead/streams/block-operations.ts","../src/utils/with-archive.ts"],"sourcesContent":["import { Observable, ReplaySubject, share } from \"rxjs\"\n\nexport const shareLatest: <T>(base: Observable<T>) => Observable<T> = share({\n  connector: () => new ReplaySubject(1),\n  resetOnError: true,\n  resetOnComplete: true,\n  resetOnRefCountZero: true,\n})\n","import { defer, Observable, ObservableInput, Subscription } from \"rxjs\"\n\nexport const concatMapEager =\n  <I, O>(\n    mapper: (outterValue: I, index: number) => ObservableInput<O>,\n    concurrent = Infinity,\n  ) =>\n  (source$: Observable<I>) =>\n    new Observable<O>((observer) => {\n      let topSubscription: Subscription\n      const queues = new Map<number, Observable<O>>()\n      const innerSubscriptions = new Map<number, Subscription>()\n      const results = new Map<number, O[]>()\n\n      let mapperIdx = 0\n      let subscriptionIdx = 0\n      let observerIdx = 0\n\n      const nextSubscription = () => {\n        const inner$ = queues.get(subscriptionIdx)\n        if (!inner$) {\n          if (\n            innerSubscriptions.size === 0 &&\n            (typeof topSubscription === \"undefined\" || topSubscription.closed)\n          ) {\n            observer.complete()\n          }\n          return\n        }\n        const idx = subscriptionIdx++\n        queues.delete(idx)\n        if (observerIdx !== idx) {\n          results.set(idx, [])\n        }\n\n        let isCompleted = false\n        let subscription = inner$.subscribe({\n          next(x: O) {\n            if (observerIdx === idx) {\n              observer.next(x)\n            } else {\n              results.get(idx)!.push(x)\n            }\n          },\n          complete() {\n            isCompleted = true\n            innerSubscriptions.delete(idx)\n            if (idx === observerIdx) {\n              observerIdx++\n              while (results.has(observerIdx)) {\n                results.get(observerIdx)!.forEach((x) => observer.next(x))\n                results.delete(observerIdx)\n                if (innerSubscriptions.has(observerIdx)) {\n                  break\n                }\n                observerIdx++\n              }\n            }\n            nextSubscription()\n          },\n          error(e: any) {\n            observer.error(e)\n          },\n        })\n\n        if (!isCompleted) innerSubscriptions.set(idx, subscription)\n      }\n\n      // Cover synchronous path sub => nextSubscription => no new values => if (topSubscription == null) complete()\n      topSubscription = new Subscription()\n      topSubscription.add(\n        source$.subscribe({\n          next(outterValue: I) {\n            const idx = mapperIdx++\n            queues.set(\n              idx,\n              defer(() => mapper(outterValue, idx)),\n            )\n            if (innerSubscriptions.size < concurrent) {\n              nextSubscription()\n            }\n          },\n          error(e: any) {\n            observer.error(e)\n          },\n          complete() {\n            if (innerSubscriptions.size === 0) {\n              observer.complete()\n            }\n          },\n        }),\n      )\n\n      return () => {\n        innerSubscriptions.forEach((subscription) => subscription.unsubscribe())\n        topSubscription.unsubscribe()\n        queues.clear()\n        results.clear()\n      }\n    })\n","import { Observable } from \"rxjs\"\n\nexport const withDefaultValue =\n  <V, T>(defaultValue: V) =>\n  (source$: Observable<T>): Observable<V | T> =>\n    new Observable((observer) => {\n      let hasEmited = false\n\n      const subscription = source$.subscribe({\n        next(v) {\n          hasEmited = true\n          observer.next(v)\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n\n      if (!hasEmited) observer.next(defaultValue)\n\n      return subscription\n    })\n","import { Observable } from \"rxjs\"\n\nexport const delayUnsubscription =\n  (ms?: number) =>\n  <T>(source: Observable<T>): Observable<T> =>\n    new Observable((observer) => {\n      const subscription = source.subscribe({\n        next(v) {\n          observer.next(v)\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n      const unsubscribe = () => subscription.unsubscribe()\n      return () => {\n        if (ms != null) setTimeout(unsubscribe, ms)\n        else Promise.resolve().then(unsubscribe)\n      }\n    })\n","import type { RuntimeContext } from \"@/chainHead\"\nimport {\n  AccountId,\n  Bytes,\n  compactNumber,\n  createDecoder,\n  Decoder,\n  DecoderType,\n  enhanceDecoder,\n  extrinsicFormat,\n  StringRecord,\n  Struct,\n  u16,\n  u8,\n  type UnifiedMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { getDynamicBuilder, getLookupFn } from \"@polkadot-api/metadata-builders\"\n\nconst CHECK_MORTALITY = \"CheckMortality\"\n\nexport const createRuntimeCtx = (\n  metadata: UnifiedMetadata,\n  metadataRaw: Uint8Array,\n  codeHash: string,\n): RuntimeContext => {\n  const lookup = getLookupFn(metadata)\n  const dynamicBuilder = getDynamicBuilder(lookup)\n  const events = dynamicBuilder.buildStorage(\"System\", \"Events\")\n\n  const assetPayment = metadata.extrinsic.signedExtensions.find(\n    (x) => x.identifier === \"ChargeAssetTxPayment\",\n  )\n\n  let assetId: null | number = null\n  if (assetPayment) {\n    const assetTxPayment = lookup(assetPayment.type)\n    if (assetTxPayment.type === \"struct\") {\n      const optionalAssetId = assetTxPayment.value.asset_id\n      if (optionalAssetId.type === \"option\") assetId = optionalAssetId.value.id\n    }\n  }\n\n  const extrinsicDecoder = getExtrinsicDecoder(lookup.metadata, dynamicBuilder)\n  const getMortalityFromTx: typeof mortalityDecoder = (tx) => {\n    const decodedExt = extrinsicDecoder(tx)\n    return (\n      (\"extra\" in decodedExt &&\n        (decodedExt.extra[CHECK_MORTALITY] as\n          | DecoderType<typeof mortalityDecoder>\n          | undefined)) || { mortal: false }\n    )\n  }\n\n  return {\n    assetId,\n    metadataRaw,\n    codeHash,\n    lookup,\n    dynamicBuilder,\n    events: {\n      key: events.keys.enc(),\n      dec: events.value.dec as any,\n    },\n    accountId: AccountId(dynamicBuilder.ss58Prefix),\n    getMortalityFromTx,\n  }\n}\n\n// TODO: put all the logic that follows in a generic enough low-level package\nconst allBytesDec = Bytes(Infinity).dec\n\ntype DecodedExtrinsic = {\n  len: number\n  callData: Uint8Array\n} & (\n  | { version: 4 | 5; type: \"bare\" }\n  | {\n      version: 4\n      type: \"signed\"\n      address: any\n      signature: any\n      extra: Record<string, any>\n    }\n  | {\n      version: 5\n      type: \"general\"\n      extensionVersion: number\n      extra: Record<string, any>\n    }\n)\n\nconst mortalDecoder = enhanceDecoder(u16[1], (input) => {\n  const period = 2 << input % (1 << 4)\n  const factor = Math.max(period >> 12, 1)\n  const phase = (input >> 4) * factor\n  return { mortal: true as const, period, phase }\n})\n\nconst mortalityDecoder = createDecoder((value) => {\n  const firstByte = u8.dec(value)\n  if (firstByte === 0) return { mortal: false as const }\n  const secondByte = u8.dec(value)\n  return mortalDecoder(Uint8Array.from([firstByte, secondByte]))\n})\n\nconst getExtrinsicDecoder = (\n  metadata: UnifiedMetadata,\n  dynamicBuilder: ReturnType<typeof getDynamicBuilder>,\n): Decoder<DecodedExtrinsic> => {\n  const innerExtra = Object.fromEntries(\n    metadata.extrinsic.signedExtensions.map(\n      (x) =>\n        [\n          x.identifier,\n          x.identifier === CHECK_MORTALITY\n            ? mortalityDecoder\n            : dynamicBuilder.buildDefinition(x.type)[1],\n        ] as [string, Decoder<any>],\n    ),\n  ) as StringRecord<Decoder<any>>\n\n  let address: Decoder<any>\n  let signature: Decoder<any>\n  const { extrinsic } = metadata\n  if (\"address\" in extrinsic) {\n    // v15/v16\n    address = dynamicBuilder.buildDefinition(extrinsic.address)[1]\n    signature = dynamicBuilder.buildDefinition(extrinsic.signature)[1]\n  } else {\n    // v14\n    const params = metadata.lookup[extrinsic.type]?.params\n    const _call = params?.find((v) => v.name === \"Call\")?.type\n    const addr = params?.find((v) => v.name === \"Address\")?.type\n    const sig = params?.find((v) => v.name === \"Signature\")?.type\n    if (_call == null || addr == null || sig == null)\n      throw new Error(\"Call, Address and/or signature not found\")\n    address = dynamicBuilder.buildDefinition(addr)[1]\n    signature = dynamicBuilder.buildDefinition(sig)[1]\n  }\n\n  const v4Body = Struct.dec({\n    address,\n    signature,\n    extra: Struct.dec(innerExtra),\n    callData: allBytesDec,\n  })\n\n  return createDecoder((data) => {\n    const len = compactNumber.dec(data)\n    const { type, version } = extrinsicFormat[1](data)\n    if (type === \"bare\")\n      return { len, version, type, callData: allBytesDec(data) }\n    if (type === \"signed\") return { len, version, type, ...v4Body(data) }\n\n    const extensionVersion = u8.dec(data)\n    let extraDec: Decoder<StringRecord<any>>\n    if (metadata.version === 16) {\n      const extensionsToApply = (\n        metadata as UnifiedMetadata<16>\n      ).extrinsic.signedExtensionsByVersion.find(\n        ([x]) => x === extensionVersion,\n      )\n      if (!extensionsToApply) throw new Error(\"Unexpected extension version\")\n      extraDec = Struct.dec(\n        Object.fromEntries(\n          Object.entries(innerExtra).filter((_, idx) =>\n            extensionsToApply[1].includes(idx),\n          ),\n        ) as StringRecord<Decoder<any>>,\n      )\n    } else extraDec = Struct.dec(innerExtra)\n    const extra = extraDec(data)\n\n    return {\n      len,\n      type,\n      version,\n      extensionVersion,\n      extra,\n      callData: allBytesDec(data),\n    }\n  }) as any\n}\n","import { Bytes, Option, u32, Vector } from \"@polkadot-api/substrate-bindings\"\nimport { toHex } from \"@polkadot-api/utils\"\nimport { catchError, map, mergeMap, Observable, of } from \"rxjs\"\n\nconst versionedArgs = (v: number) => toHex(u32.enc(v))\nconst opaqueBytes = Bytes()\nconst optionalOpaqueBytes = Option(opaqueBytes)\nconst u32ListDecoder = Vector(u32).dec\n\nexport const getRawMetadata$ = (\n  call$: (method: string, args: string) => Observable<string>,\n): Observable<Uint8Array> => {\n  const versions$ = call$(\"Metadata_metadata_versions\", \"\").pipe(\n    map(u32ListDecoder),\n    catchError(() => of([14])),\n  )\n\n  const versioned$ = (availableVersions: number[]) => {\n    const [v] = availableVersions\n      .filter((x) => x > 13 && x < 17)\n      .sort((a, b) => b - a)\n    return v === 14\n      ? call$(\"Metadata_metadata\", \"\").pipe(map(opaqueBytes.dec))\n      : call$(\"Metadata_metadata_at_version\", versionedArgs(v)).pipe(\n          map((x) => optionalOpaqueBytes.dec(x)!),\n        )\n  }\n\n  return versions$.pipe(mergeMap(versioned$))\n}\n","import { OperationLimitError } from \"@polkadot-api/substrate-client\"\nimport type { Subscriber } from \"rxjs\"\nimport { Observable } from \"rxjs\"\n\ninterface PendingTaskNode<T> {\n  value: T\n  next?: PendingTaskNode<T>\n  prev?: PendingTaskNode<T>\n}\n\nexport default class PendingTaskQueue<T> {\n  private first?: PendingTaskNode<T>\n  private last?: PendingTaskNode<T>\n\n  private getRemoveFn(node: PendingTaskNode<T>) {\n    return () => {\n      if (node.prev) {\n        node.prev.next = node.next\n      } else {\n        this.first = node.next\n      }\n\n      if (node.next) {\n        node.next.prev = node.prev\n      } else {\n        this.last = node.prev\n      }\n\n      delete node.prev\n      delete node.next\n    }\n  }\n\n  push(value: T) {\n    const newNode: PendingTaskNode<T> = { value }\n\n    if (this.last === undefined) {\n      this.last = this.first = newNode\n    } else {\n      this.last.next = newNode\n      newNode.prev = this.last\n\n      this.last = newNode\n    }\n\n    return this.getRemoveFn(newNode)\n  }\n\n  unshift(value: T) {\n    this.first = { value, next: this.first }\n    this.first.next && (this.first.next.prev = this.first)\n    this.last ||= this.first\n    return this.getRemoveFn(this.first)\n  }\n\n  pop() {\n    const result = this.first?.value\n\n    if (this.first) {\n      this.first = this.first.next\n\n      if (!this.first) {\n        this.last = undefined\n      } else {\n        delete this.first.prev?.next\n        delete this.first.prev\n      }\n    }\n\n    return result\n  }\n\n  isEmpty() {\n    return !this.first\n  }\n}\n\nexport const getWithRecovery = () => {\n  const tearDownOperations = new Map<Observable<any>, () => void>()\n\n  const setTeardown = (observable: Observable<any>, cb: () => void) => {\n    tearDownOperations.set(observable, () => {\n      tearDownOperations.delete(observable)\n      cb()\n    })\n  }\n\n  const teardown = (observable: Observable<any>) => {\n    tearDownOperations.get(observable)?.()\n  }\n\n  const pendingTasks = new PendingTaskQueue<{\n    observer: Subscriber<any>\n    source$: Observable<any>\n  }>()\n  const unshift = pendingTasks.unshift.bind(pendingTasks)\n  const push = pendingTasks.push.bind(pendingTasks)\n\n  const addTask = (\n    task: {\n      observer: Subscriber<any>\n      source$: Observable<any>\n    },\n    topPriority: boolean,\n  ) => {\n    const fn = topPriority ? unshift : push\n    setTeardown(task.source$, fn(task))\n  }\n\n  const onEmptySlot = () => {\n    const data = pendingTasks.pop()\n    if (!data) return\n\n    tearDownOperations.delete(data.source$)\n    process(data)\n  }\n\n  const process = <T>(data: {\n    observer: Subscriber<T>\n    source$: Observable<T>\n  }) => {\n    const { source$, observer } = data\n\n    let isOperationLimit = false\n    const subscription = source$.subscribe({\n      next(x) {\n        observer.next(x)\n      },\n      error(e) {\n        ;(isOperationLimit = e instanceof OperationLimitError)\n          ? addTask(data, true)\n          : observer.error(e)\n      },\n      complete() {\n        observer.complete()\n      },\n    })\n\n    if (!subscription.closed) {\n      setTeardown(source$, () => {\n        subscription.unsubscribe()\n        onEmptySlot()\n      })\n    } else if (!isOperationLimit) onEmptySlot()\n  }\n\n  const withRecovery =\n    (topPriority = false) =>\n    <T>(source$: Observable<T>): Observable<T> =>\n      new Observable((observer) => {\n        const pendingTask = { observer, source$ }\n\n        if (pendingTasks.isEmpty()) {\n          process(pendingTask)\n        } else {\n          addTask(pendingTask, topPriority)\n        }\n\n        return () => {\n          teardown(source$)\n        }\n      })\n\n  const withNormalRecovery = withRecovery()\n  const withRecoveryFn =\n    <Args extends Array<any>, T>(fn: (...args: Args) => Observable<T>) =>\n    (...args: Args) =>\n      withNormalRecovery(fn(...args))\n\n  return { withRecovery, withRecoveryFn }\n}\n","export class BlockNotPinnedError extends Error {\n  constructor(hash: string, label: string) {\n    super(`Block ${hash} is not pinned (${label})`)\n    this.name = \"BlockNotPinnedError\"\n  }\n}\n","import { OperationInaccessibleError } from \"@polkadot-api/substrate-client\"\nimport { catchError, concatMap, Observable, throwError, timer } from \"rxjs\"\n\nexport const withOperationInaccessibleRetry = <T>(source$: Observable<T>) => {\n  const result: Observable<T> = source$.pipe(\n    catchError((e) =>\n      e instanceof OperationInaccessibleError\n        ? timer(750).pipe(concatMap(() => result))\n        : throwError(() => e),\n    ),\n  )\n  return result\n}\n","import {\n  MonoTypeOperatorFunction,\n  Observable,\n  catchError,\n  mergeMap,\n  take,\n  throwError,\n} from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { withOperationInaccessibleRetry } from \"./operation-inaccessible-retry\"\n\nconst dynamicBlocks = new Set([\"best\", \"finalized\", null])\n\nexport const getWithOptionalHash$ = (\n  finalized$: Observable<string>,\n  best$: Observable<string>,\n  usingBlock: <T>(blockHash: string) => MonoTypeOperatorFunction<T>,\n) => {\n  return <Args extends Array<any>, T>(\n      fn: (hash: string, ...args: Args) => Observable<T>,\n    ) =>\n    (hash: string | null, ...args: Args) => {\n      if (!dynamicBlocks.has(hash))\n        return withOperationInaccessibleRetry(fn(hash as string, ...args)).pipe(\n          usingBlock(hash as string),\n        )\n\n      const hash$ = hash === \"best\" ? best$ : finalized$\n      const result$: Observable<T> = hash$.pipe(\n        take(1),\n        mergeMap((h) => fn(h, ...args).pipe(usingBlock(h))),\n        catchError((e) => {\n          return e instanceof BlockNotPinnedError\n            ? result$\n            : throwError(() => e)\n        }),\n      )\n      return withOperationInaccessibleRetry(result$)\n    }\n}\n","import { Observable } from \"rxjs\"\n\nexport const fromAbortControllerFn =\n  <A extends Array<any>, T>(\n    fn: (...args: [...A, ...[abortSignal: AbortSignal]]) => Promise<T>,\n  ) =>\n  (...args: A): Observable<T> =>\n    new Observable((observer) => {\n      let aborter: AbortController | undefined = new AbortController()\n\n      fn(...[...args, aborter.signal]).then(\n        (value: any) => {\n          observer.next(value)\n          observer.complete()\n        },\n        (error: any) => {\n          observer.error(error)\n        },\n      )\n\n      return () => {\n        observer.unsubscribe()\n        aborter!.abort()\n        aborter = undefined\n      }\n    })\n","import { FollowResponse } from \"@polkadot-api/substrate-client\"\n\nexport const withLazyFollower =\n  (getFollower: () => FollowResponse) =>\n  <Key extends keyof FollowResponse>(key: Key): FollowResponse[Key] =>\n  (...args: any[]) =>\n    (getFollower() as any)[key](...args)\n","import { Observable, ObservedValueOf, Subscription } from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { PinnedBlocks } from \"../streams\"\n\nexport function withStopRecovery<A extends Array<any>, T>(\n  blocks$: Observable<PinnedBlocks>,\n  fn: (hash: string, ...args: A) => Observable<T>,\n  label: string,\n) {\n  return (hash: string, ...args: A) => {\n    const source$ = fn(hash, ...args)\n\n    return new Observable<ObservedValueOf<typeof source$>>((observer) => {\n      let sourceSub: Subscription | null = null\n      let isSubscribed = false\n      const performSourceSub = () => {\n        if (isSubscribed) return\n        isSubscribed = true\n        sourceSub = source$.subscribe({\n          next: (v) => observer.next(v),\n          error: (e) => observer.error(e),\n          complete: () => observer.complete(),\n        })\n        sourceSub.add(() => {\n          isSubscribed = false\n          sourceSub = null\n        })\n      }\n\n      let isRecovering = false\n      const blockSub = blocks$.subscribe({\n        next: (v) => {\n          const block = v.blocks.get(hash)\n          if (!block) {\n            // This branch used to conflict with BlockPrunedError, as the block might disappear when it gets pruned\n            // We can avoid this conflict by checking that we're actually recovering.\n            if (isRecovering) {\n              observer.error(new BlockNotPinnedError(hash, label))\n            }\n          } else if (block.recovering) {\n            // Pause while it's recovering, as we don't know if the block is there\n            sourceSub?.unsubscribe()\n          } else {\n            performSourceSub()\n          }\n          isRecovering = v.recovering\n        },\n        error: (e) => observer.error(e),\n      })\n\n      return () => {\n        blockSub.unsubscribe()\n        sourceSub?.unsubscribe()\n      }\n    })\n  }\n}\n","import {\n  FollowResponse,\n  StorageItemInput,\n  StorageItemResponse,\n} from \"@polkadot-api/substrate-client\"\nimport { Observable, mergeAll } from \"rxjs\"\nimport { getWithRecovery } from \"./enhancers\"\n\nexport const getRecoveralStorage$ = (\n  getFollower: () => FollowResponse,\n  withRecovery: ReturnType<typeof getWithRecovery>[\"withRecovery\"],\n) => {\n  const recoveralStorage$ = (\n    hash: string,\n    queries: Array<StorageItemInput>,\n    childTrie: string | null,\n    isHighPriority: boolean,\n  ): Observable<StorageItemResponse> =>\n    new Observable<StorageItemResponse[] | Observable<StorageItemResponse>>(\n      (observer) =>\n        getFollower().storageSubscription(\n          hash,\n          queries,\n          childTrie ?? null,\n          (items) => {\n            observer.next(items)\n          },\n          (error) => {\n            observer.error(error)\n          },\n          () => {\n            observer.complete()\n          },\n          (nDiscarded) => {\n            // TODO: leave it like this b/c due to a bug on\n            // PolkadotSDK sometimes this value is `undefined`\n            // https://github.com/paritytech/polkadot-sdk/issues/6683\n            if (nDiscarded > 0)\n              observer.next(\n                recoveralStorage$(\n                  hash,\n                  queries.slice(-nDiscarded),\n                  childTrie,\n                  true,\n                ),\n              )\n          },\n        ),\n    ).pipe(mergeAll(), withRecovery(isHighPriority))\n\n  return recoveralStorage$\n}\n","import {\n  Blake2256,\n  Keccak256,\n  type HexString,\n} from \"@polkadot-api/substrate-bindings\"\nimport { fromHex, toHex } from \"@polkadot-api/utils\"\n\nexport type Hasher = (input: Uint8Array) => Uint8Array\nconst hashers: Array<Hasher> = [Blake2256, Keccak256]\nexport const getHasherFromHeader = (\n  header: HexString,\n  blockHash: HexString,\n): Hasher =>\n  hashers.find((h) => toHex(h(fromHex(header))) === blockHash) ||\n  (() => {\n    throw new Error(\"Unsupported hasher\")\n  })\n","import { getHasherFromHeader, type Hasher } from \"@/hashers\"\nimport { blockHeader, HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  BestBlockChanged,\n  ChainHead,\n  Finalized,\n  FollowEventWithRuntime,\n  FollowResponse,\n  Initialized,\n  NewBlockWithRuntime,\n  StopError,\n} from \"@polkadot-api/substrate-client\"\nimport {\n  Observable,\n  ObservedValueOf,\n  ReplaySubject,\n  Subscription,\n  noop,\n  share,\n} from \"rxjs\"\n\ntype EnhancedFollowEventWithRuntime =\n  | (Initialized & {\n      number: number\n      parentHash: string\n      runtimeChanges: Set<string>\n      hasNewRuntime: boolean\n    })\n  | NewBlockWithRuntime\n  | BestBlockChanged\n  | Finalized\n\nconst createGetRuntimeChanges = (\n  getCodeHash: (block: string) => Promise<string>,\n) => {\n  const getRuntimeChanges = async (\n    blocks: Array<string>,\n    firstId: { idx: number; id: string },\n    lastId: { idx: number; id: string },\n  ): Promise<Array<string>> => {\n    const firstBlock = blocks[firstId.idx]\n    const lastBlock = blocks[lastId.idx]\n    if (blocks.length === 2) return [firstBlock, lastBlock]\n\n    const middleIdx = firstId.idx + Math.floor((lastId.idx - firstId.idx) / 2)\n    const middle = {\n      idx: middleIdx,\n      id: await getCodeHash(blocks[middleIdx]),\n    }\n\n    if (middle.id === firstId.id)\n      return getRuntimeChanges(blocks, middle, lastId)\n\n    if (middle.id === lastId.id)\n      return getRuntimeChanges(blocks, firstId, middle)\n\n    const [left, [_SKIP, ...right]] = await Promise.all([\n      getRuntimeChanges(blocks, firstId, middle),\n      getRuntimeChanges(blocks, middle, lastId),\n    ])\n    return [...left, ...right]\n  }\n\n  return async (blocks: Array<string>): Promise<Array<string>> => {\n    if (blocks.length < 2) return blocks\n\n    const lastIdx = blocks.length - 1\n    const [initialBlock] = blocks\n    const lastBlock = blocks[lastIdx]\n\n    const [firstId, lastId] = await Promise.all(\n      [initialBlock, lastBlock].map(getCodeHash),\n    )\n    if (firstId === lastId) return [blocks[0]]\n\n    return getRuntimeChanges(\n      blocks,\n      { idx: 0, id: firstId },\n      { idx: lastIdx, id: lastId },\n    )\n  }\n}\n\nconst withInitializedNumber = (\n  getFollower: () => FollowResponse,\n  getCodeHash: (block: string) => Promise<string>,\n) => {\n  const getRuntimeChanges = createGetRuntimeChanges(getCodeHash)\n  const getRawHeader = (blockHash: HexString) => getFollower().header(blockHash)\n  const hasher$ = new ReplaySubject<Hasher>(1)\n\n  const operator = (source$: Observable<FollowEventWithRuntime>) =>\n    new Observable<EnhancedFollowEventWithRuntime>((observer) => {\n      let pending: Array<EnhancedFollowEventWithRuntime> | null = null\n      return source$.subscribe({\n        next(event) {\n          if (event.type === \"initialized\") {\n            pending = []\n            const [blockHash] = event.finalizedBlockHashes\n            Promise.all([\n              getRawHeader(blockHash),\n              getRuntimeChanges(event.finalizedBlockHashes),\n            ])\n              .then(([rawHeader, changes]) => {\n                if (!hasher$.closed) {\n                  hasher$.next(getHasherFromHeader(rawHeader, blockHash))\n                  hasher$.complete()\n                }\n                const header = blockHeader.dec(rawHeader)\n                if (!observer.closed) {\n                  observer.next({\n                    type: \"initialized\",\n                    finalizedBlockHashes: event.finalizedBlockHashes,\n                    runtimeChanges: new Set(changes),\n                    number: header.number,\n                    parentHash: header.parentHash,\n                    hasNewRuntime: header.digests.some(\n                      (d) => d.type === \"runtimeUpdated\",\n                    ),\n                  })\n                  pending!.forEach((e) => {\n                    observer.next(e)\n                  })\n                  pending = null\n                }\n              })\n              .catch((e) => {\n                if (!observer.closed) observer.error(e)\n              })\n          } else if (pending) pending.push(event)\n          else observer.next(event)\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n\n  return {\n    getHeader: (blockHash: HexString) =>\n      getRawHeader(blockHash).then(blockHeader[1]),\n    hasher$: hasher$.asObservable(),\n    operator,\n  }\n}\n\nexport const getFollow$ = (chainHead: ChainHead) => {\n  let follower: FollowResponse | null = null\n  let unfollow: () => void = noop\n\n  const getFollower = () => {\n    if (!follower) throw new Error(\"Missing chainHead subscription\")\n    return follower\n  }\n\n  const getCodeHash = async (blockHash: string) =>\n    // \":code\" => \"0x3a636f6465\"\n    getFollower().storage(\n      blockHash,\n      \"hash\",\n      \"0x3a636f6465\",\n      null,\n    ) as Promise<string>\n\n  const { hasher$, operator, getHeader } = withInitializedNumber(\n    getFollower,\n    getCodeHash,\n  )\n  const follow$ = new Observable<FollowEventWithRuntime>((observer) => {\n    follower = chainHead(\n      true,\n      (e) => {\n        observer.next(e)\n      },\n      (e) => {\n        follower = null\n        observer.error(e)\n      },\n    )\n    unfollow = () => {\n      observer.complete()\n      follower?.unfollow()\n    }\n  }).pipe(operator, retryChainHeadError(), share())\n\n  return {\n    getHeader,\n    hasher$,\n    getFollower,\n    follow$,\n    unfollow: () => {\n      unfollow()\n    },\n  }\n}\n\nconst retryChainHeadError =\n  <T extends { type: string }>() =>\n  (source$: Observable<T>) =>\n    new Observable<\n      | T\n      | {\n          type: \"stop-error\"\n        }\n    >((observer) => {\n      const subscription = new Subscription()\n      const subscribe = () =>\n        source$.subscribe({\n          next: (v) => observer.next(v),\n          error: (e) => {\n            subscription.add(subscribe())\n            if (e instanceof StopError) {\n              observer.next({ type: \"stop-error\" })\n            } else {\n              console.warn(\"ChainHead follow request failed, retrying…\", e)\n            }\n          },\n          complete: () => observer.complete(),\n        })\n      subscription.add(subscribe())\n      return subscription\n    })\n\nexport type FollowEvent =\n  | ObservedValueOf<\n      ReturnType<ReturnType<typeof withInitializedNumber>[\"operator\"]>\n    >\n  | { type: \"stop-error\" }\n","import {\n  getDynamicBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  Binary,\n  Codec,\n  Decoder,\n  HexString,\n  metadata as metadataCodec,\n  SS58String,\n  UnifiedMetadata,\n  unifyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport {\n  catchError,\n  EMPTY,\n  map,\n  mergeMap,\n  Observable,\n  of,\n  shareReplay,\n  tap,\n  timer,\n} from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { OperationInaccessibleError } from \"@polkadot-api/substrate-client\"\nimport { createRuntimeCtx, getRawMetadata$ } from \"@/utils\"\n\nexport type SystemEvent = {\n  phase:\n    | { type: \"ApplyExtrinsic\"; value: number }\n    | { type: \"Finalization\" }\n    | { type: \"Initialization\" }\n  event: {\n    type: string\n    value: {\n      type: string\n      value: any\n    }\n  }\n  topics: Array<Binary>\n}\n\nexport type Mortality =\n  | {\n      mortal: false\n    }\n  | { mortal: true; period: number; phase: number }\n\nexport interface RuntimeContext {\n  metadataRaw: Uint8Array\n  lookup: MetadataLookup\n  codeHash: HexString\n  dynamicBuilder: ReturnType<typeof getDynamicBuilder>\n  events: {\n    key: string\n    dec: Decoder<Array<SystemEvent>>\n  }\n  accountId: Codec<SS58String>\n  assetId: number | null\n  getMortalityFromTx: Decoder<Mortality>\n}\n\nexport interface Runtime {\n  at: string\n  codeHash$: Observable<string>\n  runtime: Observable<RuntimeContext>\n  addBlock: (block: string) => Runtime\n  deleteBlocks: (blocks: string[]) => number\n  usages: Set<string>\n}\n\nconst withRecovery =\n  (getHash: () => string | null) =>\n  <Args extends Array<any>, T>(\n    fn: (hash: string, ...args: Args) => Observable<T>,\n  ): ((...args: Args) => Observable<T>) => {\n    const result: (...args: Args) => Observable<T> = (...args) => {\n      const hash = getHash()\n      return hash\n        ? fn(hash, ...args).pipe(\n            catchError((e) => {\n              if (e instanceof BlockNotPinnedError) return result(...args)\n              if (e instanceof OperationInaccessibleError)\n                return timer(750).pipe(mergeMap(() => result(...args)))\n              throw e\n            }),\n          )\n        : EMPTY\n    }\n    return result\n  }\n\nexport const getRuntimeCreator = (\n  call$: (hash: string, method: string, args: string) => Observable<string>,\n  getCodeHash$: (blockHash: string) => Observable<string>,\n  getCachedMetadata: (codeHash: string) => Observable<Uint8Array | null>,\n  setCachedMetadata: (codeHash: string, metadataRaw: Uint8Array) => void,\n) => {\n  const getMetadata$ = (\n    codeHash$: Observable<string>,\n    rawMetadata$: Observable<Uint8Array>,\n  ): Observable<{\n    metadataRaw: Uint8Array\n    metadata: UnifiedMetadata\n    codeHash: string\n  }> =>\n    codeHash$.pipe(\n      mergeMap((codeHash) =>\n        getCachedMetadata(codeHash).pipe(\n          catchError(() => of(null)),\n          mergeMap((metadataRaw) =>\n            metadataRaw\n              ? of(metadataRaw)\n              : rawMetadata$.pipe(\n                  tap((raw) => {\n                    setCachedMetadata(codeHash, raw)\n                  }),\n                ),\n          ),\n          map((metadataRaw) => ({\n            codeHash,\n            metadataRaw,\n            metadata: unifyMetadata(metadataCodec.dec(metadataRaw)),\n          })),\n        ),\n      ),\n    )\n\n  return (getHash: () => string | null): Runtime => {\n    const enhancer = withRecovery(getHash)\n    const initialHash = getHash()!\n    const usages = new Set<string>([initialHash])\n    const codeHash$ = enhancer(getCodeHash$)().pipe(shareReplay(1))\n\n    const runtimeContext$: Observable<RuntimeContext> = getMetadata$(\n      codeHash$,\n      getRawMetadata$(enhancer(call$)),\n    ).pipe(\n      map(({ metadata, metadataRaw, codeHash }) =>\n        createRuntimeCtx(metadata, metadataRaw, codeHash),\n      ),\n      shareReplay(1),\n    )\n\n    const result: Runtime = {\n      at: initialHash,\n      runtime: runtimeContext$,\n      codeHash$,\n      addBlock: (block: string) => {\n        usages.add(block)\n        return result\n      },\n      deleteBlocks: (blocks) => {\n        blocks.forEach((block) => {\n          usages.delete(block)\n        })\n        return usages.size\n      },\n      usages,\n    }\n    runtimeContext$.subscribe({\n      error() {},\n    })\n\n    return result\n  }\n}\n","import { shareLatest } from \"@/utils\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  Observable,\n  Observer,\n  Subject,\n  exhaustMap,\n  filter,\n  map,\n  merge,\n  scan,\n  tap,\n  timer,\n} from \"rxjs\"\nimport { withStopRecovery } from \"../enhancers\"\nimport type { FollowEvent } from \"./follow\"\nimport { Runtime, getRuntimeCreator } from \"./get-runtime-creator\"\nimport { BlockInfo } from \"../chainHead\"\n\nexport interface PinnedBlock {\n  hash: string\n  number: number\n  parent: string\n  children: Set<string>\n  runtime: string\n  unpinnable: boolean\n  refCount: number\n  recovering: boolean\n  hasNewRuntime: boolean\n}\n\nexport interface BlockUsageEvent {\n  type: \"blockUsage\"\n  value: { type: \"hold\"; hash: string } | { type: \"release\"; hash: string }\n}\ninterface CleanupEvent {\n  type: \"cleanup\"\n}\n\nexport type PinnedBlocks = {\n  best: string\n  finalized: string\n  runtimes: Record<string, Runtime>\n  blocks: Map<string, PinnedBlock>\n  finalizedRuntime: Runtime\n  recovering: boolean\n}\n\nexport const toBlockInfo = ({\n  hash,\n  number,\n  parent,\n  hasNewRuntime,\n}: PinnedBlock): BlockInfo => ({\n  hash,\n  number,\n  parent,\n  hasNewRuntime,\n})\n\nconst createRuntimeGetter = (pinned: PinnedBlocks, startAt: HexString) => {\n  return () => {\n    const runtime = pinned.runtimes[startAt]\n    if (!runtime) return pinned.blocks.has(startAt) ? startAt : null\n    const winner = [...runtime.usages].at(-1)\n    return winner ?? null\n  }\n}\n\nconst deleteBlock = (blocks: PinnedBlocks[\"blocks\"], blockHash: string) => {\n  blocks.get(blocks.get(blockHash)!.parent)?.children.delete(blockHash)\n  blocks.delete(blockHash)\n}\n\nconst deleteBlocks = (blocks: PinnedBlocks, toDelete: string[]) => {\n  toDelete.forEach((hash) => {\n    deleteBlock(blocks.blocks, hash)\n  })\n\n  Object.entries(blocks.runtimes)\n    .map(([key, value]) => ({\n      key,\n      usages: value.deleteBlocks(toDelete),\n    }))\n    .filter((x) => x.usages === 0)\n    .map((x) => x.key)\n    .forEach((unusedRuntime) => {\n      delete blocks.runtimes[unusedRuntime]\n    })\n}\n\nexport const getPinnedBlocks$ = (\n  follow$: Observable<FollowEvent>,\n  call$: (hash: string, method: string, args: string) => Observable<string>,\n  getCodeHash$: (blockHash: string) => Observable<string>,\n  getCachedMetadata$: (codeHash: string) => Observable<Uint8Array | null>,\n  setCachedMetadata: (codeHash: string, metadataRaw: Uint8Array) => void,\n  blockUsage$: Subject<BlockUsageEvent>,\n  newBlocks$: Observer<BlockInfo | null>,\n  onUnpin: (blocks: string[]) => void,\n  deleteFromCache: (block: string) => void,\n) => {\n  const onNewBlock = (block: PinnedBlock) => {\n    newBlocks$.next(toBlockInfo(block))\n  }\n  const cleanup$ = new Subject<void>()\n  const cleanupEvt$ = cleanup$.pipe(\n    exhaustMap(() => timer(0)),\n    map(\n      (): CleanupEvent => ({\n        type: \"cleanup\" as const,\n      }),\n    ),\n  )\n\n  const state: PinnedBlocks = getInitialPinnedBlocks()\n  const pinnedBlocks$: Observable<PinnedBlocks> = merge(\n    blockUsage$,\n    cleanupEvt$,\n    follow$,\n  ).pipe(\n    scan((acc, event) => {\n      const unpinAndDelete = (toUnpin: string[]) => {\n        deleteBlocks(acc, toUnpin)\n        onUnpin(toUnpin)\n      }\n\n      switch (event.type) {\n        case \"initialized\":\n          if (\n            acc.recovering &&\n            !event.finalizedBlockHashes.some((hash) => acc.blocks.has(hash))\n          ) {\n            acc = Object.assign(acc, getInitialPinnedBlocks())\n            newBlocks$.next(null)\n          }\n\n          const latestFinalizedHeight =\n            acc.blocks.get(acc.finalized)?.number ?? -1\n\n          const lastIdx = event.finalizedBlockHashes.length - 1\n          acc.finalized = acc.best = event.finalizedBlockHashes[lastIdx]\n          let latestRuntime = acc.finalizedRuntime.at\n\n          const newBlocks: Array<PinnedBlock> = []\n          event.finalizedBlockHashes.forEach((hash, i) => {\n            const unpinnable = i !== lastIdx\n            const preexistingBlock = acc.blocks.get(hash)\n\n            if (preexistingBlock) {\n              preexistingBlock.recovering = false\n              preexistingBlock.unpinnable = unpinnable\n            } else {\n              const number = event.number + i\n              const isNew = number > latestFinalizedHeight\n              const requiresFromNewRuntime =\n                event.runtimeChanges.has(hash) && !acc.runtimes[hash] && isNew\n              if (requiresFromNewRuntime) latestRuntime = hash\n              const parent =\n                i === 0 ? event.parentHash : event.finalizedBlockHashes[i - 1]\n\n              const block = {\n                hash: hash,\n                hasNewRuntime: i\n                  ? event.runtimeChanges.has(hash)\n                  : event.hasNewRuntime,\n                parent,\n                children: new Set(\n                  i === lastIdx ? [] : [event.finalizedBlockHashes[i + 1]],\n                ),\n                unpinnable,\n                runtime: latestRuntime,\n                refCount: 0,\n                number,\n                recovering: false,\n              }\n              acc.blocks.set(hash, block)\n              // it must happen after setting the block\n              if (requiresFromNewRuntime)\n                acc.finalizedRuntime = acc.runtimes[hash] = getRuntime(\n                  createRuntimeGetter(acc, hash),\n                )\n              acc.runtimes[latestRuntime].usages.add(hash)\n              if (isNew) newBlocks.push(block)\n            }\n          })\n          newBlocks.forEach(onNewBlock)\n          return acc\n\n        case \"stop-error\":\n          for (const block of acc.blocks.values()) {\n            block.recovering = true\n          }\n          acc.recovering = true\n\n          return acc\n\n        case \"newBlock\": {\n          const { parentBlockHash: parent, blockHash: hash } = event\n          if (acc.blocks.has(hash)) {\n            acc.blocks.get(hash)!.recovering = false\n          } else {\n            const parentNode = acc.blocks.get(parent)!\n            parentNode.children.add(hash)\n            const number = parentNode.number + 1\n            const block = {\n              hash,\n              number,\n              parent: parent,\n              children: new Set<string>(),\n              runtime: event.newRuntime ? hash : parentNode.runtime,\n              unpinnable: false,\n              refCount: 0,\n              recovering: false,\n              hasNewRuntime: !!event.newRuntime,\n            }\n            acc.blocks.set(hash, block)\n            if (event.newRuntime) {\n              // getRuntime calls getHash immediately\n              // it assumes pinnedBlocks.runtimes[hash] is empty and pinnedBlocks.blocks.has(hash)\n              acc.runtimes[hash] = getRuntime(createRuntimeGetter(acc, hash))\n            }\n\n            acc.runtimes[block.runtime].addBlock(hash)\n            onNewBlock(block)\n          }\n\n          return acc\n        }\n\n        case \"bestBlockChanged\": {\n          if (acc.recovering) {\n            for (const [hash, block] of acc.blocks) {\n              if (block.recovering) {\n                deleteBlock(acc.blocks, hash)\n                deleteFromCache(hash)\n              }\n            }\n            acc.recovering = false\n          }\n          acc.best = event.bestBlockHash\n          return acc\n        }\n\n        case \"finalized\": {\n          acc.finalized = event.finalizedBlockHashes.slice(-1)[0]\n          const { blocks } = acc\n\n          // This logic is only needed because of a bug on some pretty old versions\n          // of the polkadot-sdk node. However, fixing it with an enhancer\n          // was a huge PITA. Therefore, it's more pragmatic to address it here\n          if (blocks.get(acc.best)!.number < blocks.get(acc.finalized)!.number)\n            acc.best = acc.finalized\n\n          acc.finalizedRuntime =\n            acc.runtimes[blocks.get(acc.finalized)!.runtime]\n\n          event.prunedBlockHashes.forEach((hash) => {\n            const block = acc.blocks.get(hash)\n            if (block) {\n              block.unpinnable = true\n            }\n          })\n\n          let current = blocks.get(blocks.get(acc.finalized)!.parent)\n          while (current && !current.unpinnable) {\n            current.unpinnable = true\n            current = blocks.get(current.parent)\n          }\n\n          cleanup$.next()\n\n          return acc\n        }\n        case \"cleanup\": {\n          const toUnpin = [...acc.blocks.values()]\n            .filter(({ unpinnable, refCount }) => unpinnable && !refCount)\n            .map(({ hash }) => hash)\n\n          unpinAndDelete(toUnpin)\n          return acc\n        }\n        case \"blockUsage\": {\n          if (!acc.blocks.has(event.value.hash)) return acc\n\n          const block = acc.blocks.get(event.value.hash)!\n          block.refCount += event.value.type === \"hold\" ? 1 : -1\n          if (block.refCount === 0 && !block.recovering && block.unpinnable) {\n            const toUnpin = [block.hash]\n            unpinAndDelete(toUnpin)\n          }\n          return acc\n        }\n      }\n    }, state),\n    filter((x) => !!x.finalizedRuntime.runtime),\n    map((x) => ({ ...x })),\n    tap({\n      error(e) {\n        newBlocks$.error(e)\n      },\n    }),\n    shareLatest,\n  )\n  const getRuntime = getRuntimeCreator(\n    withStopRecovery(pinnedBlocks$, call$, \"pinned-blocks\"),\n    withStopRecovery(pinnedBlocks$, getCodeHash$, \"pinned-blocks\"),\n    getCachedMetadata$,\n    setCachedMetadata,\n  )\n  return Object.assign(pinnedBlocks$, { state })\n}\n\nconst getInitialPinnedBlocks = (): PinnedBlocks => ({\n  best: \"\",\n  finalized: \"\",\n  runtimes: {},\n  blocks: new Map(),\n  finalizedRuntime: {} as Runtime,\n  recovering: false,\n})\n","import {\n  Observable,\n  distinct,\n  filter,\n  map,\n  mergeMap,\n  of,\n  take,\n  takeUntil,\n} from \"rxjs\"\nimport { PinnedBlocks } from \"./streams\"\nimport { HexString, ResultPayload } from \"@polkadot-api/substrate-bindings\"\n\nexport type AnalyzedBlock = {\n  hash: HexString\n  found:\n    | {\n        type: true\n        index: number\n        events: any\n      }\n    | {\n        type: false\n        validity: ResultPayload<any, any> | null // null means that the block was already present when the tx was broadcasted\n      }\n}\n\nexport const getTrackTx = (\n  blocks$: Observable<PinnedBlocks>,\n  getBody: (block: string) => Observable<string[]>, // Returns an observable that should emit just once and complete\n  getIsValid: (\n    block: string,\n    tx: string,\n  ) => Observable<ResultPayload<any, any>>, // Returns an observable that should emit just once and complete\n  getEvents: (block: string) => Observable<any>, // Returns an observable that should emit just once and complete\n) => {\n  const whileBlockPresent = <TT>(\n    hash: string,\n  ): (<T = TT>(base: Observable<T>) => Observable<T>) =>\n    takeUntil(blocks$.pipe(filter(({ blocks }) => !blocks.has(hash))))\n\n  const analyzeBlock = (\n    hash: string,\n    tx: string,\n    alreadyPresent: boolean,\n  ): Observable<AnalyzedBlock> => {\n    if (alreadyPresent)\n      return of({ hash, found: { type: false, validity: null } })\n\n    const whilePresent = whileBlockPresent(hash)\n    return getBody(hash).pipe(\n      mergeMap((txs) => {\n        const index = txs.indexOf(tx)\n        return index > -1\n          ? whilePresent(getEvents(hash)).pipe(\n              map((events) => ({\n                hash,\n                found: {\n                  type: true as true,\n                  index,\n                  events,\n                },\n              })),\n            )\n          : getIsValid(hash, tx).pipe(\n              map((validity) => ({\n                hash,\n                found: { type: false as false, validity },\n              })),\n            )\n      }),\n      whilePresent,\n    )\n  }\n\n  const findInBranch = (\n    hash: string,\n    tx: string,\n    alreadyPresent: Set<string>,\n  ): Observable<AnalyzedBlock> =>\n    analyzeBlock(hash, tx, alreadyPresent.has(hash)).pipe(\n      mergeMap((analyzed) => {\n        const { found } = analyzed\n        return found.type || found.validity?.success === false\n          ? of(analyzed)\n          : blocks$.pipe(\n              whileBlockPresent(hash),\n              mergeMap((x) => x.blocks.get(hash)!.children),\n              distinct(),\n              mergeMap((hash) => findInBranch(hash, tx, alreadyPresent)),\n            )\n      }),\n    )\n\n  return (tx: string): Observable<AnalyzedBlock> =>\n    blocks$.pipe(\n      take(1),\n      mergeMap((x) => findInBranch(x.finalized, tx, new Set(x.blocks.keys()))),\n    )\n}\n","import { Observable, map, withLatestFrom } from \"rxjs\"\nimport { fromHex, mergeUint8, toHex } from \"@polkadot-api/utils\"\nimport {\n  _void,\n  createDecoder,\n  Decoder,\n  ResultPayload,\n  u8,\n  Variant,\n} from \"@polkadot-api/substrate-bindings\"\nimport { RuntimeContext } from \"./streams\"\n\nconst external = new Uint8Array([2])\n\nconst getValidateTxArgs = (tx: string, hash: string) =>\n  toHex(mergeUint8([external, fromHex(tx), fromHex(hash)]))\n\nconst TaggedTransactionQueue = \"TaggedTransactionQueue\"\nconst validateTransaction = \"validate_transaction\"\n\nconst [, defaultInvalidTxDecoder] = Variant({\n  InvalidTransaction: Variant({\n    Call: _void,\n    Payment: _void,\n    Future: _void,\n    Stale: _void,\n    BadProof: _void,\n    AncientBirthBlock: _void,\n    ExhaustsResources: _void,\n    Custom: u8,\n    BadMandatory: _void,\n    MandatoryValidation: _void,\n    BadSigner: _void,\n  }),\n  UnknownTransaction: Variant({\n    CannotLookup: _void,\n    NoUnsignedValidator: _void,\n    Custom: u8,\n  }),\n})\nconst defaultValidateTxDecoder: Decoder<ResultPayload<undefined, any>> =\n  createDecoder((input) => {\n    const firstByte = u8.dec(input)\n    if (firstByte > 1)\n      throw new Error(\"Unable to decode validateTransaction result\")\n\n    if (!firstByte) return { success: true, value: undefined }\n    let value: any\n    try {\n      value = defaultInvalidTxDecoder(input)\n    } catch (_) {\n      value = {\n        type: \"UnknownInvalidTx\",\n      }\n    }\n    return { success: false, value }\n  })\n\nexport const getValidateTx =\n  (\n    call$: (\n      hash: string | null,\n      fnName: string,\n      parameters: string,\n    ) => Observable<string>,\n    getRuntimeContext: (hash: string) => Observable<RuntimeContext>,\n  ) =>\n  (blockHash: string, tx: string): Observable<ResultPayload<any, any>> => {\n    const decoder$ = getRuntimeContext(blockHash).pipe(\n      map((ctx) => {\n        try {\n          return ctx.dynamicBuilder.buildRuntimeCall(\n            TaggedTransactionQueue,\n            validateTransaction,\n          ).value[1] as Decoder<ResultPayload<any, any>>\n        } catch (_) {\n          return defaultValidateTxDecoder\n        }\n      }),\n    )\n    return call$(\n      blockHash,\n      `${TaggedTransactionQueue}_${validateTransaction}`,\n      getValidateTxArgs(tx, blockHash),\n    ).pipe(\n      withLatestFrom(decoder$),\n      map(([result, decoder]) => decoder(result)),\n    )\n  }\n","import { concatMapEager, delayUnsubscription, shareLatest } from \"@/utils\"\nimport {\n  ChainHead,\n  DisjointError,\n  FollowEventWithRuntime,\n  StorageItemInput,\n  StorageResult,\n} from \"@polkadot-api/substrate-client\"\nimport {\n  EMPTY,\n  MonoTypeOperatorFunction,\n  Observable,\n  ReplaySubject,\n  Subject,\n  defer,\n  distinctUntilChanged,\n  endWith,\n  filter,\n  identity,\n  map,\n  merge,\n  mergeAll,\n  mergeMap,\n  noop,\n  of,\n  scan,\n  share,\n  shareReplay,\n  switchMap,\n  take,\n  takeWhile,\n  tap,\n} from \"rxjs\"\n\nimport { withDefaultValue } from \"@/utils\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  fromAbortControllerFn,\n  getWithOptionalHash$,\n  getWithRecovery,\n  withLazyFollower,\n  withOperationInaccessibleRetry,\n  withStopRecovery,\n} from \"./enhancers\"\nimport { BlockNotPinnedError } from \"./errors\"\nimport { getRecoveralStorage$ } from \"./storage-queries\"\nimport type {\n  BlockUsageEvent,\n  PinnedBlock,\n  PinnedBlocks,\n  RuntimeContext,\n  SystemEvent,\n} from \"./streams\"\nimport { getFollow$, getPinnedBlocks$, toBlockInfo } from \"./streams\"\nimport { getTrackTx } from \"./track-tx\"\nimport { getValidateTx } from \"./validate-tx\"\n\nexport type {\n  FollowEventWithRuntime,\n  PinnedBlock,\n  PinnedBlocks,\n  RuntimeContext,\n  SystemEvent,\n}\n\nexport type BlockInfo = {\n  hash: string\n  number: number\n  parent: string\n  hasNewRuntime: boolean\n}\n\nexport const getChainHead$ = (\n  chainHead: ChainHead,\n  getCachedMetadata: (codeHash: string) => Observable<Uint8Array | null>,\n  setCachedMetadata: (codeHash: string, metadataRaw: Uint8Array) => void,\n) => {\n  const { getFollower, unfollow, follow$, getHeader, hasher$ } =\n    getFollow$(chainHead)\n  const lazyFollower = withLazyFollower(getFollower)\n  const { withRecovery, withRecoveryFn } = getWithRecovery()\n\n  const blockUsage$ = new Subject<BlockUsageEvent>()\n\n  const usingBlock: <T>(blockHash: string) => MonoTypeOperatorFunction<T> =\n    (hash: string) => (base) =>\n      new Observable((observer) => {\n        blockUsage$.next({ type: \"blockUsage\", value: { type: \"hold\", hash } })\n        const subscription = base.subscribe(observer)\n        subscription.add(() => {\n          setTimeout(() => {\n            blockUsage$.next({\n              type: \"blockUsage\",\n              value: { type: \"release\", hash },\n            })\n          }, 0)\n        })\n        return subscription\n      })\n\n  const withRefcount =\n    <A extends Array<any>, T>(\n      fn: (hash: string, ...args: A) => Observable<T>,\n    ): ((hash: string, ...args: A) => Observable<T>) =>\n    (hash, ...args) =>\n      fn(hash, ...args).pipe(usingBlock(hash))\n\n  const withInMemory =\n    <A extends Array<any>, T>(\n      fn: (hash: string, ...args: A) => Observable<T>,\n      label: string,\n    ): ((hash: string, ...args: A) => Observable<T>) =>\n    (hash, ...args) =>\n      new Observable((observer) =>\n        pinnedBlocks$.state.blocks.has(hash)\n          ? fn(hash, ...args).subscribe(observer)\n          : observer.error(new BlockNotPinnedError(hash, label)),\n      )\n\n  const unpin = (hashes: string[]) =>\n    getFollower()\n      .unpin(hashes)\n      .catch((e) => {\n        if (e instanceof DisjointError) return\n        throw e\n      })\n\n  const commonEnhancer = <A extends Array<any>, T>(\n    fn: (\n      key: string,\n      ...args: [...A, ...[abortSignal: AbortSignal]]\n    ) => Promise<T>,\n    label: string,\n  ) =>\n    withInMemory(\n      withRefcount(\n        withStopRecovery(\n          pinnedBlocks$,\n          withRecoveryFn(fromAbortControllerFn(fn)),\n          `stop-${label}`,\n        ),\n      ),\n      label,\n    )\n\n  const cache = new Map<string, Map<string, Observable<any>>>()\n\n  const stg = withRefcount(\n    withRecoveryFn(fromAbortControllerFn(lazyFollower(\"storage\"))),\n  )\n  const getCodeHash = (blockHash: string): Observable<HexString> =>\n    // \":code\" => \"0x3a636f6465\"\n    stg(blockHash, \"hash\", \"0x3a636f6465\", null).pipe(map((x) => x!))\n\n  const newBlocks$ = new Subject<BlockInfo | null>()\n  const pinnedBlocks$ = getPinnedBlocks$(\n    follow$,\n    withRefcount(withRecoveryFn(fromAbortControllerFn(lazyFollower(\"call\")))),\n    getCodeHash,\n    getCachedMetadata,\n    setCachedMetadata,\n    blockUsage$,\n    newBlocks$,\n    (blocks) => {\n      unpin(blocks).catch((err) => {\n        console.error(\"unpin\", err)\n      })\n      blocks.forEach((hash) => {\n        cache.delete(hash)\n      })\n    },\n    (block) => {\n      cache.delete(block)\n    },\n  )\n\n  const getRuntimeContext$ = withInMemory(\n    withRefcount(\n      (hash: string) =>\n        pinnedBlocks$.state.runtimes[\n          pinnedBlocks$.state.blocks.get(hash)!.runtime\n        ].runtime,\n    ),\n    \"getRuntimeCtx\",\n  )\n  const withRuntime =\n    <T>(mapper: (x: T) => string) =>\n    (source$: Observable<T>): Observable<[T, RuntimeContext]> =>\n      source$.pipe(\n        concatMapEager((x) =>\n          getRuntimeContext$(mapper(x)).pipe(map((runtime) => [x, runtime])),\n        ),\n      )\n\n  const upsertCachedStream = <T>(\n    hash: string,\n    key: string,\n    stream: Observable<T>,\n  ): Observable<T> => {\n    const hashCache = cache.get(hash) ?? new Map()\n    const cached = hashCache.get(key)\n    if (cached) return cached\n\n    cache.set(hash, hashCache)\n\n    let connector: ReplaySubject<T>\n    const result = stream.pipe(\n      share({\n        connector: () => (connector = new ReplaySubject()),\n      }),\n      tap({\n        complete() {\n          hashCache.set(key, connector)\n        },\n      }),\n      delayUnsubscription(),\n    )\n    hashCache.set(key, result)\n\n    return result\n  }\n\n  const finalized$ = pinnedBlocks$.pipe(\n    filter((x) => !x.recovering),\n    distinctUntilChanged((a, b) => a.finalized === b.finalized),\n    scan((acc, value) => {\n      let current = value.blocks.get(value.finalized)!\n      const result = [current]\n\n      const latest = acc.at(-1)\n      if (!latest) return result\n\n      while (current.number > latest.number + 1) {\n        current = value.blocks.get(current.parent)!\n        if (!current) break\n        result.unshift(current)\n      }\n      return result\n    }, [] as PinnedBlock[]),\n    mergeAll(),\n    map(toBlockInfo),\n    shareLatest,\n  )\n\n  const best$ = pinnedBlocks$.pipe(\n    distinctUntilChanged((a, b) => a.best === b.best),\n    map((pinned) => toBlockInfo(pinned.blocks.get(pinned.best)!)),\n    shareLatest,\n  )\n\n  const bestBlocks$ = pinnedBlocks$.pipe(\n    filter((x) => !x.recovering),\n    distinctUntilChanged(\n      (prev, current) =>\n        prev.finalized === current.finalized && prev.best === current.best,\n    ),\n    scan((acc, pinned) => {\n      const getBlockInfo = (hash: string) =>\n        acc.get(hash) || toBlockInfo(pinned.blocks.get(hash)!)\n\n      const best = getBlockInfo(pinned.best)\n      const finalized = getBlockInfo(pinned.finalized)\n\n      const len = best.number - finalized.number + 1\n      const result = new Array<BlockInfo>(len)\n      for (let i = 0, hash = best.hash; i < len; i++) {\n        result[i] = getBlockInfo(hash)\n        hash = result[i].parent\n      }\n\n      return new Map(result.map((b) => [b.hash, b]))\n    }, new Map<string, BlockInfo>()),\n    map((x) => [...x.values()]),\n    shareLatest,\n  )\n\n  const runtime$ = pinnedBlocks$.pipe(\n    distinctUntilChanged((a, b) => a.finalizedRuntime === b.finalizedRuntime),\n    switchMap(({ finalizedRuntime: { runtime } }) =>\n      runtime.pipe(withDefaultValue(null)),\n    ),\n    shareLatest,\n  )\n\n  const metadata$ = runtime$.pipe(map((x) => x?.lookup.metadata ?? null))\n\n  const withOptionalHash$ = getWithOptionalHash$(\n    finalized$.pipe(map((b) => b.hash)),\n    best$.pipe(map((b) => b.hash)),\n    usingBlock,\n  )\n\n  const _body$ = commonEnhancer(lazyFollower(\"body\"), \"body\")\n  const body$ = (hash: string) =>\n    withOperationInaccessibleRetry(\n      upsertCachedStream(hash, \"body\", _body$(hash)),\n    )\n\n  const _storage$ = commonEnhancer(lazyFollower(\"storage\"), \"storage\")\n\n  const storage$ = withOptionalHash$(\n    withInMemory(\n      <\n        Type extends StorageItemInput[\"type\"],\n        M extends\n          | undefined\n          | ((data: StorageResult<Type>, ctx: RuntimeContext) => any),\n      >(\n        hash: string,\n        type: Type,\n        keyMapper: (ctx: RuntimeContext) => string,\n        childTrie: string | null = null,\n        mapper?: M,\n      ): Observable<\n        undefined extends M ? StorageResult<Type> : ReturnType<NonNullable<M>>\n      > =>\n        pinnedBlocks$.state.runtimes[\n          pinnedBlocks$.state.blocks.get(hash)!.runtime\n        ].runtime.pipe(\n          mergeMap((ctx) => {\n            const key = keyMapper(ctx)\n            return upsertCachedStream(\n              hash,\n              `storage-${type}-${key}-${childTrie ?? \"\"}`,\n              _storage$(hash, type, key, childTrie),\n            ).pipe(mapper ? map((raw) => mapper(raw, ctx)) : identity)\n          }),\n        ) as Observable<\n          undefined extends M ? StorageResult<Type> : ReturnType<NonNullable<M>>\n        >,\n      \"storage\",\n    ),\n  )\n\n  const recoveralStorage$ = getRecoveralStorage$(getFollower, withRecovery)\n  const storageQueries$ = withOptionalHash$(\n    withInMemory(\n      withStopRecovery(\n        pinnedBlocks$,\n        (hash: string, queries: Array<StorageItemInput>, childTrie?: string) =>\n          recoveralStorage$(hash, queries, childTrie ?? null, false),\n        `storageQueries`,\n      ),\n      \"storageQueries\",\n    ),\n  )\n\n  const header$ = withOptionalHash$(\n    withInMemory(\n      withStopRecovery(\n        pinnedBlocks$,\n        (hash: string) => defer(() => getHeader(hash)),\n        \"header\",\n      ),\n      \"header\",\n    ),\n  )\n\n  const eventsAt$ = (hash: string | null) =>\n    storage$(\n      hash,\n      \"value\",\n      (ctx) => ctx.events.key,\n      null,\n      (x, ctx) => ctx.events.dec(x!),\n    )\n\n  const __call$ = commonEnhancer(lazyFollower(\"call\"), \"call\")\n  const call$ = withOptionalHash$((hash: string, fn: string, args: string) =>\n    upsertCachedStream(hash, `call-${fn}-${args}`, __call$(hash, fn, args)),\n  )\n\n  const validateTx$ = getValidateTx(call$, getRuntimeContext$)\n\n  const innerBody$ = (hash: string) =>\n    upsertCachedStream(hash, \"body\", _body$(hash))\n\n  const trackTx$ = getTrackTx(pinnedBlocks$, innerBody$, validateTx$, eventsAt$)\n  const trackTxWithoutEvents$ = getTrackTx(\n    pinnedBlocks$,\n    innerBody$,\n    validateTx$,\n    () => of(),\n  )\n\n  const genesis$ = runtime$.pipe(\n    filter(Boolean),\n    take(1),\n    mergeMap((runtime) => {\n      const { enc } = runtime.dynamicBuilder.buildStorage(\n        \"System\",\n        \"BlockHash\",\n      ).keys\n      // const genesis$ =\n      // there are chains (e.g. kilt) that use u64 as block number\n      // u64 is encoded as bigint\n      // using dynamic builder for safety\n      let key: string\n      try {\n        // for u32\n        key = enc(0)\n      } catch {\n        // for u64\n        key = enc(0n)\n      }\n\n      return storage$(null, \"value\", () => key, null) as Observable<HexString>\n    }),\n    shareReplay(1),\n  )\n  // calling `unfollow` also kills the subscription due to the fact\n  // that `follow$` completes, which makes all other streams to\n  // also complete (or error, in the case of ongoing operations)\n  merge(runtime$, bestBlocks$).subscribe({\n    error() {},\n  })\n\n  const getRuntime$ = (codeHash: string): Observable<RuntimeContext | null> =>\n    merge(\n      ...Object.values(pinnedBlocks$.state.runtimes).map((runtime) =>\n        runtime.codeHash$.pipe(\n          mergeMap((_codehash) =>\n            codeHash === _codehash ? runtime.runtime : EMPTY,\n          ),\n        ),\n      ),\n    ).pipe(endWith(null), take(1))\n\n  const holdBlock = (blockHash: string | null, shouldThrow = false) => {\n    let hash = blockHash || \"finalized\"\n    hash = pinnedBlocks$.state[hash as \"best\" | \"finalized\"] || hash\n\n    if (!pinnedBlocks$.state.blocks.has(hash)) {\n      if (shouldThrow) throw new BlockNotPinnedError(hash, \"holdBlock\")\n      return noop\n    }\n\n    blockUsage$.next({\n      type: \"blockUsage\",\n      value: {\n        type: \"hold\",\n        hash,\n      },\n    })\n\n    let tearDown = () => {\n      blockUsage$.next({\n        type: \"blockUsage\",\n        value: {\n          type: \"release\",\n          hash,\n        },\n      })\n      tearDown = noop\n    }\n    return () => {\n      tearDown()\n    }\n  }\n\n  const withHodl =\n    (blockHash: string | null) =>\n    <T>(base: Observable<T>) =>\n      new Observable<T>((observer) => {\n        const subscription = base.subscribe(observer)\n        if (!subscription.closed) subscription.add(holdBlock(blockHash))\n        return subscription\n      })\n\n  return {\n    follow$,\n    unfollow,\n    finalized$,\n    best$,\n    bestBlocks$,\n    newBlocks$: newBlocks$.pipe(takeWhile(Boolean)),\n    runtime$,\n    metadata$,\n    genesis$,\n    hasher$,\n    getRuntime$,\n\n    header$,\n    body$,\n    call$,\n    storage$,\n    storageQueries$,\n    eventsAt$,\n\n    withHodl,\n    holdBlock,\n    trackTx$,\n    trackTxWithoutEvents$,\n    validateTx$,\n    pinnedBlocks$,\n    withRuntime,\n    getRuntimeContext$: withOptionalHash$(getRuntimeContext$),\n  }\n}\n\nexport type ChainHead$ = ReturnType<typeof getChainHead$>\n","import type { SubstrateClient } from \"@polkadot-api/substrate-client\"\nimport { Observable } from \"rxjs\"\n\nexport default (baseTransaction: SubstrateClient[\"transaction\"]) =>\n  (transaction: string) =>\n    new Observable<never>((observer) =>\n      baseTransaction(transaction, (e) => {\n        observer.error(e)\n      }),\n    )\n","import { RuntimeContext } from \"@/chainHead\"\nimport { fromAbortControllerFn } from \"@/chainHead/enhancers\"\nimport { createRuntimeCtx, getRawMetadata$ } from \"@/utils\"\nimport {\n  HexString,\n  unifyMetadata,\n  metadata as metadataCodec,\n  blockHeader,\n} from \"@polkadot-api/substrate-bindings\"\nimport {\n  Archive,\n  StorageItemInput,\n  StorageItemResponse,\n  StorageResult,\n} from \"@polkadot-api/substrate-client\"\nimport { catchError, map, mergeMap, Observable, of, tap } from \"rxjs\"\n\nexport const getArchive =\n  ({ storageSubscription, ...archive }: Archive) =>\n  (getRuntime: (codeHash: string) => Observable<RuntimeContext | null>) => {\n    const runtimes: Record<string, RuntimeContext> = {}\n    const rawStorage$ = fromAbortControllerFn(archive.storage)\n    const call$ = fromAbortControllerFn(archive.call)\n    const rawHeader$ = fromAbortControllerFn(archive.header)\n    const body$ = fromAbortControllerFn(archive.body)\n\n    const header$ = (blockHash: string) =>\n      rawHeader$(blockHash).pipe(map(blockHeader[1]))\n\n    const getCodeHash = (blockHash: string): Observable<HexString> =>\n      // \":code\" => \"0x3a636f6465\"\n      rawStorage$(blockHash, \"hash\", \"0x3a636f6465\", null).pipe(map((x) => x!))\n\n    const getRuntime$ = (codeHash: string, blockHash: string) =>\n      getRuntime(codeHash).pipe(\n        catchError(() => of(null)),\n        mergeMap((result) =>\n          result\n            ? of(result)\n            : getRawMetadata$((...args) => call$(blockHash, ...args)).pipe(\n                map((rawMetadata) =>\n                  createRuntimeCtx(\n                    unifyMetadata(metadataCodec.dec(rawMetadata)),\n                    rawMetadata,\n                    codeHash,\n                  ),\n                ),\n              ),\n        ),\n        tap((runtime) => {\n          runtimes[codeHash] = runtime\n        }),\n      )\n\n    const getRuntimeContext$ = (blockHash: string) =>\n      getCodeHash(blockHash).pipe(\n        mergeMap((codeHash) => {\n          const runtime = runtimes[codeHash]\n          return runtime ? of(runtime) : getRuntime$(codeHash, blockHash)\n        }),\n      )\n\n    const storage$ = <\n      Type extends StorageItemInput[\"type\"],\n      M extends\n        | undefined\n        | ((data: StorageResult<Type>, ctx: RuntimeContext) => any),\n    >(\n      hash: string,\n      type: Type,\n      keyMapper: (ctx: RuntimeContext) => string,\n      childTrie: string | null = null,\n      mapper?: M,\n    ): Observable<\n      undefined extends M ? StorageResult<Type> : ReturnType<NonNullable<M>>\n    > =>\n      getRuntimeContext$(hash).pipe(\n        mergeMap((ctx) =>\n          rawStorage$(hash, type, keyMapper(ctx), childTrie).pipe(\n            map((x) => (mapper ? mapper(x, ctx) : x)),\n          ),\n        ),\n      )\n\n    const storageQueries$ = (\n      hash: string,\n      queries: Array<StorageItemInput>,\n      childTrie?: string,\n    ): Observable<StorageItemResponse> =>\n      new Observable((observer) =>\n        storageSubscription(\n          hash,\n          queries,\n          childTrie || null,\n          (item) => observer.next(item),\n          (error) => observer.error(error),\n          () => {\n            observer.complete()\n          },\n        ),\n      )\n\n    const eventsAt$ = (hash: string) =>\n      storage$(\n        hash,\n        \"value\",\n        (ctx) => ctx.events.key,\n        null,\n        (x, ctx) => ctx.events.dec(x!),\n      )\n\n    return {\n      body$,\n      header$,\n      storage$,\n      storageQueries$,\n      call$,\n      eventsAt$,\n      getRuntimeContext$,\n    }\n  }\n\nexport type Archive$ = ReturnType<ReturnType<typeof getArchive>>\n","import {\n  type SubstrateClient,\n  type UnsubscribeFn,\n} from \"@polkadot-api/substrate-client\"\nimport { noop, Observable, of } from \"rxjs\"\nimport { ChainHead$, getChainHead$, RuntimeContext } from \"./chainHead\"\nimport getBroadcastTx$ from \"./tx\"\nimport { Archive$, getArchive } from \"./archive\"\n\nconst ofNullFn = () => of(null)\n\nexport interface ObservableClient {\n  chainHead$: () => ChainHead$\n  archive: (\n    getRuntime: (codeHash: string) => Observable<RuntimeContext | null>,\n  ) => Archive$\n  broadcastTx$: (transaction: string) => Observable<never>\n  destroy: UnsubscribeFn\n}\n\nexport const getObservableClient = (\n  substrateClient: SubstrateClient,\n  {\n    getMetadata,\n    setMetadata,\n  }: Partial<{\n    getMetadata: (codeHash: string) => Observable<Uint8Array | null>\n    setMetadata: (codeHash: string, rawMetadata: Uint8Array) => void\n  }> = {},\n): ObservableClient => ({\n  chainHead$: () =>\n    getChainHead$(\n      substrateClient.chainHead,\n      getMetadata || ofNullFn,\n      setMetadata || noop,\n    ),\n  archive: getArchive(substrateClient.archive),\n  broadcastTx$: getBroadcastTx$(substrateClient.transaction),\n  destroy: substrateClient.destroy,\n})\n","import { Observable, distinctUntilChanged, map, takeWhile } from \"rxjs\"\nimport { PinnedBlocks } from \"./pinned-blocks\"\n\nexport const isBestOrFinalizedBlock = (\n  blocks$: Observable<PinnedBlocks>,\n  blockHash: string,\n) =>\n  blocks$.pipe(\n    takeWhile((b) => b.blocks.has(blockHash)),\n    distinctUntilChanged(\n      (a, b) => a.finalized === b.finalized && a.best === b.best,\n    ),\n    map((pinned): \"best\" | \"finalized\" | null => {\n      if (\n        pinned.blocks.get(blockHash)!.number >\n        pinned.blocks.get(pinned.best)!.number\n      )\n        return null\n\n      const { number } = pinned.blocks.get(blockHash)!\n      let current = pinned.blocks.get(pinned.best)!\n      let isFinalized = pinned.finalized === current.hash\n      while (current.number > number) {\n        current = pinned.blocks.get(current.parent)!\n        isFinalized = isFinalized || pinned.finalized === current.hash\n      }\n      if (isFinalized) return \"finalized\"\n      return current.hash === blockHash ? \"best\" : null\n    }),\n    distinctUntilChanged(),\n    takeWhile((x) => x !== \"finalized\", true),\n  )\n","import { BlockNotPinnedError } from \"@/chainHead\"\nimport { catchError, Observable } from \"rxjs\"\n\nexport const withArchive =\n  <Args extends Array<any>, T, Hash extends string | (string | null)>(\n    chainHeadFn: (blockHash: Hash, ...args: Args) => Observable<T>,\n    archiveFn: (blockHash: string, ...args: Args) => Observable<T>,\n  ): ((blockHash: Hash, ...args: Args) => Observable<T>) =>\n  (blokHash, ...args) =>\n    chainHeadFn(blokHash, ...args).pipe(\n      catchError((e) => {\n        if (!(e instanceof BlockNotPinnedError)) throw e\n\n        return archiveFn(blokHash as string, ...args).pipe(\n          catchError((actualErr) => {\n            console.warn(actualErr)\n            throw e\n          }),\n        )\n      }),\n    )\n"],"names":["share","ReplaySubject","Observable","Subscription","defer","getLookupFn","getDynamicBuilder","AccountId","Bytes","enhanceDecoder","u16","createDecoder","u8","Struct","compactNumber","extrinsicFormat","toHex","u32","Option","Vector","map","catchError","of","mergeMap","OperationLimitError","OperationInaccessibleError","timer","concatMap","throwError","take","mergeAll","Blake2256","Keccak256","fromHex","blockHeader","noop","StopError","EMPTY","tap","unifyMetadata","metadataCodec","shareReplay","Subject","exhaustMap","merge","scan","filter","takeUntil","distinct","hash","mergeUint8","Variant","_void","withLatestFrom","DisjointError","distinctUntilChanged","switchMap","identity","endWith","takeWhile"],"mappings":"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"}