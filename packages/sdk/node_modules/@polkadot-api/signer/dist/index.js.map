{"version":3,"file":"index.js","sources":["../src/from-raw-signer.ts"],"sourcesContent":["import { mergeUint8 } from \"@polkadot-api/utils\"\nimport type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport { getSignBytes, createV4Tx } from \"@polkadot-api/signers-common\"\nimport {\n  Blake2256,\n  decAnyMetadata,\n  unifyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { merkleizeMetadata } from \"@polkadot-api/merkleize-metadata\"\n\nexport function getPolkadotSigner(\n  publicKey: Uint8Array,\n  signingType: \"Ecdsa\" | \"Ed25519\" | \"Sr25519\",\n  sign: (input: Uint8Array) => Promise<Uint8Array> | Uint8Array,\n): PolkadotSigner {\n  const signTx = async (\n    callData: Uint8Array,\n    signedExtensions: Record<\n      string,\n      {\n        identifier: string\n        value: Uint8Array\n        additionalSigned: Uint8Array\n      }\n    >,\n    metadata: Uint8Array,\n    _: number,\n    hasher = Blake2256,\n  ) => {\n    const decMeta = unifyMetadata(decAnyMetadata(metadata))\n    const extra: Array<Uint8Array> = []\n    const additionalSigned: Array<Uint8Array> = []\n    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {\n      const signedExtension = signedExtensions[identifier]\n      if (!signedExtension)\n        throw new Error(`Missing ${identifier} signed extension`)\n      extra.push(signedExtension.value)\n      additionalSigned.push(signedExtension.additionalSigned)\n    })\n\n    const toSign = mergeUint8([callData, ...extra, ...additionalSigned])\n    const signed = await sign(toSign.length > 256 ? hasher(toSign) : toSign)\n    return createV4Tx(decMeta, publicKey, signed, extra, callData, signingType)\n  }\n\n  return {\n    publicKey,\n    signTx,\n    signBytes: getSignBytes(sign),\n  }\n}\n\nconst METADATA_IDENTIFIER = \"CheckMetadataHash\"\nconst oneU8 = Uint8Array.from([1])\n\nexport const withMetadataHash = (\n  networkInfo: Parameters<typeof merkleizeMetadata>[1],\n  base: PolkadotSigner,\n): PolkadotSigner => ({\n  ...base,\n  signTx: async (callData, signedExtensions, metadata, ...rest) =>\n    base.signTx(\n      callData,\n      signedExtensions[METADATA_IDENTIFIER]\n        ? {\n            ...signedExtensions,\n            [METADATA_IDENTIFIER]: {\n              identifier: METADATA_IDENTIFIER,\n              value: oneU8,\n              additionalSigned: mergeUint8([\n                oneU8,\n                merkleizeMetadata(metadata, networkInfo).digest(),\n              ]),\n            },\n          }\n        : signedExtensions,\n      metadata,\n      ...rest,\n    ),\n})\n"],"names":["Blake2256","unifyMetadata","decAnyMetadata","mergeUint8","createV4Tx","getSignBytes","merkleizeMetadata"],"mappings":";;;;;;;AAUO,SAAS,iBAAA,CACd,SAAA,EACA,WAAA,EACA,IAAA,EACgB;AAChB,EAAA,MAAM,SAAS,OACb,QAAA,EACA,kBAQA,QAAA,EACA,CAAA,EACA,SAASA,2BAAA,KACN;AACH,IAAA,MAAM,OAAA,GAAUC,+BAAA,CAAcC,gCAAA,CAAe,QAAQ,CAAC,CAAA;AACtD,IAAA,MAAM,QAA2B,EAAC;AAClC,IAAA,MAAM,mBAAsC,EAAC;AAC7C,IAAA,OAAA,CAAQ,UAAU,gBAAA,CAAiB,GAAA,CAAI,CAAC,EAAE,YAAW,KAAM;AACzD,MAAA,MAAM,eAAA,GAAkB,iBAAiB,UAAU,CAAA;AACnD,MAAA,IAAI,CAAC,eAAA;AACH,QAAA,MAAM,IAAI,KAAA,CAAM,CAAA,QAAA,EAAW,UAAU,CAAA,iBAAA,CAAmB,CAAA;AAC1D,MAAA,KAAA,CAAM,IAAA,CAAK,gBAAgB,KAAK,CAAA;AAChC,MAAA,gBAAA,CAAiB,IAAA,CAAK,gBAAgB,gBAAgB,CAAA;AAAA,IACxD,CAAC,CAAA;AAED,IAAA,MAAM,MAAA,GAASC,iBAAW,CAAC,QAAA,EAAU,GAAG,KAAA,EAAO,GAAG,gBAAgB,CAAC,CAAA;AACnE,IAAA,MAAM,MAAA,GAAS,MAAM,IAAA,CAAK,MAAA,CAAO,SAAS,GAAA,GAAM,MAAA,CAAO,MAAM,CAAA,GAAI,MAAM,CAAA;AACvE,IAAA,OAAOC,yBAAW,OAAA,EAAS,SAAA,EAAW,MAAA,EAAQ,KAAA,EAAO,UAAU,WAAW,CAAA;AAAA,EAC5E,CAAA;AAEA,EAAA,OAAO;AAAA,IACL,SAAA;AAAA,IACA,MAAA;AAAA,IACA,SAAA,EAAWC,2BAAa,IAAI;AAAA,GAC9B;AACF;AAEA,MAAM,mBAAA,GAAsB,mBAAA;AAC5B,MAAM,KAAA,GAAQ,UAAA,CAAW,IAAA,CAAK,CAAC,CAAC,CAAC,CAAA;AAE1B,MAAM,gBAAA,GAAmB,CAC9B,WAAA,EACA,IAAA,MACoB;AAAA,EACpB,GAAG,IAAA;AAAA,EACH,QAAQ,OAAO,QAAA,EAAU,gBAAA,EAAkB,QAAA,EAAA,GAAa,SACtD,IAAA,CAAK,MAAA;AAAA,IACH,QAAA;AAAA,IACA,gBAAA,CAAiB,mBAAmB,CAAA,GAChC;AAAA,MACE,GAAG,gBAAA;AAAA,MACH,CAAC,mBAAmB,GAAG;AAAA,QACrB,UAAA,EAAY,mBAAA;AAAA,QACZ,KAAA,EAAO,KAAA;AAAA,QACP,kBAAkBF,gBAAA,CAAW;AAAA,UAC3B,KAAA;AAAA,UACAG,mCAAA,CAAkB,QAAA,EAAU,WAAW,CAAA,CAAE,MAAA;AAAO,SACjD;AAAA;AACH,KACF,GACA,gBAAA;AAAA,IACJ,QAAA;AAAA,IACA,GAAG;AAAA;AAET,CAAA;;;;;"}