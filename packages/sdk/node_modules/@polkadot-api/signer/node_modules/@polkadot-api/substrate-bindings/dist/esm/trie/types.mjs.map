{"version":3,"file":"types.mjs","sources":["../../../src/trie/types.ts"],"sourcesContent":["import { type HexString } from \"../codecs\"\n\nexport const TrieNodeHeaders = {\n  Leaf: \"Leaf\",\n  Branch: \"Branch\",\n  BranchWithVal: \"BranchWithVal\",\n  LeafWithHash: \"LeafWithHash\",\n  BranchWithHash: \"BranchWithHash\",\n  Empty: \"Empty\",\n  Reserved: \"Reserved\",\n} as const\ntype TrieNodeHeaders = typeof TrieNodeHeaders\nexport type TrieNodeHeaderKey =\n  (typeof TrieNodeHeaders)[keyof typeof TrieNodeHeaders]\n\nexport type Nibble =\n  | \"0\"\n  | \"1\"\n  | \"2\"\n  | \"3\"\n  | \"4\"\n  | \"5\"\n  | \"6\"\n  | \"7\"\n  | \"8\"\n  | \"9\"\n  | \"a\"\n  | \"b\"\n  | \"c\"\n  | \"d\"\n  | \"e\"\n  | \"f\"\n\nexport type TrieNode = { partialKey: string } & (\n  | {\n      type: TrieNodeHeaders[\"Empty\"] | TrieNodeHeaders[\"Reserved\"]\n    }\n  | {\n      type: TrieNodeHeaders[\"Leaf\"] | TrieNodeHeaders[\"LeafWithHash\"]\n      value: HexString\n    }\n  | ({ children: Record<Nibble, HexString> } & (\n      | { type: TrieNodeHeaders[\"Branch\"] }\n      | {\n          type:\n            | TrieNodeHeaders[\"BranchWithHash\"]\n            | TrieNodeHeaders[\"BranchWithVal\"]\n          value: HexString\n        }\n    ))\n)\nexport type ProofTrieNode = {\n  hash: HexString\n  parent?: HexString\n} & (TrieNode | { type: \"Raw\"; value: HexString })\n"],"names":[],"mappings":"AAEO,MAAM,eAAA,GAAkB;AAAA,EAC7B,IAAA,EAAM,MAAA;AAAA,EACN,MAAA,EAAQ,QAAA;AAAA,EACR,aAAA,EAAe,eAAA;AAAA,EACf,YAAA,EAAc,cAAA;AAAA,EACd,cAAA,EAAgB,gBAAA;AAAA,EAChB,KAAA,EAAO,OAAA;AAAA,EACP,QAAA,EAAU;AACZ;;;;"}