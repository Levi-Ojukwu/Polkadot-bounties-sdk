{"version":3,"file":"injected-extensions.mjs","sources":["../../src/injected-extensions.ts"],"sourcesContent":["import { getPolkadotSignerFromPjs } from \"./from-pjs-account\"\nimport type {\n  InjectedAccount,\n  InjectedExtension,\n  InjectedPolkadotAccount,\n  KeypairType,\n} from \"./types\"\n\nexport type {\n  KeypairType,\n  InjectedExtension,\n  InjectedAccount,\n  InjectedPolkadotAccount,\n}\n\nconst supportedAccountTypes = new Set<KeypairType | \"ethereum\">([\n  \"ed25519\",\n  \"sr25519\",\n  \"ecdsa\",\n  \"ethereum\",\n])\n\nexport const connectInjectedExtension = async (\n  name: string,\n  dappName?: string,\n): Promise<InjectedExtension> => {\n  let entry = window.injectedWeb3?.[name]\n\n  if (!entry) throw new Error(`Unavailable extension: \"${name}\"`)\n\n  const enabledExtension = await entry.enable(dappName)\n  const signPayload = enabledExtension.signer.signPayload.bind(\n    enabledExtension.signer,\n  )\n  const signRaw = enabledExtension.signer.signRaw.bind(enabledExtension.signer)\n\n  const toPolkadotInjected = (\n    accounts: InjectedAccount[],\n  ): InjectedPolkadotAccount[] =>\n    accounts\n      .filter(({ type }) => supportedAccountTypes.has(type!))\n      .map((x) => {\n        const polkadotSigner = getPolkadotSignerFromPjs(\n          x.address,\n          signPayload,\n          signRaw,\n        )\n        return {\n          ...x,\n          polkadotSigner,\n        }\n      })\n\n  let currentAccounts: InjectedPolkadotAccount[] = toPolkadotInjected(\n    await enabledExtension.accounts.get(),\n  )\n\n  const listeners = new Set<(accounts: InjectedPolkadotAccount[]) => void>()\n  const stop = enabledExtension.accounts.subscribe((x) => {\n    currentAccounts = toPolkadotInjected(x)\n    listeners.forEach((cb) => {\n      cb(currentAccounts)\n    })\n  })\n\n  return {\n    name,\n    getAccounts: () => currentAccounts,\n    subscribe: (cb: (accounts: InjectedPolkadotAccount[]) => void) => {\n      listeners.add(cb)\n      return () => {\n        listeners.delete(cb)\n      }\n    },\n    disconnect: () => {\n      stop()\n    },\n  }\n}\n\nexport const getInjectedExtensions = (): Array<string> => {\n  const { injectedWeb3 } = window\n  return injectedWeb3 ? Object.keys(injectedWeb3) : []\n}\n"],"names":[],"mappings":";;AAeA,MAAM,qBAAA,uBAA4B,GAAA,CAA8B;AAAA,EAC9D,SAAA;AAAA,EACA,SAAA;AAAA,EACA,OAAA;AAAA,EACA;AACF,CAAC,CAAA;AAEM,MAAM,wBAAA,GAA2B,OACtC,IAAA,EACA,QAAA,KAC+B;AAC/B,EAAA,IAAI,KAAA,GAAQ,MAAA,CAAO,YAAA,GAAe,IAAI,CAAA;AAEtC,EAAA,IAAI,CAAC,KAAA,EAAO,MAAM,IAAI,KAAA,CAAM,CAAA,wBAAA,EAA2B,IAAI,CAAA,CAAA,CAAG,CAAA;AAE9D,EAAA,MAAM,gBAAA,GAAmB,MAAM,KAAA,CAAM,MAAA,CAAO,QAAQ,CAAA;AACpD,EAAA,MAAM,WAAA,GAAc,gBAAA,CAAiB,MAAA,CAAO,WAAA,CAAY,IAAA;AAAA,IACtD,gBAAA,CAAiB;AAAA,GACnB;AACA,EAAA,MAAM,UAAU,gBAAA,CAAiB,MAAA,CAAO,OAAA,CAAQ,IAAA,CAAK,iBAAiB,MAAM,CAAA;AAE5E,EAAA,MAAM,qBAAqB,CACzB,QAAA,KAEA,QAAA,CACG,MAAA,CAAO,CAAC,EAAE,IAAA,EAAK,KAAM,qBAAA,CAAsB,IAAI,IAAK,CAAC,CAAA,CACrD,GAAA,CAAI,CAAC,CAAA,KAAM;AACV,IAAA,MAAM,cAAA,GAAiB,wBAAA;AAAA,MACrB,CAAA,CAAE,OAAA;AAAA,MACF,WAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,OAAO;AAAA,MACL,GAAG,CAAA;AAAA,MACH;AAAA,KACF;AAAA,EACF,CAAC,CAAA;AAEL,EAAA,IAAI,eAAA,GAA6C,kBAAA;AAAA,IAC/C,MAAM,gBAAA,CAAiB,QAAA,CAAS,GAAA;AAAI,GACtC;AAEA,EAAA,MAAM,SAAA,uBAAgB,GAAA,EAAmD;AACzE,EAAA,MAAM,IAAA,GAAO,gBAAA,CAAiB,QAAA,CAAS,SAAA,CAAU,CAAC,CAAA,KAAM;AACtD,IAAA,eAAA,GAAkB,mBAAmB,CAAC,CAAA;AACtC,IAAA,SAAA,CAAU,OAAA,CAAQ,CAAC,EAAA,KAAO;AACxB,MAAA,EAAA,CAAG,eAAe,CAAA;AAAA,IACpB,CAAC,CAAA;AAAA,EACH,CAAC,CAAA;AAED,EAAA,OAAO;AAAA,IACL,IAAA;AAAA,IACA,aAAa,MAAM,eAAA;AAAA,IACnB,SAAA,EAAW,CAAC,EAAA,KAAsD;AAChE,MAAA,SAAA,CAAU,IAAI,EAAE,CAAA;AAChB,MAAA,OAAO,MAAM;AACX,QAAA,SAAA,CAAU,OAAO,EAAE,CAAA;AAAA,MACrB,CAAA;AAAA,IACF,CAAA;AAAA,IACA,YAAY,MAAM;AAChB,MAAA,IAAA,EAAK;AAAA,IACP;AAAA,GACF;AACF;AAEO,MAAM,wBAAwB,MAAqB;AACxD,EAAA,MAAM,EAAE,cAAa,GAAI,MAAA;AACzB,EAAA,OAAO,YAAA,GAAe,MAAA,CAAO,IAAA,CAAK,YAAY,IAAI,EAAC;AACrD;;;;"}