{"version":3,"file":"from-pjs-account.mjs","sources":["../../src/from-pjs-account.ts"],"sourcesContent":["import type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport { createV4Tx } from \"@polkadot-api/signers-common\"\nimport {\n  AccountId,\n  Blake2256,\n  decAnyMetadata,\n  unifyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { fromHex, toHex } from \"@polkadot-api/utils\"\nimport * as signedExtensionMappers from \"./pjs-signed-extensions-mappers\"\nimport { SignPayload, SignRaw, SignerPayloadJSON } from \"./types\"\n\nconst accountIdEnc = AccountId().enc\nconst getPublicKey = (address: string) =>\n  address.startsWith(\"0x\") ? fromHex(address) : accountIdEnc(address)\n\nexport function getPolkadotSignerFromPjs(\n  address: string,\n  signPayload: SignPayload,\n  signRaw: SignRaw,\n): PolkadotSigner {\n  const signBytes = (data: Uint8Array) =>\n    signRaw({\n      address,\n      data: toHex(data),\n      type: \"bytes\",\n    }).then(({ signature }) => fromHex(signature))\n  const publicKey = getPublicKey(address)\n  const signTx = async (\n    callData: Uint8Array,\n    signedExtensions: Record<\n      string,\n      {\n        identifier: string\n        value: Uint8Array\n        additionalSigned: Uint8Array\n      }\n    >,\n    metadata: Uint8Array,\n    atBlockNumber: number,\n    _ = Blake2256,\n  ) => {\n    const decMeta = unifyMetadata(decAnyMetadata(metadata))\n\n    const pjs: Partial<SignerPayloadJSON> = {}\n    pjs.signedExtensions = []\n\n    const { version } = decMeta.extrinsic\n    const extra: Array<Uint8Array> = []\n\n    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {\n      const signedExtension = signedExtensions[identifier]\n      if (!signedExtension)\n        throw new Error(`Missing ${identifier} signed-extension`)\n      extra.push(signedExtension.value)\n\n      pjs.signedExtensions!.push(identifier)\n\n      if (!signedExtensionMappers[identifier as \"CheckMortality\"]) {\n        if (\n          signedExtension.value.length === 0 &&\n          signedExtension.additionalSigned.length === 0\n        )\n          return\n        throw new Error(\n          `PJS does not support this signed-extension: ${identifier}`,\n        )\n      }\n\n      Object.assign(\n        pjs,\n        signedExtensionMappers[identifier as \"CheckMortality\"](\n          signedExtension,\n          atBlockNumber,\n        ),\n      )\n    })\n\n    const checkedVersion = version.includes(4) ? 4 : null\n    if (checkedVersion == null)\n      throw new Error(\"Only extrinsic v4 is supported\")\n    pjs.address = address\n    pjs.method = toHex(callData)\n    pjs.version = checkedVersion\n    pjs.withSignedTransaction = true // we allow the wallet to change the payload\n\n    const result = await signPayload(pjs as SignerPayloadJSON)\n    const tx = result.signedTransaction\n    if (tx) return typeof tx === \"string\" ? fromHex(tx) : tx\n\n    return createV4Tx(\n      decMeta,\n      publicKey,\n      fromHex(result.signature),\n      extra,\n      callData,\n    )\n  }\n\n  return { publicKey, signTx, signBytes }\n}\n"],"names":["signedExtensionMappers"],"mappings":"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"}