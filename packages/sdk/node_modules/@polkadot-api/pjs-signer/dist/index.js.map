{"version":3,"file":"index.js","sources":["../src/pjs-signed-extensions-mappers.ts","../src/from-pjs-account.ts","../src/injected-extensions.ts"],"sourcesContent":["import { HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  Bytes,\n  Struct,\n  compact,\n  u32,\n  Option,\n  compactBn,\n} from \"@polkadot-api/substrate-bindings\"\nimport { toHex } from \"@polkadot-api/utils\"\n\ntype SignedExtension = {\n  value: Uint8Array\n  additionalSigned: Uint8Array\n}\n\nconst toPjsHex = (value: number | bigint, minByteLen?: number) => {\n  let inner = value.toString(16)\n  inner = (inner.length % 2 ? \"0\" : \"\") + inner\n  const nPaddedBytes = Math.max(0, (minByteLen || 0) - inner.length / 2)\n  return \"0x\" + \"00\".repeat(nPaddedBytes) + inner\n}\n\nexport const CheckGenesis = ({\n  additionalSigned,\n}: SignedExtension): { genesisHash: string } => ({\n  genesisHash: toHex(additionalSigned),\n})\n\nexport const CheckNonce = ({\n  value,\n}: SignedExtension): { nonce: HexString } => {\n  // nonce is a u32 in pjs => 4 bytes\n  return { nonce: toPjsHex(compact.dec(value), 4) }\n}\n\nexport const CheckTxVersion = ({\n  additionalSigned,\n}: SignedExtension): { transactionVersion: HexString } => {\n  return { transactionVersion: toPjsHex(u32.dec(additionalSigned), 4) }\n}\n\nconst assetTxPaymentDec = Struct({\n  tip: compact,\n  asset: Option(Bytes(Infinity)),\n}).dec\n\nexport const ChargeAssetTxPayment = ({\n  value,\n}: SignedExtension): { aseetId?: string; tip?: string } => {\n  const { tip, asset } = assetTxPaymentDec(value)\n\n  return {\n    ...(asset ? { assetId: toHex(asset) } : {}),\n    tip: toPjsHex(tip, 16),\n  }\n}\n\nexport const ChargeTransactionPayment = ({\n  value,\n}: SignedExtension): { tip: HexString } => ({\n  tip: toPjsHex(compactBn.dec(value), 16), // u128 => 16 bytes\n})\n\nexport const CheckMortality = (\n  { value, additionalSigned }: SignedExtension,\n  blockNumber: number,\n): { era: HexString; blockHash: HexString; blockNumber: HexString } => ({\n  era: toHex(value),\n  blockHash: toHex(additionalSigned),\n  blockNumber: toPjsHex(blockNumber, 4),\n})\n\nexport const CheckSpecVersion = ({\n  additionalSigned,\n}: SignedExtension): { specVersion: HexString } => ({\n  specVersion: toPjsHex(u32.dec(additionalSigned), 4),\n})\n\nexport const CheckMetadataHash = ({\n  value,\n  additionalSigned,\n}: SignedExtension): { mode?: number; metadataHash?: HexString } =>\n  value.length && value[0]\n    ? {\n        mode: 1,\n        metadataHash: toHex(\n          additionalSigned.length\n            ? additionalSigned.slice(1)\n            : additionalSigned,\n        ),\n      }\n    : {}\n","import type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport { createV4Tx } from \"@polkadot-api/signers-common\"\nimport {\n  AccountId,\n  Blake2256,\n  decAnyMetadata,\n  unifyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { fromHex, toHex } from \"@polkadot-api/utils\"\nimport * as signedExtensionMappers from \"./pjs-signed-extensions-mappers\"\nimport { SignPayload, SignRaw, SignerPayloadJSON } from \"./types\"\n\nconst accountIdEnc = AccountId().enc\nconst getPublicKey = (address: string) =>\n  address.startsWith(\"0x\") ? fromHex(address) : accountIdEnc(address)\n\nexport function getPolkadotSignerFromPjs(\n  address: string,\n  signPayload: SignPayload,\n  signRaw: SignRaw,\n): PolkadotSigner {\n  const signBytes = (data: Uint8Array) =>\n    signRaw({\n      address,\n      data: toHex(data),\n      type: \"bytes\",\n    }).then(({ signature }) => fromHex(signature))\n  const publicKey = getPublicKey(address)\n  const signTx = async (\n    callData: Uint8Array,\n    signedExtensions: Record<\n      string,\n      {\n        identifier: string\n        value: Uint8Array\n        additionalSigned: Uint8Array\n      }\n    >,\n    metadata: Uint8Array,\n    atBlockNumber: number,\n    _ = Blake2256,\n  ) => {\n    const decMeta = unifyMetadata(decAnyMetadata(metadata))\n\n    const pjs: Partial<SignerPayloadJSON> = {}\n    pjs.signedExtensions = []\n\n    const { version } = decMeta.extrinsic\n    const extra: Array<Uint8Array> = []\n\n    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {\n      const signedExtension = signedExtensions[identifier]\n      if (!signedExtension)\n        throw new Error(`Missing ${identifier} signed-extension`)\n      extra.push(signedExtension.value)\n\n      pjs.signedExtensions!.push(identifier)\n\n      if (!signedExtensionMappers[identifier as \"CheckMortality\"]) {\n        if (\n          signedExtension.value.length === 0 &&\n          signedExtension.additionalSigned.length === 0\n        )\n          return\n        throw new Error(\n          `PJS does not support this signed-extension: ${identifier}`,\n        )\n      }\n\n      Object.assign(\n        pjs,\n        signedExtensionMappers[identifier as \"CheckMortality\"](\n          signedExtension,\n          atBlockNumber,\n        ),\n      )\n    })\n\n    const checkedVersion = version.includes(4) ? 4 : null\n    if (checkedVersion == null)\n      throw new Error(\"Only extrinsic v4 is supported\")\n    pjs.address = address\n    pjs.method = toHex(callData)\n    pjs.version = checkedVersion\n    pjs.withSignedTransaction = true // we allow the wallet to change the payload\n\n    const result = await signPayload(pjs as SignerPayloadJSON)\n    const tx = result.signedTransaction\n    if (tx) return typeof tx === \"string\" ? fromHex(tx) : tx\n\n    return createV4Tx(\n      decMeta,\n      publicKey,\n      fromHex(result.signature),\n      extra,\n      callData,\n    )\n  }\n\n  return { publicKey, signTx, signBytes }\n}\n","import { getPolkadotSignerFromPjs } from \"./from-pjs-account\"\nimport type {\n  InjectedAccount,\n  InjectedExtension,\n  InjectedPolkadotAccount,\n  KeypairType,\n} from \"./types\"\n\nexport type {\n  KeypairType,\n  InjectedExtension,\n  InjectedAccount,\n  InjectedPolkadotAccount,\n}\n\nconst supportedAccountTypes = new Set<KeypairType | \"ethereum\">([\n  \"ed25519\",\n  \"sr25519\",\n  \"ecdsa\",\n  \"ethereum\",\n])\n\nexport const connectInjectedExtension = async (\n  name: string,\n  dappName?: string,\n): Promise<InjectedExtension> => {\n  let entry = window.injectedWeb3?.[name]\n\n  if (!entry) throw new Error(`Unavailable extension: \"${name}\"`)\n\n  const enabledExtension = await entry.enable(dappName)\n  const signPayload = enabledExtension.signer.signPayload.bind(\n    enabledExtension.signer,\n  )\n  const signRaw = enabledExtension.signer.signRaw.bind(enabledExtension.signer)\n\n  const toPolkadotInjected = (\n    accounts: InjectedAccount[],\n  ): InjectedPolkadotAccount[] =>\n    accounts\n      .filter(({ type }) => supportedAccountTypes.has(type!))\n      .map((x) => {\n        const polkadotSigner = getPolkadotSignerFromPjs(\n          x.address,\n          signPayload,\n          signRaw,\n        )\n        return {\n          ...x,\n          polkadotSigner,\n        }\n      })\n\n  let currentAccounts: InjectedPolkadotAccount[] = toPolkadotInjected(\n    await enabledExtension.accounts.get(),\n  )\n\n  const listeners = new Set<(accounts: InjectedPolkadotAccount[]) => void>()\n  const stop = enabledExtension.accounts.subscribe((x) => {\n    currentAccounts = toPolkadotInjected(x)\n    listeners.forEach((cb) => {\n      cb(currentAccounts)\n    })\n  })\n\n  return {\n    name,\n    getAccounts: () => currentAccounts,\n    subscribe: (cb: (accounts: InjectedPolkadotAccount[]) => void) => {\n      listeners.add(cb)\n      return () => {\n        listeners.delete(cb)\n      }\n    },\n    disconnect: () => {\n      stop()\n    },\n  }\n}\n\nexport const getInjectedExtensions = (): Array<string> => {\n  const { injectedWeb3 } = window\n  return injectedWeb3 ? Object.keys(injectedWeb3) : []\n}\n"],"names":["toHex","compact","u32","Struct","Option","Bytes","compactBn","AccountId","fromHex","Blake2256","unifyMetadata","decAnyMetadata","createV4Tx"],"mappings":"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"}