const createDescendantValues = (request) => {
  return (rootKey, at, onValues, onError, onDone) => {
    let isRunning = true;
    let areAllKeysDone = false;
    let onGoingValues = 0;
    const _onError = (e) => {
      if (isRunning) {
        isRunning = false;
        onError(e);
      }
    };
    const PAGE_SIZE = 1e3;
    const pullKeys = (startAtKey) => {
      request(
        "state_getKeysPaged",
        [rootKey, PAGE_SIZE, startAtKey || void 0, at],
        (result) => {
          if (!isRunning) return;
          if (result.length > 0) {
            onGoingValues++;
            request(
              "state_queryStorageAt",
              [result, at],
              ([{ changes }]) => {
                if (!isRunning) return;
                onGoingValues--;
                onValues(changes);
                if (areAllKeysDone && !onGoingValues) onDone();
              },
              _onError
            );
          }
          if (result.length < PAGE_SIZE) {
            areAllKeysDone = true;
            if (!onGoingValues) onDone();
          } else pullKeys(result.at(-1));
        },
        _onError
      );
    };
    pullKeys();
    return () => {
      isRunning = false;
    };
  };
};

export { createDescendantValues };
//# sourceMappingURL=descendant-values.mjs.map
