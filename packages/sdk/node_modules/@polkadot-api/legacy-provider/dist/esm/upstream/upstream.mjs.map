{"version":3,"file":"upstream.mjs","sources":["../../../src/upstream/upstream.ts"],"sourcesContent":["import type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nimport { createClient } from \"@polkadot-api/raw-client\"\nimport { getBlocks$ } from \"./blocks\"\nimport { createDescendantValues } from \"./descendant-values\"\nimport { map, Observable } from \"rxjs\"\nimport { fromHex, toHex } from \"@polkadot-api/utils\"\nimport { withLatestFromBp } from \"@/utils/with-latest-from-bp\"\nimport { createClosestDescendantMerkleValue } from \"./proofs\"\n\nexport const createUpstream = (provider: JsonRpcProvider) => {\n  const { request, disconnect } = createClient(provider)\n\n  const simpleRequest = <Args extends Array<any>, Payload>(\n    method: string,\n    params: Args,\n    onSuccess: (value: Payload) => void,\n    onError: (e: any) => void,\n  ): (() => void) => request(method, params, { onSuccess, onError })\n\n  const obsRequest = <Args extends Array<any>, Payload>(\n    method: string,\n    params: Args,\n  ): Observable<Payload> =>\n    new Observable((observer) =>\n      simpleRequest<Args, Payload>(\n        method,\n        params,\n        (v) => {\n          observer.next(v)\n          observer.complete()\n        },\n        (e) => {\n          observer.error(e)\n        },\n      ),\n    )\n\n  const {\n    upstream: getBlocks,\n    finalized$,\n    getHeader$,\n    hasher$,\n  } = getBlocks$(request, obsRequest)\n\n  const runtimeCall = (atBlock: string, method: string, data: string) =>\n    obsRequest<[string, string, string], string | null>(\"state_call\", [\n      method,\n      data,\n      atBlock,\n    ])\n\n  const innerStgDescendantVals = createDescendantValues(simpleRequest)\n  const stgDescendantValues = (at: string, rootKey: string) =>\n    new Observable<Array<[string, string]>>((observer) =>\n      innerStgDescendantVals(\n        rootKey,\n        at,\n        (values) => {\n          observer.next(values)\n        },\n        (e) => {\n          observer.error(e)\n        },\n        () => {\n          observer.complete()\n        },\n      ),\n    )\n\n  const stgDescendantHashes = (at: string, rootKey: string) =>\n    stgDescendantValues(at, rootKey).pipe(\n      withLatestFromBp(hasher$),\n      map(([hasher, results]) =>\n        results.map(\n          ([key, value]) =>\n            [key, toHex(hasher(fromHex(value)))] as [string, string],\n        ),\n      ),\n    )\n\n  const stgClosestDescendant = createClosestDescendantMerkleValue(obsRequest)\n\n  const [stgValue, stgHash] = [\"state_getStorage\", \"state_getStorageHash\"].map(\n    (method) => (atBlock: string, key: string) =>\n      obsRequest<[string, string | undefined], string | null>(method, [\n        key,\n        atBlock,\n      ]),\n  )\n\n  const methods = obsRequest<[], { methods: string[] }>(\"rpc_methods\", [])\n  const chainName = obsRequest<[], string>(\"system_name\", [])\n  const properties = obsRequest<[], {}>(\"system_properties\", [])\n  const getBody = (at: string) =>\n    obsRequest<[string], { block: { extrinsics: Array<string> } }>(\n      \"chain_getBlock\",\n      [at],\n    )\n\n  const getBlockHash$ = (height: number) =>\n    obsRequest<[height: number], string>(\"chain_getBlockHash\", [height])\n  const genesisHash = getBlockHash$(0)\n\n  return {\n    getBlocks,\n    finalized$,\n    getBlockHash$,\n    getHeader$,\n    stgValue,\n    stgHash,\n    stgDescendantValues,\n    stgDescendantHashes,\n    stgClosestDescendant,\n    runtimeCall,\n    getBody,\n    chainName,\n    properties,\n    genesisHash,\n    disconnect,\n    methods,\n    request: simpleRequest,\n    obsRequest,\n  }\n}\n"],"names":[],"mappings":"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"}