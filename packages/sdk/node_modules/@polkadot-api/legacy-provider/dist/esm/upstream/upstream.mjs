import { createClient } from '@polkadot-api/raw-client';
import { getBlocks$ } from './blocks/index.mjs';
import { createDescendantValues } from './descendant-values.mjs';
import { Observable, map } from 'rxjs';
import { toHex, fromHex } from '@polkadot-api/utils';
import { withLatestFromBp } from '../utils/with-latest-from-bp.mjs';
import { createClosestDescendantMerkleValue } from './proofs.mjs';

const createUpstream = (provider) => {
  const { request, disconnect } = createClient(provider);
  const simpleRequest = (method, params, onSuccess, onError) => request(method, params, { onSuccess, onError });
  const obsRequest = (method, params) => new Observable(
    (observer) => simpleRequest(
      method,
      params,
      (v) => {
        observer.next(v);
        observer.complete();
      },
      (e) => {
        observer.error(e);
      }
    )
  );
  const {
    upstream: getBlocks,
    finalized$,
    getHeader$,
    hasher$
  } = getBlocks$(request, obsRequest);
  const runtimeCall = (atBlock, method, data) => obsRequest("state_call", [
    method,
    data,
    atBlock
  ]);
  const innerStgDescendantVals = createDescendantValues(simpleRequest);
  const stgDescendantValues = (at, rootKey) => new Observable(
    (observer) => innerStgDescendantVals(
      rootKey,
      at,
      (values) => {
        observer.next(values);
      },
      (e) => {
        observer.error(e);
      },
      () => {
        observer.complete();
      }
    )
  );
  const stgDescendantHashes = (at, rootKey) => stgDescendantValues(at, rootKey).pipe(
    withLatestFromBp(hasher$),
    map(
      ([hasher, results]) => results.map(
        ([key, value]) => [key, toHex(hasher(fromHex(value)))]
      )
    )
  );
  const stgClosestDescendant = createClosestDescendantMerkleValue(obsRequest);
  const [stgValue, stgHash] = ["state_getStorage", "state_getStorageHash"].map(
    (method) => (atBlock, key) => obsRequest(method, [
      key,
      atBlock
    ])
  );
  const methods = obsRequest("rpc_methods", []);
  const chainName = obsRequest("system_name", []);
  const properties = obsRequest("system_properties", []);
  const getBody = (at) => obsRequest(
    "chain_getBlock",
    [at]
  );
  const getBlockHash$ = (height) => obsRequest("chain_getBlockHash", [height]);
  const genesisHash = getBlockHash$(0);
  return {
    getBlocks,
    finalized$,
    getBlockHash$,
    getHeader$,
    stgValue,
    stgHash,
    stgDescendantValues,
    stgDescendantHashes,
    stgClosestDescendant,
    runtimeCall,
    getBody,
    chainName,
    properties,
    genesisHash,
    disconnect,
    methods,
    request: simpleRequest,
    obsRequest
  };
};

export { createUpstream };
//# sourceMappingURL=upstream.mjs.map
