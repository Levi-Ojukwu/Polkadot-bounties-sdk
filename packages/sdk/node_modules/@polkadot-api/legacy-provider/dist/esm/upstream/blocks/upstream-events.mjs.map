{"version":3,"file":"upstream-events.mjs","sources":["../../../../src/upstream/blocks/upstream-events.ts"],"sourcesContent":["import { DecentHeader, ShittyHeader } from \"@/types\"\nimport { getFromShittyHeader } from \"@/utils/fromShittyHeader\"\nimport { getHasherFromBlock } from \"@/utils/get-hasher-from-block\"\nimport { withLatestFromBp } from \"@/utils/with-latest-from-bp\"\nimport { ClientRequest } from \"@polkadot-api/raw-client\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\nimport { noop } from \"@polkadot-api/utils\"\nimport {\n  combineLatest,\n  concat,\n  map,\n  mergeMap,\n  Observable,\n  of,\n  pipe,\n  share,\n  shareReplay,\n  Subject,\n  take,\n  takeUntil,\n  toArray,\n} from \"rxjs\"\n\nexport const getUpstreamEvents = (\n  request: ClientRequest<any, any>,\n  request$: <Args extends Array<any>, Payload>(\n    method: string,\n    params: Args,\n  ) => Observable<Payload>,\n) => {\n  const firstFinHeader$ = new Subject<ShittyHeader>()\n  const hasher$ = firstFinHeader$.pipe(\n    mergeMap((h) =>\n      request$<[number | string], HexString>(\"chain_getBlockHash\", [\n        h.number,\n      ]).pipe(map(getHasherFromBlock(h))),\n    ),\n    shareReplay(1),\n  )\n  const fromShittyHeader$ = hasher$.pipe(\n    map(getFromShittyHeader),\n    shareReplay(1),\n  )\n  const toNiceHeader = pipe(\n    withLatestFromBp<\n      (x: ShittyHeader) => ReturnType<ReturnType<typeof getFromShittyHeader>>,\n      ShittyHeader\n    >(fromShittyHeader$),\n    map(([fromShittyHeader, shitHeader]) => fromShittyHeader(shitHeader)),\n  )\n\n  const getHeaders$ = (\n    startMethod: string,\n    stopMethod: string,\n    isFin = false,\n  ): Observable<DecentHeader> =>\n    new Observable<ShittyHeader>((observer) => {\n      const onError = (e: any) => {\n        observer.error(e)\n      }\n\n      let stop: (() => void) | null = null\n      let isFirstFin = isFin\n      ;(request as ClientRequest<string, ShittyHeader>)(startMethod, [], {\n        onSuccess: (subId, followSub) => {\n          const done = followSub(subId, {\n            next: (v) => {\n              if (isFirstFin) {\n                isFirstFin = false\n                firstFinHeader$.next(v)\n                firstFinHeader$.complete()\n              }\n              observer.next(v)\n            },\n            error: onError,\n          })\n          const unsubscribe = () => {\n            done()\n            try {\n              request(stopMethod, [subId], {\n                onError: noop,\n                onSuccess: noop,\n              })\n            } catch {}\n          }\n          if (stop !== null) unsubscribe()\n          else stop = unsubscribe\n        },\n        onError,\n      })\n\n      return () => {\n        stop?.()\n        stop = noop\n      }\n    }).pipe(toNiceHeader)\n\n  const allHeads$ = getHeaders$(\n    \"chain_subscribeAllHeads\",\n    \"chain_unsubscribeAllHeads\",\n  ).pipe(share())\n\n  const finalized$ = getHeaders$(\n    \"chain_subscribeFinalizedHeads\",\n    \"chain_unsubscribeFinalizedHeads\",\n    true,\n  ).pipe(shareReplay(1))\n\n  const getHeader$ = (hash: string) =>\n    request$<[string], ShittyHeader>(\"chain_getHeader\", [hash]).pipe(\n      toNiceHeader,\n    )\n\n  const getRecursiveHeader = (hash: string): Observable<DecentHeader> =>\n    getHeader$(hash).pipe(\n      mergeMap((header) =>\n        concat(of(header), getRecursiveHeader(header.parent)),\n      ),\n    )\n\n  const gap$: Observable<DecentHeader[]> = combineLatest([\n    allHeads$.pipe(take(1)),\n    finalized$.pipe(take(1)),\n  ]).pipe(\n    mergeMap(([latest, fin]) => {\n      const nMissing = latest.number - fin.number - 1\n      return concat(\n        getRecursiveHeader(latest.parent).pipe(take(Math.max(0, nMissing))),\n        of(fin),\n      )\n    }),\n    toArray(),\n    share(),\n  )\n  const collected$ = allHeads$.pipe(takeUntil(gap$), toArray())\n  const initial$ = combineLatest([collected$, gap$]).pipe(\n    map(([collected, gap]) => [...gap.reverse(), ...collected]),\n  )\n\n  return {\n    initial$,\n    allHeads$,\n    finalized$,\n    hasher$,\n    getRecursiveHeader,\n    getHeader$,\n  }\n}\n\nexport type UpstreamEvents = ReturnType<typeof getUpstreamEvents>\n"],"names":[],"mappings":"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"}