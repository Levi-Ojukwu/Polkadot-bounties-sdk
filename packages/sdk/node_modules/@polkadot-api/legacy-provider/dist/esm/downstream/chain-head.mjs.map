{"version":3,"file":"chain-head.mjs","sources":["../../../src/downstream/chain-head.ts"],"sourcesContent":["import { createUpstream } from \"@/upstream/upstream\"\nimport { createOpaqueToken } from \"@/utils/create-opaque-token\"\nimport { noop } from \"@polkadot-api/utils\"\nimport { finalize } from \"rxjs\"\nimport { areItemsValid, getStg$ } from \"./storage\"\n\nexport const chainHeadMethods = Object.fromEntries(\n  [\n    \"body\",\n    \"call\",\n    \"continue\",\n    \"follow\",\n    \"header\",\n    \"stopOperation\",\n    \"storage\",\n    \"unfollow\",\n    \"unpin\",\n  ].map((key) => [key, `chainHead_v1_${key}`] as const),\n)\n\nexport const createChainHead = (\n  upstream: ReturnType<typeof createUpstream>,\n  reply: (id: string, result: any) => void,\n  err: (id: string, code: number, msg: string) => void,\n  notification: (method: string, subscription: string, result: any) => void,\n) => {\n  type SubCtx = {\n    id: string\n    up: ReturnType<typeof upstream.getBlocks>\n    operations: Map<string, () => void>\n    cleanUp: () => void\n  }\n  const subscriptions = new Map<string, SubCtx>()\n\n  const follow = (rId: string) => {\n    if (subscriptions.size === 2) {\n      return err(rId, -32800, \"Limit reached\")\n    }\n    const token = createOpaqueToken()\n    const up = upstream.getBlocks(token)\n    const operations = new Map<string, () => void>()\n    subscriptions.set(token, {\n      id: token,\n      up,\n      operations,\n      cleanUp: () => {\n        cleanUp()\n      },\n    })\n    let cleanUp = noop\n\n    reply(rId, token)\n    let subscription = up.blocks$.subscribe({\n      next(v) {\n        notification(\"chainHead_v1_followEvent\", token, v)\n      },\n      error(e) {\n        console.error(e)\n        cleanUp()\n        notification(\"chainHead_v1_followEvent\", token, { event: \"stop\" })\n      },\n    })\n    cleanUp = () => {\n      cleanUp = noop\n      subscription?.unsubscribe()\n      subscription = null as any\n      operations.forEach((cb) => {\n        cb()\n      })\n      operations.clear()\n      subscriptions.delete(token)\n    }\n    if (subscription.closed) cleanUp()\n  }\n\n  const unfollow = (rId: string, followId: string) => {\n    subscriptions.get(followId)?.cleanUp()\n    reply(rId, \"null\")\n  }\n\n  const stopOperation = (\n    rId: string,\n    followId: string,\n    operationId: string,\n  ) => {\n    const cb = subscriptions.get(followId)?.operations.get(operationId)\n    if (cb) cb()\n    reply(rId, \"null\")\n  }\n\n  const header = (\n    { up: { getHeader } }: SubCtx,\n    reply: (x: any) => void,\n    at: string,\n  ) => {\n    reply(getHeader(at))\n  }\n\n  const unpin = (\n    { up: { unpin: innerUnpin } }: SubCtx,\n    reply: (x: any) => void,\n    hashOrHashes: string | string[],\n  ) => {\n    const hashes =\n      typeof hashOrHashes === \"string\" ? [hashOrHashes] : hashOrHashes\n    hashes.forEach(innerUnpin)\n    reply(null)\n  }\n\n  const call = (\n    { operations, id: followId }: SubCtx,\n    reply: (x: any) => void,\n    at: string,\n    method: string,\n    args: string,\n  ) => {\n    const operationId = createOpaqueToken()\n    reply({ result: \"started\", operationId })\n    const subscription = upstream.runtimeCall(at, method, args).subscribe(\n      (output) => {\n        operations.delete(operationId)\n        notification(\"chainHead_v1_call\", followId, {\n          event: \"operationCallDone\",\n          operationId,\n          output,\n        })\n      },\n      (e) => {\n        operations.delete(operationId)\n        console.error(e)\n        notification(\"chainHead_v1_call\", followId, {\n          event: \"operationError\",\n          operationId,\n          error: \"\", // TODO: figure this out\n        })\n      },\n    )\n    if (!subscription.closed)\n      operations.set(operationId, () => {\n        subscription.unsubscribe()\n        operations.delete(operationId)\n      })\n  }\n  const body = (\n    { operations, id: followId }: SubCtx,\n    reply: (x: any) => void,\n    at: string,\n  ) => {\n    const operationId = createOpaqueToken()\n    reply({ result: \"started\", operationId })\n    const subscription = upstream.getBody(at).subscribe(\n      ({ block: { extrinsics: value } }) => {\n        operations.delete(operationId)\n        notification(\"chainHead_v1_body\", followId, {\n          event: \"operationBodyDone\",\n          operationId,\n          value,\n        })\n      },\n      (e) => {\n        operations.delete(operationId)\n        console.error(e)\n        notification(\"chainHead_v1_body\", followId, {\n          event: \"operationError\",\n          operationId,\n          error: \"\", // TODO: figure this out\n        })\n      },\n    )\n\n    if (!subscription.closed)\n      operations.set(operationId, () => {\n        subscription.unsubscribe()\n        operations.delete(operationId)\n      })\n  }\n\n  const stg = (\n    { operations, id: followId }: SubCtx,\n    reply: (x: any) => void,\n    at: string,\n    items: Array<{\n      key: string\n      type:\n        | \"value\"\n        | \"hash\"\n        | \"descendantsValues\"\n        | \"descendantsHashes\"\n        | \"closestDescendantMerkleValue\"\n    }>,\n  ) => {\n    const operationId = createOpaqueToken()\n    reply({ result: \"started\", operationId })\n    const innerNotifiaction = (msg: any) => {\n      notification(\"chainHead_v1_storage\", followId, msg)\n    }\n    const subscription = getStg$(upstream, at, items)\n      .pipe(\n        finalize(() => {\n          operations.delete(operationId)\n        }),\n      )\n      .subscribe(\n        (items) => {\n          innerNotifiaction({\n            event: \"operationStorageItems\",\n            operationId,\n            items,\n          })\n        },\n        (e) => {\n          console.error(e)\n          innerNotifiaction({\n            event: \"operationError\",\n            operationId,\n            error: \"\", // TODO: figure this out\n          })\n        },\n        () => {\n          innerNotifiaction({\n            event: \"operationStorageDone\",\n            operationId,\n          })\n        },\n      )\n\n    if (!subscription.closed)\n      operations.set(operationId, () => {\n        subscription.unsubscribe()\n      })\n  }\n\n  return (rId: string, method: string, params: Array<any>) => {\n    if (method === chainHeadMethods.follow) return follow(rId)\n    const [followId, ...rest] = params as [string, ...any[]]\n    const ctx = subscriptions.get(followId)\n    if (!ctx) return err(rId, -32602, \"Ivalid followSubscription\")\n\n    const innerReply = (value: any) => {\n      reply(rId, value)\n    }\n\n    switch (method) {\n      case chainHeadMethods.unfollow:\n        return unfollow(rId, followId)\n      case chainHeadMethods.stopOperation:\n        return stopOperation(rId, followId, rest[0])\n      case chainHeadMethods.unpin: {\n        const [hashOrHashes] = rest\n        if (\n          (Array.isArray(hashOrHashes) ? hashOrHashes : [hashOrHashes]).some(\n            (hash) => typeof hash !== \"string\",\n          )\n        )\n          return err(rId, -32602, \"Invalid args\")\n        return unpin(ctx, innerReply, hashOrHashes)\n      }\n      default: {\n        const [at, ...other] = rest as [string, ...any[]]\n        if (!ctx.up.isPinned(at)) return err(rId, -32801, \"Block not pinned\")\n\n        switch (method) {\n          case chainHeadMethods.header:\n            return header(ctx, innerReply, at)\n          case chainHeadMethods.body:\n            return body(ctx, innerReply, at)\n          case chainHeadMethods.call: {\n            const [method, data] = other\n            if (typeof method !== \"string\" || typeof data !== \"string\")\n              return err(rId, -32602, \"Invalid args\")\n            return call(ctx, innerReply, at, method, data)\n          }\n          case chainHeadMethods.storage: {\n            const [items] = other\n            return areItemsValid(items)\n              ? stg(ctx, innerReply, at, items)\n              : err(rId, -32602, \"Invalid args\")\n          }\n        }\n      }\n    }\n    throw null\n  }\n}\n"],"names":["reply","items","method"],"mappings":"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"}