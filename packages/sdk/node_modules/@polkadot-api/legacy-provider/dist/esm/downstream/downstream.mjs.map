{"version":3,"file":"downstream.mjs","sources":["../../../src/downstream/downstream.ts"],"sourcesContent":["import type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nimport { createUpstream } from \"@/upstream\"\nimport { chainSpecMethods, createChainSpec } from \"./chainspec\"\nimport { chainHeadMethods, createChainHead } from \"./chain-head\"\nimport { createTransactionFns, transactionMethods } from \"./transaction\"\nimport { archiveMethods, createArchive } from \"./archive\"\nimport { withNumericIds } from \"@/with-numeric\"\n\nconst supportedMethods = [\n  chainSpecMethods,\n  archiveMethods,\n  chainHeadMethods,\n  transactionMethods,\n]\n  .map((methods) => Object.values(methods) as string[])\n  .flat()\n\nexport const createDownstream =\n  () =>\n  (upstreamProvider: JsonRpcProvider): JsonRpcProvider => {\n    const upstream = createUpstream(withNumericIds(upstreamProvider))\n    return (onMessage) => {\n      const jsonRpc = (\n        input:\n          | ({ id: string } & (\n              | { result: any }\n              | { error: { code: number; message: string } }\n            ))\n          | {\n              method: string\n              params: { subscription: string; result: any }\n            },\n      ) =>\n        onMessage(\n          JSON.stringify({\n            jsonrpc: \"2.0\",\n            ...input,\n          }),\n        )\n\n      const reply = (id: string, result: any) => {\n        jsonRpc({ id, result })\n      }\n      const err = (id: string, code: number, message: string) => {\n        jsonRpc({ id, error: { code, message } })\n      }\n      const notification = (\n        method: string,\n        subscription: string,\n        result: any,\n      ) => {\n        jsonRpc({ method, params: { subscription, result } })\n      }\n\n      const groups = {\n        chainSpec: createChainSpec(upstream, reply, err),\n        chainHead: createChainHead(upstream, reply, err, notification),\n        archive: createArchive(upstream, reply, err, notification),\n        transaction: createTransactionFns(upstream, reply),\n      }\n      return {\n        send: (msg) => {\n          let parsedMsg: any = null\n          try {\n            parsedMsg = JSON.parse(msg)\n          } catch {}\n          if (!parsedMsg) return\n          const { id, method, params } = parsedMsg\n          if (\n            (id !== null && typeof id !== \"string\" && typeof id !== \"number\") ||\n            typeof method !== \"string\"\n          ) {\n            console.warn(`Invalid message:\\n${msg}`)\n            return\n          }\n          if (method === \"rpc_methods\") {\n            return upstream.methods.subscribe(\n              ({ methods }) => {\n                reply(id, {\n                  methods: [\n                    ...supportedMethods,\n                    ...methods.filter(\n                      (method) => !supportedMethods.includes(method),\n                    ),\n                  ],\n                })\n              },\n              (e: any) => {\n                console.error(e)\n                err(id, -32602, \"Invalid\")\n              },\n            )\n          }\n\n          const [groupName] = method.split(\"_\")\n          if (groupName in groups) {\n            try {\n              return groups[groupName as keyof typeof groups](\n                id,\n                method,\n                params,\n              )\n            } catch (e) {\n              if (e !== null) throw e\n            }\n          }\n\n          upstream.request(\n            method,\n            params,\n            (value) => {\n              reply(id, value)\n            },\n            (e) => {\n              err(id, e?.code || -1, e?.message || \"\")\n            },\n          )\n        },\n        disconnect: () => {\n          upstream.disconnect()\n        },\n      }\n    }\n  }\n"],"names":["method"],"mappings":"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"}