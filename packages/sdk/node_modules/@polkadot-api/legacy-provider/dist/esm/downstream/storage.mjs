import { merge, filter, map } from 'rxjs';

const validStorageTypes = /* @__PURE__ */ new Set([
  "value",
  "hash",
  "closestDescendantMerkleValue",
  "descendantsValues",
  "descendantsHashes"
]);
const areItemsValid = (items) => Array.isArray(items) && items.every(
  (x) => typeof x === "object" && typeof x.key === "string" && validStorageTypes.has(x.type)
);
const getStg$ = (upstream, at, items) => merge(
  ...items.map(({ key, type }) => {
    switch (type) {
      case "value":
        return upstream.stgValue(at, key).pipe(
          filter(Boolean),
          map((value) => [
            {
              key,
              value
            }
          ])
        );
      case "hash":
        return upstream.stgHash(at, key).pipe(
          filter(Boolean),
          map((hash) => [
            {
              key,
              hash
            }
          ])
        );
      case "descendantsValues":
        return upstream.stgDescendantValues(at, key).pipe(
          map((values) => values.map(([key2, value]) => ({ key: key2, value })))
        );
      case "descendantsHashes":
        return upstream.stgDescendantHashes(at, key).pipe(map((values) => values.map(([key2, hash]) => ({ key: key2, hash }))));
      case "closestDescendantMerkleValue":
        return upstream.stgClosestDescendant(at, key).pipe(
          filter(Boolean),
          map((closestDescendantMerkleValue) => [
            {
              key,
              closestDescendantMerkleValue
            }
          ])
        );
    }
  })
);

export { areItemsValid, getStg$ };
//# sourceMappingURL=storage.mjs.map
