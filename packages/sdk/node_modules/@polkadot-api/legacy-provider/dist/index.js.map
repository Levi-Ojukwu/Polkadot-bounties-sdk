{"version":3,"file":"index.js","sources":["../src/upstream/blocks/blocks.ts","../src/utils/fromShittyHeader.ts","../src/utils/get-hasher-from-block.ts","../src/utils/with-latest-from-bp.ts","../src/upstream/blocks/upstream-events.ts","../src/upstream/blocks/index.ts","../src/upstream/descendant-values.ts","../src/upstream/proofs.ts","../src/upstream/upstream.ts","../src/downstream/chainspec.ts","../src/utils/create-opaque-token.ts","../src/downstream/storage.ts","../src/downstream/chain-head.ts","../src/downstream/transaction.ts","../src/downstream/archive.ts","../src/with-numeric.ts","../src/downstream/downstream.ts","../src/index.ts"],"sourcesContent":["import {\n  BestBlockChangedEvent,\n  DecentHeader,\n  InitializedEvent,\n  NewBlockEvent,\n} from \"@/types\"\nimport { UpstreamEvents } from \"./upstream-events\"\nimport {\n  concat,\n  concatMap,\n  filter,\n  map,\n  merge,\n  mergeMap,\n  noop,\n  Observable,\n  of,\n  share,\n  shareReplay,\n  skip,\n  take,\n  takeWhile,\n  tap,\n  toArray,\n  withLatestFrom,\n} from \"rxjs\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\n\nexport const getBlocks = ({\n  initial$,\n  allHeads$,\n  finalized$,\n  getHeader$,\n  hasher$,\n  getRecursiveHeader,\n}: UpstreamEvents) => {\n  const finalizedhash$ = finalized$.pipe(map((x) => x.hash))\n  const blocks = new Map<\n    string,\n    DecentHeader & {\n      children: Set<string>\n      usages: Set<string>\n    }\n  >()\n  let prevFin = \"\"\n  let finalized = \"\"\n  let best = \"\"\n  let activeSubscriptions = new Set<string>()\n\n  const getTree = (root: string, result: string[] = []): string[] => {\n    result.push(root)\n    blocks.get(root)!.children.forEach((c) => {\n      getTree(c, result)\n    })\n    return result\n  }\n\n  const getFinalizedEvent = (): {\n    event: \"finalized\"\n    prunedBlockHashes: string[]\n    finalizedBlockHashes: string[]\n  } => {\n    const prunedBlockHashes: string[] = []\n    const finalizedBlockHashes: string[] = []\n\n    let current = blocks.get(finalized)!\n    let prev = blocks.get(current.parent)\n    while (prev) {\n      finalizedBlockHashes.push(current.hash)\n      prev.children.forEach((c) => {\n        if (c !== current.hash) getTree(c, prunedBlockHashes)\n      })\n      current = prev\n      if (current.hash === prevFin) break\n      prev = blocks.get(current.parent)\n    }\n    finalizedBlockHashes.reverse()\n\n    return { event: \"finalized\", prunedBlockHashes, finalizedBlockHashes }\n  }\n\n  const setBestFromFinalized = () => {\n    best = finalized\n    let bestHeight = 0\n    getTree(finalized)\n      .map((x) => blocks.get(x)!)\n      .forEach((x) => {\n        if (x.number > bestHeight) {\n          bestHeight = x.number\n          best = x.hash\n        }\n      })\n  }\n\n  const addBlock = (block: DecentHeader) => {\n    const { hash, parent } = block\n    const me = {\n      ...block,\n      children: new Set<string>(),\n      usages: new Set<string>(),\n    }\n    blocks.set(hash, me)\n    blocks.get(parent)?.children.add(hash)\n    return me\n  }\n\n  const ready$ = initial$.pipe(\n    withLatestFrom(finalizedhash$),\n    map(([initial, fin]) => {\n      initial.forEach(addBlock)\n      finalized = fin\n      setBestFromFinalized()\n      return null\n    }),\n    shareReplay(1),\n  )\n\n  const getNewBlockEvent = (blockHash: string) => {\n    const block = blocks.get(blockHash)!\n    activeSubscriptions.forEach((subId) => {\n      block.usages.add(subId)\n    })\n    return {\n      event: \"newBlock\" as const,\n      blockHash,\n      parentBlockHash: block.parent,\n      newRuntime: block.hasUpgrade\n        ? ({} as {\n            specName: string\n            implName: string\n            specVersion: number\n            implVersion: number\n            transactionVersion: number\n            apis: Record<string, number>\n          })\n        : null,\n    }\n  }\n\n  const tryRemove = (blockHash: string, up?: boolean) => {\n    const block = blocks.get(blockHash)\n    if (!block || block.usages.size > 0) return\n\n    const { parent, children } = block\n    if (up !== true) children.forEach((c) => tryRemove(c, false))\n    if (up !== false) tryRemove(parent, true)\n    if (!blocks.has(parent) || !block.children.size) {\n      blocks.get(parent)?.children.delete(blockHash)\n      blocks.delete(blockHash)\n    }\n  }\n\n  const ignoreUntilReady: <T>(input: Observable<T>) => Observable<T> = filter(\n    () => finalized !== \"\",\n  )\n  const isPresent = (blockHash: string) => blocks.has(blockHash)\n\n  // The initial blocks from `chain_unsubscribeAllHeads` are a royal mess,\n  // you may get a block that's 3 blocks above the currently finalized block,\n  // and a few seconds later receive a block that is 5 blocks above the currently\n  // finalized block that's from a different fork. So, this logic accounts for\n  // these exepctional cases that happen with the initial emissions of `allHeads$`.\n  const allHeadsEvents$ = allHeads$.pipe(\n    ignoreUntilReady,\n    concatMap((newBlock) =>\n      isPresent(newBlock.parent)\n        ? [newBlock]\n        : getRecursiveHeader(newBlock.parent).pipe(\n            takeWhile((x) => !isPresent(x.parent), true),\n            toArray(),\n            mergeMap((blocks) => [...blocks.reverse(), newBlock]),\n          ),\n    ),\n    map((value) => ({ type: \"new\" as const, value })),\n    share(),\n  )\n\n  const finalizedEvents$ = finalizedhash$.pipe(\n    skip(1),\n    ignoreUntilReady,\n    concatMap((blockHash) =>\n      isPresent(blockHash)\n        ? [blockHash]\n        : // it could happen that we are still loading the initial \"new-blocks\"\n          allHeadsEvents$.pipe(\n            map(() => blockHash),\n            filter(isPresent),\n            take(1),\n          ),\n    ),\n    map((value) => ({ type: \"fin\" as const, value })),\n  )\n\n  const updates$ = merge(allHeadsEvents$, finalizedEvents$).pipe(\n    mergeMap((x) => {\n      if (x.type === \"new\") {\n        const block = x.value\n        const { hash } = block\n        addBlock(block)\n        const result: Array<\n          | ReturnType<typeof getNewBlockEvent>\n          | { event: \"bestBlockChanged\"; bestBlockHash: string }\n        > = [getNewBlockEvent(hash)]\n        if (block.number > blocks.get(best)!.number) {\n          best = hash\n          result.push({ event: \"bestBlockChanged\", bestBlockHash: hash })\n        }\n        return result\n      }\n\n      prevFin = finalized\n      finalized = x.value\n      let prevBest = best\n      setBestFromFinalized()\n      const result: Array<\n        | ReturnType<typeof getFinalizedEvent>\n        | { event: \"bestBlockChanged\"; bestBlockHash: string }\n      > = [getFinalizedEvent()]\n\n      if (prevBest !== best)\n        result.unshift({ event: \"bestBlockChanged\", bestBlockHash: best })\n      return result\n    }),\n    share(),\n  )\n\n  const subscription = merge(ready$, updates$).subscribe({\n    error: noop, // the errors are propagated downstream\n  })\n\n  const upstream = (subId: string) => {\n    const getInitialized = () => {\n      const finalizedBlockHashes: string[] = []\n      let current = blocks.get(finalized)\n      while (current && finalizedBlockHashes.length < 10) {\n        finalizedBlockHashes.push(current.hash)\n        current.usages.add(subId)\n        current = blocks.get(current.parent)\n      }\n      finalizedBlockHashes.reverse()\n\n      return {\n        event: \"initialized\" as const,\n        finalizedBlockHashes,\n      }\n    }\n\n    const unpin = (blockHash: string) => {\n      const block = blocks.get(blockHash)\n      if (block) {\n        block.usages.delete(subId)\n        tryRemove(blockHash)\n      }\n    }\n\n    const initialEvents$: Observable<\n      InitializedEvent | NewBlockEvent | BestBlockChangedEvent\n    > = ready$.pipe(\n      mergeMap(() => {\n        const others: Array<NewBlockEvent | BestBlockChangedEvent> = getTree(\n          finalized,\n        )\n          .slice(1)\n          .map(getNewBlockEvent)\n        if (others.length)\n          others.push({\n            event: \"bestBlockChanged\" as const,\n            bestBlockHash: best,\n          })\n        return [getInitialized(), ...others]\n      }),\n    )\n\n    return {\n      blocks$: concat(initialEvents$, updates$).pipe(\n        tap({\n          subscribe: () => {\n            activeSubscriptions.add(subId)\n          },\n          finalize: () => {\n            activeSubscriptions.delete(subId)\n          },\n        }),\n        share(),\n      ),\n      getHeader: (blockHash: string) => blocks.get(blockHash)?.header ?? null,\n      isPinned: (blockHash: string) =>\n        !!blocks.get(blockHash)?.usages.has(subId),\n      unpin,\n    }\n  }\n  upstream.stop = () => {\n    subscription.unsubscribe()\n  }\n  return {\n    upstream,\n    finalized$,\n    getHeader$: (hash: HexString): Observable<DecentHeader> => {\n      const block = blocks.get(hash)\n      return block ? of(block) : getHeader$(hash)\n    },\n    hasher$,\n  }\n}\n","import { ShittyHeader } from \"@/types\"\nimport { compact } from \"@polkadot-api/substrate-bindings\"\nimport { fromHex, mergeUint8, toHex } from \"@polkadot-api/utils\"\n\nexport const getFromShittyHeader =\n  (hasher: (input: Uint8Array) => Uint8Array) =>\n  ({\n    parentHash,\n    number: rawNumber,\n    stateRoot,\n    extrinsicsRoot,\n    digest,\n  }: ShittyHeader) => {\n    const number = Number(rawNumber)\n    const rawDigests = digest.logs.map(fromHex)\n\n    const rawHeader = mergeUint8([\n      fromHex(parentHash),\n      compact.enc(number),\n      fromHex(stateRoot),\n      fromHex(extrinsicsRoot),\n      compact.enc(digest.logs.length),\n      ...rawDigests,\n    ])\n\n    return {\n      parent: parentHash,\n      hash: toHex(hasher(rawHeader)),\n      number,\n      hasUpgrade: rawDigests.some(([x]) => x === 8),\n      header: toHex(rawHeader),\n    }\n  }\n","import { Blake2256, Keccak256 } from \"@polkadot-api/substrate-bindings\"\nimport { getFromShittyHeader } from \"./fromShittyHeader\"\nimport { ShittyHeader } from \"@/types\"\n\nconst hashers = [Blake2256, Keccak256]\nconst fns = hashers.map(getFromShittyHeader)\nconst noHasher = (_: Uint8Array): Uint8Array => {\n  throw new Error(\"Hasher not supported\")\n}\n\nexport const getHasherFromBlock =\n  (shitHeader: ShittyHeader) =>\n  (hash: string): ((data: Uint8Array) => Uint8Array) =>\n    hashers[fns.findIndex((fn) => fn(shitHeader).hash === hash)] || noHasher\n","import { Observable } from \"rxjs\"\n\nexport const withLatestFromBp =\n  <T, S>(latest$: Observable<T>) =>\n  (base$: Observable<S>) =>\n    new Observable<[T, S]>((observer) => {\n      let latest: T\n      let prev: S[] | null = []\n\n      const subscription = base$.subscribe({\n        next(v) {\n          if (prev) prev.push(v)\n          else observer.next([latest, v])\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n\n      subscription.add(\n        latest$.subscribe({\n          next(v) {\n            latest = v\n            if (prev) {\n              const copy = [...prev]\n              prev = null\n              copy.forEach((p) => observer.next([latest, p]))\n            }\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            if (prev) observer.error(new Error(\"Empty complete\"))\n          },\n        }),\n      )\n\n      return subscription\n    })\n","import { DecentHeader, ShittyHeader } from \"@/types\"\nimport { getFromShittyHeader } from \"@/utils/fromShittyHeader\"\nimport { getHasherFromBlock } from \"@/utils/get-hasher-from-block\"\nimport { withLatestFromBp } from \"@/utils/with-latest-from-bp\"\nimport { ClientRequest } from \"@polkadot-api/raw-client\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\nimport { noop } from \"@polkadot-api/utils\"\nimport {\n  combineLatest,\n  concat,\n  map,\n  mergeMap,\n  Observable,\n  of,\n  pipe,\n  share,\n  shareReplay,\n  Subject,\n  take,\n  takeUntil,\n  toArray,\n} from \"rxjs\"\n\nexport const getUpstreamEvents = (\n  request: ClientRequest<any, any>,\n  request$: <Args extends Array<any>, Payload>(\n    method: string,\n    params: Args,\n  ) => Observable<Payload>,\n) => {\n  const firstFinHeader$ = new Subject<ShittyHeader>()\n  const hasher$ = firstFinHeader$.pipe(\n    mergeMap((h) =>\n      request$<[number | string], HexString>(\"chain_getBlockHash\", [\n        h.number,\n      ]).pipe(map(getHasherFromBlock(h))),\n    ),\n    shareReplay(1),\n  )\n  const fromShittyHeader$ = hasher$.pipe(\n    map(getFromShittyHeader),\n    shareReplay(1),\n  )\n  const toNiceHeader = pipe(\n    withLatestFromBp<\n      (x: ShittyHeader) => ReturnType<ReturnType<typeof getFromShittyHeader>>,\n      ShittyHeader\n    >(fromShittyHeader$),\n    map(([fromShittyHeader, shitHeader]) => fromShittyHeader(shitHeader)),\n  )\n\n  const getHeaders$ = (\n    startMethod: string,\n    stopMethod: string,\n    isFin = false,\n  ): Observable<DecentHeader> =>\n    new Observable<ShittyHeader>((observer) => {\n      const onError = (e: any) => {\n        observer.error(e)\n      }\n\n      let stop: (() => void) | null = null\n      let isFirstFin = isFin\n      ;(request as ClientRequest<string, ShittyHeader>)(startMethod, [], {\n        onSuccess: (subId, followSub) => {\n          const done = followSub(subId, {\n            next: (v) => {\n              if (isFirstFin) {\n                isFirstFin = false\n                firstFinHeader$.next(v)\n                firstFinHeader$.complete()\n              }\n              observer.next(v)\n            },\n            error: onError,\n          })\n          const unsubscribe = () => {\n            done()\n            try {\n              request(stopMethod, [subId], {\n                onError: noop,\n                onSuccess: noop,\n              })\n            } catch {}\n          }\n          if (stop !== null) unsubscribe()\n          else stop = unsubscribe\n        },\n        onError,\n      })\n\n      return () => {\n        stop?.()\n        stop = noop\n      }\n    }).pipe(toNiceHeader)\n\n  const allHeads$ = getHeaders$(\n    \"chain_subscribeAllHeads\",\n    \"chain_unsubscribeAllHeads\",\n  ).pipe(share())\n\n  const finalized$ = getHeaders$(\n    \"chain_subscribeFinalizedHeads\",\n    \"chain_unsubscribeFinalizedHeads\",\n    true,\n  ).pipe(shareReplay(1))\n\n  const getHeader$ = (hash: string) =>\n    request$<[string], ShittyHeader>(\"chain_getHeader\", [hash]).pipe(\n      toNiceHeader,\n    )\n\n  const getRecursiveHeader = (hash: string): Observable<DecentHeader> =>\n    getHeader$(hash).pipe(\n      mergeMap((header) =>\n        concat(of(header), getRecursiveHeader(header.parent)),\n      ),\n    )\n\n  const gap$: Observable<DecentHeader[]> = combineLatest([\n    allHeads$.pipe(take(1)),\n    finalized$.pipe(take(1)),\n  ]).pipe(\n    mergeMap(([latest, fin]) => {\n      const nMissing = latest.number - fin.number - 1\n      return concat(\n        getRecursiveHeader(latest.parent).pipe(take(Math.max(0, nMissing))),\n        of(fin),\n      )\n    }),\n    toArray(),\n    share(),\n  )\n  const collected$ = allHeads$.pipe(takeUntil(gap$), toArray())\n  const initial$ = combineLatest([collected$, gap$]).pipe(\n    map(([collected, gap]) => [...gap.reverse(), ...collected]),\n  )\n\n  return {\n    initial$,\n    allHeads$,\n    finalized$,\n    hasher$,\n    getRecursiveHeader,\n    getHeader$,\n  }\n}\n\nexport type UpstreamEvents = ReturnType<typeof getUpstreamEvents>\n","import type { ClientRequest } from \"@polkadot-api/raw-client\"\nimport { getBlocks } from \"./blocks\"\nimport { getUpstreamEvents } from \"./upstream-events\"\nimport { Observable } from \"rxjs\"\n\nexport const getBlocks$ = (\n  request: ClientRequest<any, any>,\n  request$: <Args extends Array<any>, Payload>(\n    method: string,\n    params: Args,\n  ) => Observable<Payload>,\n) => getBlocks(getUpstreamEvents(request, request$))\n","export const createDescendantValues = (\n  request: <Args extends Array<any>, Payload>(\n    method: string,\n    params: Args,\n    onSuccess: (value: Payload) => void,\n    onError: (e: any) => void,\n  ) => () => void,\n) => {\n  return (\n    rootKey: string,\n    at: string,\n    onValues: (input: Array<[string, string]>) => void,\n    onError: (e: any) => void,\n    onDone: () => void,\n  ): (() => void) => {\n    let isRunning = true\n    let areAllKeysDone = false\n    let onGoingValues = 0\n\n    const _onError = (e: any) => {\n      if (isRunning) {\n        isRunning = false\n        onError(e)\n      }\n    }\n\n    const PAGE_SIZE = 1000\n    const pullKeys = (startAtKey?: string) => {\n      request<[string, number, string | undefined, string], string[]>(\n        \"state_getKeysPaged\",\n        [rootKey, PAGE_SIZE, startAtKey || undefined, at],\n        (result) => {\n          if (!isRunning) return\n          if (result.length > 0) {\n            onGoingValues++\n            request<\n              [string[], string],\n              [{ block: string; changes: Array<[string, string]> }]\n            >(\n              \"state_queryStorageAt\",\n              [result, at],\n              ([{ changes }]) => {\n                if (!isRunning) return\n                onGoingValues--\n                onValues(changes)\n                if (areAllKeysDone && !onGoingValues) onDone()\n              },\n              _onError,\n            )\n          }\n          if (result.length < PAGE_SIZE) {\n            areAllKeysDone = true\n            if (!onGoingValues) onDone()\n          } else pullKeys(result.at(-1))\n        },\n        _onError,\n      )\n    }\n    pullKeys()\n\n    return () => {\n      isRunning = false\n    }\n  }\n}\n","import {\n  HexString,\n  ProofTrieNode,\n  TrieNode,\n  validateProofs,\n} from \"@polkadot-api/substrate-bindings\"\nimport { mergeMap, Observable } from \"rxjs\"\n\nexport const createClosestDescendantMerkleValue =\n  (\n    obsRequest: <Args extends Array<any>, Payload>(\n      method: string,\n      params: Args,\n    ) => Observable<Payload>,\n  ) =>\n  (at: HexString, key: HexString) =>\n    obsRequest<\n      [keys: Array<HexString>, at: HexString],\n      {\n        at: HexString\n        proof: HexString[]\n      }\n    >(\"state_getReadProof\", [[key], at]).pipe(\n      mergeMap((x) => {\n        const result = validateProofs(x.proof)\n        if (!result) throw new Error(\"Invalid Proof\")\n        const { rootHash, proofs } = result\n        let winnerHash: HexString | undefined = rootHash\n        let current: {\n          hash: HexString\n          parent?: HexString\n        } & TrieNode = proofs[winnerHash!] as any\n\n        let nKeyChars = 2 // skipping `0x`\n        do {\n          const nextOne: ProofTrieNode = proofs[winnerHash!]\n          if (!nextOne || nextOne.type === \"Raw\") break\n\n          current = nextOne\n          winnerHash = undefined\n          if (\n            !current.partialKey.startsWith(\n              key.slice(nKeyChars, nKeyChars + current.partialKey.length),\n            )\n          )\n            // This causes the observable to complete, which in its turn triggers an [`operationStorageDone`](https://paritytech.github.io/json-rpc-interface-spec/api/chainHead_v1_follow.html#operationstoragedone)\n            // event, without triggering the intermediary `OperationStorageItems` event. This is the expected behaviour when querying a non-existing storage entry.\n            return []\n          nKeyChars += current.partialKey.length\n          if (\n            (current.type === \"LeafWithHash\" ||\n              current.type === \"BranchWithHash\") &&\n            proofs[current.value]\n          ) {\n            winnerHash = current.value\n            continue\n          }\n\n          if (\"children\" in current) {\n            const winner: [string, string] | undefined = Object.entries(\n              current.children,\n            ).find(([, hash]) => proofs[hash])\n\n            if (winner) {\n              // Same as before: in this case we know that it won't match with the requested key, so we complete without an emission.\n              if (winner[0] !== key[nKeyChars++]) return []\n              winnerHash = winner[1]\n            }\n          }\n        } while (winnerHash)\n\n        return [current!.hash]\n      }),\n    )\n","import type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nimport { createClient } from \"@polkadot-api/raw-client\"\nimport { getBlocks$ } from \"./blocks\"\nimport { createDescendantValues } from \"./descendant-values\"\nimport { map, Observable } from \"rxjs\"\nimport { fromHex, toHex } from \"@polkadot-api/utils\"\nimport { withLatestFromBp } from \"@/utils/with-latest-from-bp\"\nimport { createClosestDescendantMerkleValue } from \"./proofs\"\n\nexport const createUpstream = (provider: JsonRpcProvider) => {\n  const { request, disconnect } = createClient(provider)\n\n  const simpleRequest = <Args extends Array<any>, Payload>(\n    method: string,\n    params: Args,\n    onSuccess: (value: Payload) => void,\n    onError: (e: any) => void,\n  ): (() => void) => request(method, params, { onSuccess, onError })\n\n  const obsRequest = <Args extends Array<any>, Payload>(\n    method: string,\n    params: Args,\n  ): Observable<Payload> =>\n    new Observable((observer) =>\n      simpleRequest<Args, Payload>(\n        method,\n        params,\n        (v) => {\n          observer.next(v)\n          observer.complete()\n        },\n        (e) => {\n          observer.error(e)\n        },\n      ),\n    )\n\n  const {\n    upstream: getBlocks,\n    finalized$,\n    getHeader$,\n    hasher$,\n  } = getBlocks$(request, obsRequest)\n\n  const runtimeCall = (atBlock: string, method: string, data: string) =>\n    obsRequest<[string, string, string], string | null>(\"state_call\", [\n      method,\n      data,\n      atBlock,\n    ])\n\n  const innerStgDescendantVals = createDescendantValues(simpleRequest)\n  const stgDescendantValues = (at: string, rootKey: string) =>\n    new Observable<Array<[string, string]>>((observer) =>\n      innerStgDescendantVals(\n        rootKey,\n        at,\n        (values) => {\n          observer.next(values)\n        },\n        (e) => {\n          observer.error(e)\n        },\n        () => {\n          observer.complete()\n        },\n      ),\n    )\n\n  const stgDescendantHashes = (at: string, rootKey: string) =>\n    stgDescendantValues(at, rootKey).pipe(\n      withLatestFromBp(hasher$),\n      map(([hasher, results]) =>\n        results.map(\n          ([key, value]) =>\n            [key, toHex(hasher(fromHex(value)))] as [string, string],\n        ),\n      ),\n    )\n\n  const stgClosestDescendant = createClosestDescendantMerkleValue(obsRequest)\n\n  const [stgValue, stgHash] = [\"state_getStorage\", \"state_getStorageHash\"].map(\n    (method) => (atBlock: string, key: string) =>\n      obsRequest<[string, string | undefined], string | null>(method, [\n        key,\n        atBlock,\n      ]),\n  )\n\n  const methods = obsRequest<[], { methods: string[] }>(\"rpc_methods\", [])\n  const chainName = obsRequest<[], string>(\"system_name\", [])\n  const properties = obsRequest<[], {}>(\"system_properties\", [])\n  const getBody = (at: string) =>\n    obsRequest<[string], { block: { extrinsics: Array<string> } }>(\n      \"chain_getBlock\",\n      [at],\n    )\n\n  const getBlockHash$ = (height: number) =>\n    obsRequest<[height: number], string>(\"chain_getBlockHash\", [height])\n  const genesisHash = getBlockHash$(0)\n\n  return {\n    getBlocks,\n    finalized$,\n    getBlockHash$,\n    getHeader$,\n    stgValue,\n    stgHash,\n    stgDescendantValues,\n    stgDescendantHashes,\n    stgClosestDescendant,\n    runtimeCall,\n    getBody,\n    chainName,\n    properties,\n    genesisHash,\n    disconnect,\n    methods,\n    request: simpleRequest,\n    obsRequest,\n  }\n}\n","import { createUpstream } from \"@/upstream/upstream\"\n\nexport const chainSpecMethods = Object.fromEntries(\n  [\"chainName\", \"genesisHash\", \"properties\"].map(\n    (key) => [key, `chainSpec_v1_${key}`] as const,\n  ),\n)\n\nexport const createChainSpec = (\n  upstream: ReturnType<typeof createUpstream>,\n  reply: (id: string, result: any) => void,\n  err: (id: string, code: number, msg: string) => void,\n) => {\n  return (rId: string, method: string) => {\n    const [, , name] = method.split(\"_\")\n    const observable =\n      upstream[name as \"chainName\" | \"genesisHash\" | \"properties\"]\n    if (!observable) throw null\n\n    observable.subscribe(\n      (result) => {\n        reply(rId, result)\n      },\n      (e: any) => {\n        console.error(e)\n        err(rId, -32602, \"Invalid\")\n      },\n    )\n  }\n}\n","let latestId = 1\nexport const createOpaqueToken = (): string => {\n  // TODO: make this fancier\n  return `${latestId++}${Date.now()}`\n}\n","import { createUpstream } from \"@/upstream/upstream\"\nimport { filter, map, merge } from \"rxjs\"\n\nconst validStorageTypes = new Set([\n  \"value\",\n  \"hash\",\n  \"closestDescendantMerkleValue\",\n  \"descendantsValues\",\n  \"descendantsHashes\",\n])\n\nexport type Items = Array<{\n  key: string\n  type:\n    | \"value\"\n    | \"hash\"\n    | \"closestDescendantMerkleValue\"\n    | \"descendantsValues\"\n    | \"descendantsHashes\"\n}>\n\nexport const areItemsValid = (items: any): items is Items =>\n  Array.isArray(items) &&\n  items.every(\n    (x) =>\n      typeof x === \"object\" &&\n      typeof x.key === \"string\" &&\n      validStorageTypes.has(x.type),\n  )\n\nexport const getStg$ = (\n  upstream: ReturnType<typeof createUpstream>,\n  at: string,\n  items: Array<{\n    key: string\n    type:\n      | \"value\"\n      | \"hash\"\n      | \"descendantsValues\"\n      | \"descendantsHashes\"\n      | \"closestDescendantMerkleValue\"\n  }>,\n) =>\n  merge(\n    ...items.map(({ key, type }) => {\n      switch (type) {\n        case \"value\":\n          return upstream.stgValue(at, key).pipe(\n            filter(Boolean),\n            map((value) => [\n              {\n                key,\n                value,\n              },\n            ]),\n          )\n        case \"hash\":\n          return upstream.stgHash(at, key).pipe(\n            filter(Boolean),\n            map((hash) => [\n              {\n                key,\n                hash,\n              },\n            ]),\n          )\n        case \"descendantsValues\":\n          return upstream\n            .stgDescendantValues(at, key)\n            .pipe(\n              map((values) => values.map(([key, value]) => ({ key, value }))),\n            )\n\n        case \"descendantsHashes\":\n          return upstream\n            .stgDescendantHashes(at, key)\n            .pipe(map((values) => values.map(([key, hash]) => ({ key, hash }))))\n\n        case \"closestDescendantMerkleValue\":\n          return upstream.stgClosestDescendant(at, key).pipe(\n            filter(Boolean),\n            map((closestDescendantMerkleValue) => [\n              {\n                key,\n                closestDescendantMerkleValue,\n              },\n            ]),\n          )\n      }\n    }),\n  )\n","import { createUpstream } from \"@/upstream/upstream\"\nimport { createOpaqueToken } from \"@/utils/create-opaque-token\"\nimport { noop } from \"@polkadot-api/utils\"\nimport { finalize } from \"rxjs\"\nimport { areItemsValid, getStg$ } from \"./storage\"\n\nexport const chainHeadMethods = Object.fromEntries(\n  [\n    \"body\",\n    \"call\",\n    \"continue\",\n    \"follow\",\n    \"header\",\n    \"stopOperation\",\n    \"storage\",\n    \"unfollow\",\n    \"unpin\",\n  ].map((key) => [key, `chainHead_v1_${key}`] as const),\n)\n\nexport const createChainHead = (\n  upstream: ReturnType<typeof createUpstream>,\n  reply: (id: string, result: any) => void,\n  err: (id: string, code: number, msg: string) => void,\n  notification: (method: string, subscription: string, result: any) => void,\n) => {\n  type SubCtx = {\n    id: string\n    up: ReturnType<typeof upstream.getBlocks>\n    operations: Map<string, () => void>\n    cleanUp: () => void\n  }\n  const subscriptions = new Map<string, SubCtx>()\n\n  const follow = (rId: string) => {\n    if (subscriptions.size === 2) {\n      return err(rId, -32800, \"Limit reached\")\n    }\n    const token = createOpaqueToken()\n    const up = upstream.getBlocks(token)\n    const operations = new Map<string, () => void>()\n    subscriptions.set(token, {\n      id: token,\n      up,\n      operations,\n      cleanUp: () => {\n        cleanUp()\n      },\n    })\n    let cleanUp = noop\n\n    reply(rId, token)\n    let subscription = up.blocks$.subscribe({\n      next(v) {\n        notification(\"chainHead_v1_followEvent\", token, v)\n      },\n      error(e) {\n        console.error(e)\n        cleanUp()\n        notification(\"chainHead_v1_followEvent\", token, { event: \"stop\" })\n      },\n    })\n    cleanUp = () => {\n      cleanUp = noop\n      subscription?.unsubscribe()\n      subscription = null as any\n      operations.forEach((cb) => {\n        cb()\n      })\n      operations.clear()\n      subscriptions.delete(token)\n    }\n    if (subscription.closed) cleanUp()\n  }\n\n  const unfollow = (rId: string, followId: string) => {\n    subscriptions.get(followId)?.cleanUp()\n    reply(rId, \"null\")\n  }\n\n  const stopOperation = (\n    rId: string,\n    followId: string,\n    operationId: string,\n  ) => {\n    const cb = subscriptions.get(followId)?.operations.get(operationId)\n    if (cb) cb()\n    reply(rId, \"null\")\n  }\n\n  const header = (\n    { up: { getHeader } }: SubCtx,\n    reply: (x: any) => void,\n    at: string,\n  ) => {\n    reply(getHeader(at))\n  }\n\n  const unpin = (\n    { up: { unpin: innerUnpin } }: SubCtx,\n    reply: (x: any) => void,\n    hashOrHashes: string | string[],\n  ) => {\n    const hashes =\n      typeof hashOrHashes === \"string\" ? [hashOrHashes] : hashOrHashes\n    hashes.forEach(innerUnpin)\n    reply(null)\n  }\n\n  const call = (\n    { operations, id: followId }: SubCtx,\n    reply: (x: any) => void,\n    at: string,\n    method: string,\n    args: string,\n  ) => {\n    const operationId = createOpaqueToken()\n    reply({ result: \"started\", operationId })\n    const subscription = upstream.runtimeCall(at, method, args).subscribe(\n      (output) => {\n        operations.delete(operationId)\n        notification(\"chainHead_v1_call\", followId, {\n          event: \"operationCallDone\",\n          operationId,\n          output,\n        })\n      },\n      (e) => {\n        operations.delete(operationId)\n        console.error(e)\n        notification(\"chainHead_v1_call\", followId, {\n          event: \"operationError\",\n          operationId,\n          error: \"\", // TODO: figure this out\n        })\n      },\n    )\n    if (!subscription.closed)\n      operations.set(operationId, () => {\n        subscription.unsubscribe()\n        operations.delete(operationId)\n      })\n  }\n  const body = (\n    { operations, id: followId }: SubCtx,\n    reply: (x: any) => void,\n    at: string,\n  ) => {\n    const operationId = createOpaqueToken()\n    reply({ result: \"started\", operationId })\n    const subscription = upstream.getBody(at).subscribe(\n      ({ block: { extrinsics: value } }) => {\n        operations.delete(operationId)\n        notification(\"chainHead_v1_body\", followId, {\n          event: \"operationBodyDone\",\n          operationId,\n          value,\n        })\n      },\n      (e) => {\n        operations.delete(operationId)\n        console.error(e)\n        notification(\"chainHead_v1_body\", followId, {\n          event: \"operationError\",\n          operationId,\n          error: \"\", // TODO: figure this out\n        })\n      },\n    )\n\n    if (!subscription.closed)\n      operations.set(operationId, () => {\n        subscription.unsubscribe()\n        operations.delete(operationId)\n      })\n  }\n\n  const stg = (\n    { operations, id: followId }: SubCtx,\n    reply: (x: any) => void,\n    at: string,\n    items: Array<{\n      key: string\n      type:\n        | \"value\"\n        | \"hash\"\n        | \"descendantsValues\"\n        | \"descendantsHashes\"\n        | \"closestDescendantMerkleValue\"\n    }>,\n  ) => {\n    const operationId = createOpaqueToken()\n    reply({ result: \"started\", operationId })\n    const innerNotifiaction = (msg: any) => {\n      notification(\"chainHead_v1_storage\", followId, msg)\n    }\n    const subscription = getStg$(upstream, at, items)\n      .pipe(\n        finalize(() => {\n          operations.delete(operationId)\n        }),\n      )\n      .subscribe(\n        (items) => {\n          innerNotifiaction({\n            event: \"operationStorageItems\",\n            operationId,\n            items,\n          })\n        },\n        (e) => {\n          console.error(e)\n          innerNotifiaction({\n            event: \"operationError\",\n            operationId,\n            error: \"\", // TODO: figure this out\n          })\n        },\n        () => {\n          innerNotifiaction({\n            event: \"operationStorageDone\",\n            operationId,\n          })\n        },\n      )\n\n    if (!subscription.closed)\n      operations.set(operationId, () => {\n        subscription.unsubscribe()\n      })\n  }\n\n  return (rId: string, method: string, params: Array<any>) => {\n    if (method === chainHeadMethods.follow) return follow(rId)\n    const [followId, ...rest] = params as [string, ...any[]]\n    const ctx = subscriptions.get(followId)\n    if (!ctx) return err(rId, -32602, \"Ivalid followSubscription\")\n\n    const innerReply = (value: any) => {\n      reply(rId, value)\n    }\n\n    switch (method) {\n      case chainHeadMethods.unfollow:\n        return unfollow(rId, followId)\n      case chainHeadMethods.stopOperation:\n        return stopOperation(rId, followId, rest[0])\n      case chainHeadMethods.unpin: {\n        const [hashOrHashes] = rest\n        if (\n          (Array.isArray(hashOrHashes) ? hashOrHashes : [hashOrHashes]).some(\n            (hash) => typeof hash !== \"string\",\n          )\n        )\n          return err(rId, -32602, \"Invalid args\")\n        return unpin(ctx, innerReply, hashOrHashes)\n      }\n      default: {\n        const [at, ...other] = rest as [string, ...any[]]\n        if (!ctx.up.isPinned(at)) return err(rId, -32801, \"Block not pinned\")\n\n        switch (method) {\n          case chainHeadMethods.header:\n            return header(ctx, innerReply, at)\n          case chainHeadMethods.body:\n            return body(ctx, innerReply, at)\n          case chainHeadMethods.call: {\n            const [method, data] = other\n            if (typeof method !== \"string\" || typeof data !== \"string\")\n              return err(rId, -32602, \"Invalid args\")\n            return call(ctx, innerReply, at, method, data)\n          }\n          case chainHeadMethods.storage: {\n            const [items] = other\n            return areItemsValid(items)\n              ? stg(ctx, innerReply, at, items)\n              : err(rId, -32602, \"Invalid args\")\n          }\n        }\n      }\n    }\n    throw null\n  }\n}\n","import { createUpstream } from \"@/upstream/upstream\"\nimport { createOpaqueToken } from \"@/utils/create-opaque-token\"\nimport {\n  catchError,\n  concat,\n  ignoreElements,\n  Subscription,\n  takeUntil,\n  timer,\n} from \"rxjs\"\n\nexport const transactionMethods = Object.fromEntries(\n  [\"broadcast\", \"stop\"].map((key) => [key, `transaction_v1_${key}`] as const),\n)\n\nexport const createTransactionFns = (\n  upstream: ReturnType<typeof createUpstream>,\n  reply: (id: string, result: any) => void,\n) => {\n  return (rId: string, method: string, args: any[]) => {\n    const ongoing = new Map<string, Subscription>()\n    if (method === transactionMethods.stop) {\n      const [token] = args\n      const sub = ongoing.get(token)\n      sub?.unsubscribe()\n      ongoing.delete(token)\n      reply(rId, null)\n    } else if (method === transactionMethods.broadcast) {\n      const token = createOpaqueToken()\n      ongoing.set(\n        token,\n        upstream\n          .obsRequest(\"author_submitExtrinsic\", args)\n          .pipe(\n            catchError((_, source) => concat(timer(5_000), source)),\n            takeUntil(\n              upstream.finalized$.pipe(\n                ignoreElements(),\n                catchError(() => {\n                  ongoing.delete(token)\n                  return [null]\n                }),\n              ),\n            ),\n          )\n          .subscribe(),\n      )\n      reply(rId, token)\n    } else {\n      throw null\n    }\n  }\n}\n","import { createUpstream } from \"@/upstream/upstream\"\nimport { createOpaqueToken } from \"@/utils/create-opaque-token\"\nimport { finalize, map, Observable, take } from \"rxjs\"\nimport { areItemsValid, getStg$ } from \"./storage\"\n\nexport const archiveMethods = Object.fromEntries(\n  [\n    \"body\",\n    \"call\",\n    \"finalizedHeight\",\n    \"genesisHash\",\n    \"hashByHeight\",\n    \"header\",\n    \"stopStorage\",\n    \"storage\",\n  ].map((key) => [key, `archive_v1_${key}`] as const),\n)\n\nexport const createArchive = (\n  upstream: ReturnType<typeof createUpstream>,\n  reply: (id: string, result: any) => void,\n  err: (id: string, code: number, msg: string) => void,\n  notification: (method: string, subscription: string, result: any) => void,\n) => {\n  const subscriptions = new Map<string, () => void>()\n  const stg = (\n    reply: (x: string) => void,\n    at: string,\n    items: Array<{\n      key: string\n      type:\n        | \"value\"\n        | \"hash\"\n        | \"descendantsValues\"\n        | \"descendantsHashes\"\n        | \"closestDescendantMerkleValue\"\n    }>,\n  ) => {\n    const subId = createOpaqueToken()\n    reply(subId)\n    const innerNotifiaction = (result: any) => {\n      notification(\"archive_v1_storageEvent\", subId, result)\n    }\n\n    const subscription = getStg$(upstream, at, items)\n      .pipe(\n        finalize(() => {\n          subscriptions.delete(subId)\n        }),\n      )\n      .subscribe(\n        (items) => {\n          items.forEach((item) =>\n            innerNotifiaction({ event: \"storage\", ...item }),\n          )\n        },\n        (e) => {\n          console.error(e)\n          innerNotifiaction({ event: \"storageError\", error: \"\" }) // TODO: figure this out\n        },\n        () => {\n          innerNotifiaction({ event: \"storageDone\" })\n        },\n      )\n\n    if (!subscription.closed)\n      subscriptions.set(subId, () => {\n        subscription.unsubscribe()\n      })\n  }\n\n  return (rId: string, name: string, params: Array<any>) => {\n    const innerReply = (value: any) => {\n      reply(rId, value)\n    }\n\n    const obsReply = (input: Observable<any>) => {\n      input.subscribe({\n        next: innerReply,\n        error: (e) => {\n          err(rId, e.code ?? -1, e.error ?? \"\")\n        },\n      })\n    }\n\n    const [firstArg, secondArg, thirdArg] = params\n    switch (name) {\n      case archiveMethods.body:\n        return obsReply(upstream.getBody(firstArg))\n      case archiveMethods.call:\n        return obsReply(\n          upstream\n            .runtimeCall(firstArg, secondArg, thirdArg)\n            .pipe(map((value) => ({ success: true, value }))),\n        )\n      case archiveMethods.finalizedHeight:\n        return obsReply(\n          upstream.finalized$.pipe(\n            map((x) => x.number),\n            take(1),\n          ),\n        )\n      case archiveMethods.genesisHash:\n        return obsReply(upstream.genesisHash)\n      case archiveMethods.hashByHeight:\n        return obsReply(upstream.getBlockHash$(firstArg))\n      case archiveMethods.header:\n        return obsReply(\n          upstream.getHeader$(firstArg).pipe(map((h) => h.header)),\n        )\n      case archiveMethods.stopStorage: {\n        const sub = subscriptions.get(firstArg)\n        return sub ? sub() : err(rId, -32602, \"Invalid args\")\n      }\n      case archiveMethods.storage:\n        return areItemsValid(secondArg)\n          ? stg(innerReply, firstArg, secondArg)\n          : err(rId, -32602, \"Invalid args\")\n    }\n    throw null\n  }\n}\n","import type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\n\nexport const withNumericIds =\n  (base: JsonRpcProvider): JsonRpcProvider =>\n  (onMsg) => {\n    let nextId = 0\n    const numberToOriginal = new Map<number, string>()\n\n    const { send: originalSend, disconnect } = base((msg: string) => {\n      const { id, ...rest } = JSON.parse(msg)\n      let actualMsg = msg\n      if (numberToOriginal.has(id)) {\n        actualMsg = JSON.stringify({ ...rest, id: numberToOriginal.get(id) })\n        numberToOriginal.delete(id)\n      }\n      onMsg(actualMsg)\n    })\n\n    return {\n      send: (msg) => {\n        const parsedMsg = JSON.parse(msg)\n        let actualMsg = msg\n        if (\"id\" in parsedMsg) {\n          const id = nextId++\n          numberToOriginal.set(id, parsedMsg.id)\n          actualMsg = JSON.stringify({ ...parsedMsg, id })\n        }\n        originalSend(actualMsg)\n      },\n      disconnect,\n    }\n  }\n","import type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nimport { createUpstream } from \"@/upstream\"\nimport { chainSpecMethods, createChainSpec } from \"./chainspec\"\nimport { chainHeadMethods, createChainHead } from \"./chain-head\"\nimport { createTransactionFns, transactionMethods } from \"./transaction\"\nimport { archiveMethods, createArchive } from \"./archive\"\nimport { withNumericIds } from \"@/with-numeric\"\n\nconst supportedMethods = [\n  chainSpecMethods,\n  archiveMethods,\n  chainHeadMethods,\n  transactionMethods,\n]\n  .map((methods) => Object.values(methods) as string[])\n  .flat()\n\nexport const createDownstream =\n  () =>\n  (upstreamProvider: JsonRpcProvider): JsonRpcProvider => {\n    const upstream = createUpstream(withNumericIds(upstreamProvider))\n    return (onMessage) => {\n      const jsonRpc = (\n        input:\n          | ({ id: string } & (\n              | { result: any }\n              | { error: { code: number; message: string } }\n            ))\n          | {\n              method: string\n              params: { subscription: string; result: any }\n            },\n      ) =>\n        onMessage(\n          JSON.stringify({\n            jsonrpc: \"2.0\",\n            ...input,\n          }),\n        )\n\n      const reply = (id: string, result: any) => {\n        jsonRpc({ id, result })\n      }\n      const err = (id: string, code: number, message: string) => {\n        jsonRpc({ id, error: { code, message } })\n      }\n      const notification = (\n        method: string,\n        subscription: string,\n        result: any,\n      ) => {\n        jsonRpc({ method, params: { subscription, result } })\n      }\n\n      const groups = {\n        chainSpec: createChainSpec(upstream, reply, err),\n        chainHead: createChainHead(upstream, reply, err, notification),\n        archive: createArchive(upstream, reply, err, notification),\n        transaction: createTransactionFns(upstream, reply),\n      }\n      return {\n        send: (msg) => {\n          let parsedMsg: any = null\n          try {\n            parsedMsg = JSON.parse(msg)\n          } catch {}\n          if (!parsedMsg) return\n          const { id, method, params } = parsedMsg\n          if (\n            (id !== null && typeof id !== \"string\" && typeof id !== \"number\") ||\n            typeof method !== \"string\"\n          ) {\n            console.warn(`Invalid message:\\n${msg}`)\n            return\n          }\n          if (method === \"rpc_methods\") {\n            return upstream.methods.subscribe(\n              ({ methods }) => {\n                reply(id, {\n                  methods: [\n                    ...supportedMethods,\n                    ...methods.filter(\n                      (method) => !supportedMethods.includes(method),\n                    ),\n                  ],\n                })\n              },\n              (e: any) => {\n                console.error(e)\n                err(id, -32602, \"Invalid\")\n              },\n            )\n          }\n\n          const [groupName] = method.split(\"_\")\n          if (groupName in groups) {\n            try {\n              return groups[groupName as keyof typeof groups](\n                id,\n                method,\n                params,\n              )\n            } catch (e) {\n              if (e !== null) throw e\n            }\n          }\n\n          upstream.request(\n            method,\n            params,\n            (value) => {\n              reply(id, value)\n            },\n            (e) => {\n              err(id, e?.code || -1, e?.message || \"\")\n            },\n          )\n        },\n        disconnect: () => {\n          upstream.disconnect()\n        },\n      }\n    }\n  }\n","import { createDownstream } from \"./downstream/downstream\"\n\nexport const withLegacy = createDownstream\n"],"names":["map","withLatestFrom","shareReplay","filter","concatMap","takeWhile","toArray","mergeMap","blocks","share","skip","take","merge","result","noop","concat","tap","of","fromHex","mergeUint8","compact","toHex","Blake2256","Keccak256","Observable","Subject","pipe","combineLatest","takeUntil","validateProofs","createClient","key","reply","finalize","items","method","catchError","timer","ignoreElements"],"mappings":"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"}